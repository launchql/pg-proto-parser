/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
import { ParseResult, ScanResult, Node, Integer, Float, Boolean, String, BitString, List, OidList, IntList, A_Const, Alias, RangeVar, TableFunc, IntoClause, Var, Param, Aggref, GroupingFunc, WindowFunc, SubscriptingRef, FuncExpr, NamedArgExpr, OpExpr, DistinctExpr, NullIfExpr, ScalarArrayOpExpr, BoolExpr, SubLink, SubPlan, AlternativeSubPlan, FieldSelect, FieldStore, RelabelType, CoerceViaIO, ArrayCoerceExpr, ConvertRowtypeExpr, CollateExpr, CaseExpr, CaseWhen, CaseTestExpr, ArrayExpr, RowExpr, RowCompareExpr, CoalesceExpr, MinMaxExpr, SQLValueFunction, XmlExpr, JsonFormat, JsonReturning, JsonValueExpr, JsonConstructorExpr, JsonIsPredicate, NullTest, BooleanTest, CoerceToDomain, CoerceToDomainValue, SetToDefault, CurrentOfExpr, NextValueExpr, InferenceElem, TargetEntry, RangeTblRef, JoinExpr, FromExpr, OnConflictExpr, Query, TypeName, ColumnRef, ParamRef, A_Expr, TypeCast, CollateClause, RoleSpec, FuncCall, A_Star, A_Indices, A_Indirection, A_ArrayExpr, ResTarget, MultiAssignRef, SortBy, WindowDef, RangeSubselect, RangeFunction, RangeTableFunc, RangeTableFuncCol, RangeTableSample, ColumnDef, TableLikeClause, IndexElem, DefElem, LockingClause, XmlSerialize, PartitionElem, PartitionSpec, PartitionBoundSpec, PartitionRangeDatum, PartitionCmd, RangeTblEntry, RTEPermissionInfo, RangeTblFunction, TableSampleClause, WithCheckOption, SortGroupClause, GroupingSet, WindowClause, RowMarkClause, WithClause, InferClause, OnConflictClause, CTESearchClause, CTECycleClause, CommonTableExpr, MergeWhenClause, MergeAction, TriggerTransition, JsonOutput, JsonKeyValue, JsonObjectConstructor, JsonArrayConstructor, JsonArrayQueryConstructor, JsonAggConstructor, JsonObjectAgg, JsonArrayAgg, RawStmt, InsertStmt, DeleteStmt, UpdateStmt, MergeStmt, SelectStmt, SetOperationStmt, ReturnStmt, PLAssignStmt, CreateSchemaStmt, AlterTableStmt, ReplicaIdentityStmt, AlterTableCmd, AlterCollationStmt, AlterDomainStmt, GrantStmt, ObjectWithArgs, AccessPriv, GrantRoleStmt, AlterDefaultPrivilegesStmt, CopyStmt, VariableSetStmt, VariableShowStmt, CreateStmt, Constraint, CreateTableSpaceStmt, DropTableSpaceStmt, AlterTableSpaceOptionsStmt, AlterTableMoveAllStmt, CreateExtensionStmt, AlterExtensionStmt, AlterExtensionContentsStmt, CreateFdwStmt, AlterFdwStmt, CreateForeignServerStmt, AlterForeignServerStmt, CreateForeignTableStmt, CreateUserMappingStmt, AlterUserMappingStmt, DropUserMappingStmt, ImportForeignSchemaStmt, CreatePolicyStmt, AlterPolicyStmt, CreateAmStmt, CreateTrigStmt, CreateEventTrigStmt, AlterEventTrigStmt, CreatePLangStmt, CreateRoleStmt, AlterRoleStmt, AlterRoleSetStmt, DropRoleStmt, CreateSeqStmt, AlterSeqStmt, DefineStmt, CreateDomainStmt, CreateOpClassStmt, CreateOpClassItem, CreateOpFamilyStmt, AlterOpFamilyStmt, DropStmt, TruncateStmt, CommentStmt, SecLabelStmt, DeclareCursorStmt, ClosePortalStmt, FetchStmt, IndexStmt, CreateStatsStmt, StatsElem, AlterStatsStmt, CreateFunctionStmt, FunctionParameter, AlterFunctionStmt, DoStmt, InlineCodeBlock, CallStmt, CallContext, RenameStmt, AlterObjectDependsStmt, AlterObjectSchemaStmt, AlterOwnerStmt, AlterOperatorStmt, AlterTypeStmt, RuleStmt, NotifyStmt, ListenStmt, UnlistenStmt, TransactionStmt, CompositeTypeStmt, CreateEnumStmt, CreateRangeStmt, AlterEnumStmt, ViewStmt, LoadStmt, CreatedbStmt, AlterDatabaseStmt, AlterDatabaseRefreshCollStmt, AlterDatabaseSetStmt, DropdbStmt, AlterSystemStmt, ClusterStmt, VacuumStmt, VacuumRelation, ExplainStmt, CreateTableAsStmt, RefreshMatViewStmt, CheckPointStmt, DiscardStmt, LockStmt, ConstraintsSetStmt, ReindexStmt, CreateConversionStmt, CreateCastStmt, CreateTransformStmt, PrepareStmt, ExecuteStmt, DeallocateStmt, DropOwnedStmt, ReassignOwnedStmt, AlterTSDictionaryStmt, AlterTSConfigurationStmt, PublicationTable, PublicationObjSpec, CreatePublicationStmt, AlterPublicationStmt, CreateSubscriptionStmt, AlterSubscriptionStmt, DropSubscriptionStmt, ScanToken } from "./types";
export type ASTType<T> = { [K in keyof T as `${K & string}`]: T };
export default {
  parseResult(_p?: ParseResult): {
    ParseResult: ParseResult;
  } {
    return {
      ParseResult: {
        version: _p?.version,
        stmts: _p?.stmts
      }
    };
  },
  scanResult(_p?: ScanResult): {
    ScanResult: ScanResult;
  } {
    return {
      ScanResult: {
        version: _p?.version,
        tokens: _p?.tokens
      }
    };
  },
  integer(_p?: Integer): {
    Integer: Integer;
  } {
    return {
      Integer: {
        ival: _p?.ival
      }
    };
  },
  float(_p?: Float): {
    Float: Float;
  } {
    return {
      Float: {
        fval: _p?.fval
      }
    };
  },
  boolean(_p?: Boolean): {
    Boolean: Boolean;
  } {
    return {
      Boolean: {
        boolval: _p?.boolval
      }
    };
  },
  string(_p?: String): {
    String: String;
  } {
    return {
      String: {
        sval: _p?.sval
      }
    };
  },
  bitString(_p?: BitString): {
    BitString: BitString;
  } {
    return {
      BitString: {
        bsval: _p?.bsval
      }
    };
  },
  list(_p?: List): {
    List: List;
  } {
    return {
      List: {
        items: _p?.items
      }
    };
  },
  oidList(_p?: OidList): {
    OidList: OidList;
  } {
    return {
      OidList: {
        items: _p?.items
      }
    };
  },
  intList(_p?: IntList): {
    IntList: IntList;
  } {
    return {
      IntList: {
        items: _p?.items
      }
    };
  },
  aConst(_p?: A_Const): {
    A_Const: A_Const;
  } {
    return {
      A_Const: {
        ival: _p?.ival,
        fval: _p?.fval,
        boolval: _p?.boolval,
        sval: _p?.sval,
        bsval: _p?.bsval,
        isnull: _p?.isnull,
        location: _p?.location
      }
    };
  },
  alias(_p?: Alias): {
    Alias: Alias;
  } {
    return {
      Alias: {
        aliasname: _p?.aliasname,
        colnames: _p?.colnames
      }
    };
  },
  rangeVar(_p?: RangeVar): {
    RangeVar: RangeVar;
  } {
    return {
      RangeVar: {
        catalogname: _p?.catalogname,
        schemaname: _p?.schemaname,
        relname: _p?.relname,
        inh: _p?.inh,
        relpersistence: _p?.relpersistence,
        alias: _p?.alias,
        location: _p?.location
      }
    };
  },
  tableFunc(_p?: TableFunc): {
    TableFunc: TableFunc;
  } {
    return {
      TableFunc: {
        ns_uris: _p?.ns_uris,
        ns_names: _p?.ns_names,
        docexpr: _p?.docexpr,
        rowexpr: _p?.rowexpr,
        colnames: _p?.colnames,
        coltypes: _p?.coltypes,
        coltypmods: _p?.coltypmods,
        colcollations: _p?.colcollations,
        colexprs: _p?.colexprs,
        coldefexprs: _p?.coldefexprs,
        notnulls: _p?.notnulls,
        ordinalitycol: _p?.ordinalitycol,
        location: _p?.location
      }
    };
  },
  intoClause(_p?: IntoClause): {
    IntoClause: IntoClause;
  } {
    return {
      IntoClause: {
        rel: _p?.rel,
        colNames: _p?.colNames,
        accessMethod: _p?.accessMethod,
        options: _p?.options,
        onCommit: _p?.onCommit,
        tableSpaceName: _p?.tableSpaceName,
        viewQuery: _p?.viewQuery,
        skipData: _p?.skipData
      }
    };
  },
  var(_p?: Var): {
    Var: Var;
  } {
    return {
      Var: {
        xpr: _p?.xpr,
        varno: _p?.varno,
        varattno: _p?.varattno,
        vartype: _p?.vartype,
        vartypmod: _p?.vartypmod,
        varcollid: _p?.varcollid,
        varnullingrels: _p?.varnullingrels,
        varlevelsup: _p?.varlevelsup,
        location: _p?.location
      }
    };
  },
  param(_p?: Param): {
    Param: Param;
  } {
    return {
      Param: {
        xpr: _p?.xpr,
        paramkind: _p?.paramkind,
        paramid: _p?.paramid,
        paramtype: _p?.paramtype,
        paramtypmod: _p?.paramtypmod,
        paramcollid: _p?.paramcollid,
        location: _p?.location
      }
    };
  },
  aggref(_p?: Aggref): {
    Aggref: Aggref;
  } {
    return {
      Aggref: {
        xpr: _p?.xpr,
        aggfnoid: _p?.aggfnoid,
        aggtype: _p?.aggtype,
        aggcollid: _p?.aggcollid,
        inputcollid: _p?.inputcollid,
        aggargtypes: _p?.aggargtypes,
        aggdirectargs: _p?.aggdirectargs,
        args: _p?.args,
        aggorder: _p?.aggorder,
        aggdistinct: _p?.aggdistinct,
        aggfilter: _p?.aggfilter,
        aggstar: _p?.aggstar,
        aggvariadic: _p?.aggvariadic,
        aggkind: _p?.aggkind,
        agglevelsup: _p?.agglevelsup,
        aggsplit: _p?.aggsplit,
        aggno: _p?.aggno,
        aggtransno: _p?.aggtransno,
        location: _p?.location
      }
    };
  },
  groupingFunc(_p?: GroupingFunc): {
    GroupingFunc: GroupingFunc;
  } {
    return {
      GroupingFunc: {
        xpr: _p?.xpr,
        args: _p?.args,
        refs: _p?.refs,
        agglevelsup: _p?.agglevelsup,
        location: _p?.location
      }
    };
  },
  windowFunc(_p?: WindowFunc): {
    WindowFunc: WindowFunc;
  } {
    return {
      WindowFunc: {
        xpr: _p?.xpr,
        winfnoid: _p?.winfnoid,
        wintype: _p?.wintype,
        wincollid: _p?.wincollid,
        inputcollid: _p?.inputcollid,
        args: _p?.args,
        aggfilter: _p?.aggfilter,
        winref: _p?.winref,
        winstar: _p?.winstar,
        winagg: _p?.winagg,
        location: _p?.location
      }
    };
  },
  subscriptingRef(_p?: SubscriptingRef): {
    SubscriptingRef: SubscriptingRef;
  } {
    return {
      SubscriptingRef: {
        xpr: _p?.xpr,
        refcontainertype: _p?.refcontainertype,
        refelemtype: _p?.refelemtype,
        refrestype: _p?.refrestype,
        reftypmod: _p?.reftypmod,
        refcollid: _p?.refcollid,
        refupperindexpr: _p?.refupperindexpr,
        reflowerindexpr: _p?.reflowerindexpr,
        refexpr: _p?.refexpr,
        refassgnexpr: _p?.refassgnexpr
      }
    };
  },
  funcExpr(_p?: FuncExpr): {
    FuncExpr: FuncExpr;
  } {
    return {
      FuncExpr: {
        xpr: _p?.xpr,
        funcid: _p?.funcid,
        funcresulttype: _p?.funcresulttype,
        funcretset: _p?.funcretset,
        funcvariadic: _p?.funcvariadic,
        funcformat: _p?.funcformat,
        funccollid: _p?.funccollid,
        inputcollid: _p?.inputcollid,
        args: _p?.args,
        location: _p?.location
      }
    };
  },
  namedArgExpr(_p?: NamedArgExpr): {
    NamedArgExpr: NamedArgExpr;
  } {
    return {
      NamedArgExpr: {
        xpr: _p?.xpr,
        arg: _p?.arg,
        name: _p?.name,
        argnumber: _p?.argnumber,
        location: _p?.location
      }
    };
  },
  opExpr(_p?: OpExpr): {
    OpExpr: OpExpr;
  } {
    return {
      OpExpr: {
        xpr: _p?.xpr,
        opno: _p?.opno,
        opresulttype: _p?.opresulttype,
        opretset: _p?.opretset,
        opcollid: _p?.opcollid,
        inputcollid: _p?.inputcollid,
        args: _p?.args,
        location: _p?.location
      }
    };
  },
  distinctExpr(_p?: DistinctExpr): {
    DistinctExpr: DistinctExpr;
  } {
    return {
      DistinctExpr: {
        xpr: _p?.xpr,
        opno: _p?.opno,
        opresulttype: _p?.opresulttype,
        opretset: _p?.opretset,
        opcollid: _p?.opcollid,
        inputcollid: _p?.inputcollid,
        args: _p?.args,
        location: _p?.location
      }
    };
  },
  nullIfExpr(_p?: NullIfExpr): {
    NullIfExpr: NullIfExpr;
  } {
    return {
      NullIfExpr: {
        xpr: _p?.xpr,
        opno: _p?.opno,
        opresulttype: _p?.opresulttype,
        opretset: _p?.opretset,
        opcollid: _p?.opcollid,
        inputcollid: _p?.inputcollid,
        args: _p?.args,
        location: _p?.location
      }
    };
  },
  scalarArrayOpExpr(_p?: ScalarArrayOpExpr): {
    ScalarArrayOpExpr: ScalarArrayOpExpr;
  } {
    return {
      ScalarArrayOpExpr: {
        xpr: _p?.xpr,
        opno: _p?.opno,
        useOr: _p?.useOr,
        inputcollid: _p?.inputcollid,
        args: _p?.args,
        location: _p?.location
      }
    };
  },
  boolExpr(_p?: BoolExpr): {
    BoolExpr: BoolExpr;
  } {
    return {
      BoolExpr: {
        xpr: _p?.xpr,
        boolop: _p?.boolop,
        args: _p?.args,
        location: _p?.location
      }
    };
  },
  subLink(_p?: SubLink): {
    SubLink: SubLink;
  } {
    return {
      SubLink: {
        xpr: _p?.xpr,
        subLinkType: _p?.subLinkType,
        subLinkId: _p?.subLinkId,
        testexpr: _p?.testexpr,
        operName: _p?.operName,
        subselect: _p?.subselect,
        location: _p?.location
      }
    };
  },
  subPlan(_p?: SubPlan): {
    SubPlan: SubPlan;
  } {
    return {
      SubPlan: {
        xpr: _p?.xpr,
        subLinkType: _p?.subLinkType,
        testexpr: _p?.testexpr,
        paramIds: _p?.paramIds,
        plan_id: _p?.plan_id,
        plan_name: _p?.plan_name,
        firstColType: _p?.firstColType,
        firstColTypmod: _p?.firstColTypmod,
        firstColCollation: _p?.firstColCollation,
        useHashTable: _p?.useHashTable,
        unknownEqFalse: _p?.unknownEqFalse,
        parallel_safe: _p?.parallel_safe,
        setParam: _p?.setParam,
        parParam: _p?.parParam,
        args: _p?.args,
        startup_cost: _p?.startup_cost,
        per_call_cost: _p?.per_call_cost
      }
    };
  },
  alternativeSubPlan(_p?: AlternativeSubPlan): {
    AlternativeSubPlan: AlternativeSubPlan;
  } {
    return {
      AlternativeSubPlan: {
        xpr: _p?.xpr,
        subplans: _p?.subplans
      }
    };
  },
  fieldSelect(_p?: FieldSelect): {
    FieldSelect: FieldSelect;
  } {
    return {
      FieldSelect: {
        xpr: _p?.xpr,
        arg: _p?.arg,
        fieldnum: _p?.fieldnum,
        resulttype: _p?.resulttype,
        resulttypmod: _p?.resulttypmod,
        resultcollid: _p?.resultcollid
      }
    };
  },
  fieldStore(_p?: FieldStore): {
    FieldStore: FieldStore;
  } {
    return {
      FieldStore: {
        xpr: _p?.xpr,
        arg: _p?.arg,
        newvals: _p?.newvals,
        fieldnums: _p?.fieldnums,
        resulttype: _p?.resulttype
      }
    };
  },
  relabelType(_p?: RelabelType): {
    RelabelType: RelabelType;
  } {
    return {
      RelabelType: {
        xpr: _p?.xpr,
        arg: _p?.arg,
        resulttype: _p?.resulttype,
        resulttypmod: _p?.resulttypmod,
        resultcollid: _p?.resultcollid,
        relabelformat: _p?.relabelformat,
        location: _p?.location
      }
    };
  },
  coerceViaio(_p?: CoerceViaIO): {
    CoerceViaIO: CoerceViaIO;
  } {
    return {
      CoerceViaIO: {
        xpr: _p?.xpr,
        arg: _p?.arg,
        resulttype: _p?.resulttype,
        resultcollid: _p?.resultcollid,
        coerceformat: _p?.coerceformat,
        location: _p?.location
      }
    };
  },
  arrayCoerceExpr(_p?: ArrayCoerceExpr): {
    ArrayCoerceExpr: ArrayCoerceExpr;
  } {
    return {
      ArrayCoerceExpr: {
        xpr: _p?.xpr,
        arg: _p?.arg,
        elemexpr: _p?.elemexpr,
        resulttype: _p?.resulttype,
        resulttypmod: _p?.resulttypmod,
        resultcollid: _p?.resultcollid,
        coerceformat: _p?.coerceformat,
        location: _p?.location
      }
    };
  },
  convertRowtypeExpr(_p?: ConvertRowtypeExpr): {
    ConvertRowtypeExpr: ConvertRowtypeExpr;
  } {
    return {
      ConvertRowtypeExpr: {
        xpr: _p?.xpr,
        arg: _p?.arg,
        resulttype: _p?.resulttype,
        convertformat: _p?.convertformat,
        location: _p?.location
      }
    };
  },
  collateExpr(_p?: CollateExpr): {
    CollateExpr: CollateExpr;
  } {
    return {
      CollateExpr: {
        xpr: _p?.xpr,
        arg: _p?.arg,
        collOid: _p?.collOid,
        location: _p?.location
      }
    };
  },
  caseExpr(_p?: CaseExpr): {
    CaseExpr: CaseExpr;
  } {
    return {
      CaseExpr: {
        xpr: _p?.xpr,
        casetype: _p?.casetype,
        casecollid: _p?.casecollid,
        arg: _p?.arg,
        args: _p?.args,
        defresult: _p?.defresult,
        location: _p?.location
      }
    };
  },
  caseWhen(_p?: CaseWhen): {
    CaseWhen: CaseWhen;
  } {
    return {
      CaseWhen: {
        xpr: _p?.xpr,
        expr: _p?.expr,
        result: _p?.result,
        location: _p?.location
      }
    };
  },
  caseTestExpr(_p?: CaseTestExpr): {
    CaseTestExpr: CaseTestExpr;
  } {
    return {
      CaseTestExpr: {
        xpr: _p?.xpr,
        typeId: _p?.typeId,
        typeMod: _p?.typeMod,
        collation: _p?.collation
      }
    };
  },
  arrayExpr(_p?: ArrayExpr): {
    ArrayExpr: ArrayExpr;
  } {
    return {
      ArrayExpr: {
        xpr: _p?.xpr,
        array_typeid: _p?.array_typeid,
        array_collid: _p?.array_collid,
        element_typeid: _p?.element_typeid,
        elements: _p?.elements,
        multidims: _p?.multidims,
        location: _p?.location
      }
    };
  },
  rowExpr(_p?: RowExpr): {
    RowExpr: RowExpr;
  } {
    return {
      RowExpr: {
        xpr: _p?.xpr,
        args: _p?.args,
        row_typeid: _p?.row_typeid,
        row_format: _p?.row_format,
        colnames: _p?.colnames,
        location: _p?.location
      }
    };
  },
  rowCompareExpr(_p?: RowCompareExpr): {
    RowCompareExpr: RowCompareExpr;
  } {
    return {
      RowCompareExpr: {
        xpr: _p?.xpr,
        rctype: _p?.rctype,
        opnos: _p?.opnos,
        opfamilies: _p?.opfamilies,
        inputcollids: _p?.inputcollids,
        largs: _p?.largs,
        rargs: _p?.rargs
      }
    };
  },
  coalesceExpr(_p?: CoalesceExpr): {
    CoalesceExpr: CoalesceExpr;
  } {
    return {
      CoalesceExpr: {
        xpr: _p?.xpr,
        coalescetype: _p?.coalescetype,
        coalescecollid: _p?.coalescecollid,
        args: _p?.args,
        location: _p?.location
      }
    };
  },
  minMaxExpr(_p?: MinMaxExpr): {
    MinMaxExpr: MinMaxExpr;
  } {
    return {
      MinMaxExpr: {
        xpr: _p?.xpr,
        minmaxtype: _p?.minmaxtype,
        minmaxcollid: _p?.minmaxcollid,
        inputcollid: _p?.inputcollid,
        op: _p?.op,
        args: _p?.args,
        location: _p?.location
      }
    };
  },
  sqlValueFunction(_p?: SQLValueFunction): {
    SQLValueFunction: SQLValueFunction;
  } {
    return {
      SQLValueFunction: {
        xpr: _p?.xpr,
        op: _p?.op,
        type: _p?.type,
        typmod: _p?.typmod,
        location: _p?.location
      }
    };
  },
  xmlExpr(_p?: XmlExpr): {
    XmlExpr: XmlExpr;
  } {
    return {
      XmlExpr: {
        xpr: _p?.xpr,
        op: _p?.op,
        name: _p?.name,
        named_args: _p?.named_args,
        arg_names: _p?.arg_names,
        args: _p?.args,
        xmloption: _p?.xmloption,
        indent: _p?.indent,
        type: _p?.type,
        typmod: _p?.typmod,
        location: _p?.location
      }
    };
  },
  jsonFormat(_p?: JsonFormat): {
    JsonFormat: JsonFormat;
  } {
    return {
      JsonFormat: {
        format_type: _p?.format_type,
        encoding: _p?.encoding,
        location: _p?.location
      }
    };
  },
  jsonReturning(_p?: JsonReturning): {
    JsonReturning: JsonReturning;
  } {
    return {
      JsonReturning: {
        format: _p?.format,
        typid: _p?.typid,
        typmod: _p?.typmod
      }
    };
  },
  jsonValueExpr(_p?: JsonValueExpr): {
    JsonValueExpr: JsonValueExpr;
  } {
    return {
      JsonValueExpr: {
        raw_expr: _p?.raw_expr,
        formatted_expr: _p?.formatted_expr,
        format: _p?.format
      }
    };
  },
  jsonConstructorExpr(_p?: JsonConstructorExpr): {
    JsonConstructorExpr: JsonConstructorExpr;
  } {
    return {
      JsonConstructorExpr: {
        xpr: _p?.xpr,
        type: _p?.type,
        args: _p?.args,
        func: _p?.func,
        coercion: _p?.coercion,
        returning: _p?.returning,
        absent_on_null: _p?.absent_on_null,
        unique: _p?.unique,
        location: _p?.location
      }
    };
  },
  jsonIsPredicate(_p?: JsonIsPredicate): {
    JsonIsPredicate: JsonIsPredicate;
  } {
    return {
      JsonIsPredicate: {
        expr: _p?.expr,
        format: _p?.format,
        item_type: _p?.item_type,
        unique_keys: _p?.unique_keys,
        location: _p?.location
      }
    };
  },
  nullTest(_p?: NullTest): {
    NullTest: NullTest;
  } {
    return {
      NullTest: {
        xpr: _p?.xpr,
        arg: _p?.arg,
        nulltesttype: _p?.nulltesttype,
        argisrow: _p?.argisrow,
        location: _p?.location
      }
    };
  },
  booleanTest(_p?: BooleanTest): {
    BooleanTest: BooleanTest;
  } {
    return {
      BooleanTest: {
        xpr: _p?.xpr,
        arg: _p?.arg,
        booltesttype: _p?.booltesttype,
        location: _p?.location
      }
    };
  },
  coerceToDomain(_p?: CoerceToDomain): {
    CoerceToDomain: CoerceToDomain;
  } {
    return {
      CoerceToDomain: {
        xpr: _p?.xpr,
        arg: _p?.arg,
        resulttype: _p?.resulttype,
        resulttypmod: _p?.resulttypmod,
        resultcollid: _p?.resultcollid,
        coercionformat: _p?.coercionformat,
        location: _p?.location
      }
    };
  },
  coerceToDomainValue(_p?: CoerceToDomainValue): {
    CoerceToDomainValue: CoerceToDomainValue;
  } {
    return {
      CoerceToDomainValue: {
        xpr: _p?.xpr,
        typeId: _p?.typeId,
        typeMod: _p?.typeMod,
        collation: _p?.collation,
        location: _p?.location
      }
    };
  },
  setToDefault(_p?: SetToDefault): {
    SetToDefault: SetToDefault;
  } {
    return {
      SetToDefault: {
        xpr: _p?.xpr,
        typeId: _p?.typeId,
        typeMod: _p?.typeMod,
        collation: _p?.collation,
        location: _p?.location
      }
    };
  },
  currentOfExpr(_p?: CurrentOfExpr): {
    CurrentOfExpr: CurrentOfExpr;
  } {
    return {
      CurrentOfExpr: {
        xpr: _p?.xpr,
        cvarno: _p?.cvarno,
        cursor_name: _p?.cursor_name,
        cursor_param: _p?.cursor_param
      }
    };
  },
  nextValueExpr(_p?: NextValueExpr): {
    NextValueExpr: NextValueExpr;
  } {
    return {
      NextValueExpr: {
        xpr: _p?.xpr,
        seqid: _p?.seqid,
        typeId: _p?.typeId
      }
    };
  },
  inferenceElem(_p?: InferenceElem): {
    InferenceElem: InferenceElem;
  } {
    return {
      InferenceElem: {
        xpr: _p?.xpr,
        expr: _p?.expr,
        infercollid: _p?.infercollid,
        inferopclass: _p?.inferopclass
      }
    };
  },
  targetEntry(_p?: TargetEntry): {
    TargetEntry: TargetEntry;
  } {
    return {
      TargetEntry: {
        xpr: _p?.xpr,
        expr: _p?.expr,
        resno: _p?.resno,
        resname: _p?.resname,
        ressortgroupref: _p?.ressortgroupref,
        resorigtbl: _p?.resorigtbl,
        resorigcol: _p?.resorigcol,
        resjunk: _p?.resjunk
      }
    };
  },
  rangeTblRef(_p?: RangeTblRef): {
    RangeTblRef: RangeTblRef;
  } {
    return {
      RangeTblRef: {
        rtindex: _p?.rtindex
      }
    };
  },
  joinExpr(_p?: JoinExpr): {
    JoinExpr: JoinExpr;
  } {
    return {
      JoinExpr: {
        jointype: _p?.jointype,
        isNatural: _p?.isNatural,
        larg: _p?.larg,
        rarg: _p?.rarg,
        usingClause: _p?.usingClause,
        join_using_alias: _p?.join_using_alias,
        quals: _p?.quals,
        alias: _p?.alias,
        rtindex: _p?.rtindex
      }
    };
  },
  fromExpr(_p?: FromExpr): {
    FromExpr: FromExpr;
  } {
    return {
      FromExpr: {
        fromlist: _p?.fromlist,
        quals: _p?.quals
      }
    };
  },
  onConflictExpr(_p?: OnConflictExpr): {
    OnConflictExpr: OnConflictExpr;
  } {
    return {
      OnConflictExpr: {
        action: _p?.action,
        arbiterElems: _p?.arbiterElems,
        arbiterWhere: _p?.arbiterWhere,
        constraint: _p?.constraint,
        onConflictSet: _p?.onConflictSet,
        onConflictWhere: _p?.onConflictWhere,
        exclRelIndex: _p?.exclRelIndex,
        exclRelTlist: _p?.exclRelTlist
      }
    };
  },
  query(_p?: Query): {
    Query: Query;
  } {
    return {
      Query: {
        commandType: _p?.commandType,
        querySource: _p?.querySource,
        canSetTag: _p?.canSetTag,
        utilityStmt: _p?.utilityStmt,
        resultRelation: _p?.resultRelation,
        hasAggs: _p?.hasAggs,
        hasWindowFuncs: _p?.hasWindowFuncs,
        hasTargetSRFs: _p?.hasTargetSRFs,
        hasSubLinks: _p?.hasSubLinks,
        hasDistinctOn: _p?.hasDistinctOn,
        hasRecursive: _p?.hasRecursive,
        hasModifyingCTE: _p?.hasModifyingCTE,
        hasForUpdate: _p?.hasForUpdate,
        hasRowSecurity: _p?.hasRowSecurity,
        isReturn: _p?.isReturn,
        cteList: _p?.cteList,
        rtable: _p?.rtable,
        rteperminfos: _p?.rteperminfos,
        jointree: _p?.jointree,
        mergeActionList: _p?.mergeActionList,
        mergeUseOuterJoin: _p?.mergeUseOuterJoin,
        targetList: _p?.targetList,
        override: _p?.override,
        onConflict: _p?.onConflict,
        returningList: _p?.returningList,
        groupClause: _p?.groupClause,
        groupDistinct: _p?.groupDistinct,
        groupingSets: _p?.groupingSets,
        havingQual: _p?.havingQual,
        windowClause: _p?.windowClause,
        distinctClause: _p?.distinctClause,
        sortClause: _p?.sortClause,
        limitOffset: _p?.limitOffset,
        limitCount: _p?.limitCount,
        limitOption: _p?.limitOption,
        rowMarks: _p?.rowMarks,
        setOperations: _p?.setOperations,
        constraintDeps: _p?.constraintDeps,
        withCheckOptions: _p?.withCheckOptions,
        stmt_location: _p?.stmt_location,
        stmt_len: _p?.stmt_len
      }
    };
  },
  typeName(_p?: TypeName): {
    TypeName: TypeName;
  } {
    return {
      names: _p?.names,
      typeOid: _p?.typeOid,
      setof: _p?.setof,
      pct_type: _p?.pct_type,
      typmods: _p?.typmods,
      typemod: _p?.typemod,
      arrayBounds: _p?.arrayBounds,
      location: _p?.location
    };
  },
  columnRef(_p?: ColumnRef): {
    ColumnRef: ColumnRef;
  } {
    return {
      ColumnRef: {
        fields: _p?.fields,
        location: _p?.location
      }
    };
  },
  paramRef(_p?: ParamRef): {
    ParamRef: ParamRef;
  } {
    return {
      ParamRef: {
        number: _p?.number,
        location: _p?.location
      }
    };
  },
  aExpr(_p?: A_Expr): {
    A_Expr: A_Expr;
  } {
    return {
      A_Expr: {
        kind: _p?.kind,
        name: _p?.name,
        lexpr: _p?.lexpr,
        rexpr: _p?.rexpr,
        location: _p?.location
      }
    };
  },
  typeCast(_p?: TypeCast): {
    TypeCast: TypeCast;
  } {
    return {
      TypeCast: {
        arg: _p?.arg,
        typeName: _p?.typeName,
        location: _p?.location
      }
    };
  },
  collateClause(_p?: CollateClause): {
    CollateClause: CollateClause;
  } {
    return {
      CollateClause: {
        arg: _p?.arg,
        collname: _p?.collname,
        location: _p?.location
      }
    };
  },
  roleSpec(_p?: RoleSpec): {
    RoleSpec: RoleSpec;
  } {
    return {
      RoleSpec: {
        roletype: _p?.roletype,
        rolename: _p?.rolename,
        location: _p?.location
      }
    };
  },
  funcCall(_p?: FuncCall): {
    FuncCall: FuncCall;
  } {
    return {
      FuncCall: {
        funcname: _p?.funcname,
        args: _p?.args,
        agg_order: _p?.agg_order,
        agg_filter: _p?.agg_filter,
        over: _p?.over,
        agg_within_group: _p?.agg_within_group,
        agg_star: _p?.agg_star,
        agg_distinct: _p?.agg_distinct,
        func_variadic: _p?.func_variadic,
        funcformat: _p?.funcformat,
        location: _p?.location
      }
    };
  },
  aStar(_p?: A_Star): {
    A_Star: A_Star;
  } {
    return {
      A_Star: {}
    };
  },
  aIndices(_p?: A_Indices): {
    A_Indices: A_Indices;
  } {
    return {
      A_Indices: {
        is_slice: _p?.is_slice,
        lidx: _p?.lidx,
        uidx: _p?.uidx
      }
    };
  },
  aIndirection(_p?: A_Indirection): {
    A_Indirection: A_Indirection;
  } {
    return {
      A_Indirection: {
        arg: _p?.arg,
        indirection: _p?.indirection
      }
    };
  },
  aArrayExpr(_p?: A_ArrayExpr): {
    A_ArrayExpr: A_ArrayExpr;
  } {
    return {
      A_ArrayExpr: {
        elements: _p?.elements,
        location: _p?.location
      }
    };
  },
  resTarget(_p?: ResTarget): {
    ResTarget: ResTarget;
  } {
    return {
      ResTarget: {
        name: _p?.name,
        indirection: _p?.indirection,
        val: _p?.val,
        location: _p?.location
      }
    };
  },
  multiAssignRef(_p?: MultiAssignRef): {
    MultiAssignRef: MultiAssignRef;
  } {
    return {
      MultiAssignRef: {
        source: _p?.source,
        colno: _p?.colno,
        ncolumns: _p?.ncolumns
      }
    };
  },
  sortBy(_p?: SortBy): {
    SortBy: SortBy;
  } {
    return {
      SortBy: {
        node: _p?.node,
        sortby_dir: _p?.sortby_dir,
        sortby_nulls: _p?.sortby_nulls,
        useOp: _p?.useOp,
        location: _p?.location
      }
    };
  },
  windowDef(_p?: WindowDef): {
    WindowDef: WindowDef;
  } {
    return {
      WindowDef: {
        name: _p?.name,
        refname: _p?.refname,
        partitionClause: _p?.partitionClause,
        orderClause: _p?.orderClause,
        frameOptions: _p?.frameOptions,
        startOffset: _p?.startOffset,
        endOffset: _p?.endOffset,
        location: _p?.location
      }
    };
  },
  rangeSubselect(_p?: RangeSubselect): {
    RangeSubselect: RangeSubselect;
  } {
    return {
      RangeSubselect: {
        lateral: _p?.lateral,
        subquery: _p?.subquery,
        alias: _p?.alias
      }
    };
  },
  rangeFunction(_p?: RangeFunction): {
    RangeFunction: RangeFunction;
  } {
    return {
      RangeFunction: {
        lateral: _p?.lateral,
        ordinality: _p?.ordinality,
        is_rowsfrom: _p?.is_rowsfrom,
        functions: _p?.functions,
        alias: _p?.alias,
        coldeflist: _p?.coldeflist
      }
    };
  },
  rangeTableFunc(_p?: RangeTableFunc): {
    RangeTableFunc: RangeTableFunc;
  } {
    return {
      RangeTableFunc: {
        lateral: _p?.lateral,
        docexpr: _p?.docexpr,
        rowexpr: _p?.rowexpr,
        namespaces: _p?.namespaces,
        columns: _p?.columns,
        alias: _p?.alias,
        location: _p?.location
      }
    };
  },
  rangeTableFuncCol(_p?: RangeTableFuncCol): {
    RangeTableFuncCol: RangeTableFuncCol;
  } {
    return {
      RangeTableFuncCol: {
        colname: _p?.colname,
        typeName: _p?.typeName,
        for_ordinality: _p?.for_ordinality,
        is_not_null: _p?.is_not_null,
        colexpr: _p?.colexpr,
        coldefexpr: _p?.coldefexpr,
        location: _p?.location
      }
    };
  },
  rangeTableSample(_p?: RangeTableSample): {
    RangeTableSample: RangeTableSample;
  } {
    return {
      RangeTableSample: {
        relation: _p?.relation,
        method: _p?.method,
        args: _p?.args,
        repeatable: _p?.repeatable,
        location: _p?.location
      }
    };
  },
  columnDef(_p?: ColumnDef): {
    ColumnDef: ColumnDef;
  } {
    return {
      ColumnDef: {
        colname: _p?.colname,
        typeName: _p?.typeName,
        compression: _p?.compression,
        inhcount: _p?.inhcount,
        is_local: _p?.is_local,
        is_not_null: _p?.is_not_null,
        is_from_type: _p?.is_from_type,
        storage: _p?.storage,
        storage_name: _p?.storage_name,
        raw_default: _p?.raw_default,
        cooked_default: _p?.cooked_default,
        identity: _p?.identity,
        identitySequence: _p?.identitySequence,
        generated: _p?.generated,
        collClause: _p?.collClause,
        collOid: _p?.collOid,
        constraints: _p?.constraints,
        fdwoptions: _p?.fdwoptions,
        location: _p?.location
      }
    };
  },
  tableLikeClause(_p?: TableLikeClause): {
    TableLikeClause: TableLikeClause;
  } {
    return {
      TableLikeClause: {
        relation: _p?.relation,
        options: _p?.options,
        relationOid: _p?.relationOid
      }
    };
  },
  indexElem(_p?: IndexElem): {
    IndexElem: IndexElem;
  } {
    return {
      IndexElem: {
        name: _p?.name,
        expr: _p?.expr,
        indexcolname: _p?.indexcolname,
        collation: _p?.collation,
        opclass: _p?.opclass,
        opclassopts: _p?.opclassopts,
        ordering: _p?.ordering,
        nulls_ordering: _p?.nulls_ordering
      }
    };
  },
  defElem(_p?: DefElem): {
    DefElem: DefElem;
  } {
    return {
      DefElem: {
        defnamespace: _p?.defnamespace,
        defname: _p?.defname,
        arg: _p?.arg,
        defaction: _p?.defaction,
        location: _p?.location
      }
    };
  },
  lockingClause(_p?: LockingClause): {
    LockingClause: LockingClause;
  } {
    return {
      LockingClause: {
        lockedRels: _p?.lockedRels,
        strength: _p?.strength,
        waitPolicy: _p?.waitPolicy
      }
    };
  },
  xmlSerialize(_p?: XmlSerialize): {
    XmlSerialize: XmlSerialize;
  } {
    return {
      XmlSerialize: {
        xmloption: _p?.xmloption,
        expr: _p?.expr,
        typeName: _p?.typeName,
        indent: _p?.indent,
        location: _p?.location
      }
    };
  },
  partitionElem(_p?: PartitionElem): {
    PartitionElem: PartitionElem;
  } {
    return {
      PartitionElem: {
        name: _p?.name,
        expr: _p?.expr,
        collation: _p?.collation,
        opclass: _p?.opclass,
        location: _p?.location
      }
    };
  },
  partitionSpec(_p?: PartitionSpec): {
    PartitionSpec: PartitionSpec;
  } {
    return {
      PartitionSpec: {
        strategy: _p?.strategy,
        partParams: _p?.partParams,
        location: _p?.location
      }
    };
  },
  partitionBoundSpec(_p?: PartitionBoundSpec): {
    PartitionBoundSpec: PartitionBoundSpec;
  } {
    return {
      PartitionBoundSpec: {
        strategy: _p?.strategy,
        is_default: _p?.is_default,
        modulus: _p?.modulus,
        remainder: _p?.remainder,
        listdatums: _p?.listdatums,
        lowerdatums: _p?.lowerdatums,
        upperdatums: _p?.upperdatums,
        location: _p?.location
      }
    };
  },
  partitionRangeDatum(_p?: PartitionRangeDatum): {
    PartitionRangeDatum: PartitionRangeDatum;
  } {
    return {
      PartitionRangeDatum: {
        kind: _p?.kind,
        value: _p?.value,
        location: _p?.location
      }
    };
  },
  partitionCmd(_p?: PartitionCmd): {
    PartitionCmd: PartitionCmd;
  } {
    return {
      PartitionCmd: {
        name: _p?.name,
        bound: _p?.bound,
        concurrent: _p?.concurrent
      }
    };
  },
  rangeTblEntry(_p?: RangeTblEntry): {
    RangeTblEntry: RangeTblEntry;
  } {
    return {
      RangeTblEntry: {
        rtekind: _p?.rtekind,
        relid: _p?.relid,
        relkind: _p?.relkind,
        rellockmode: _p?.rellockmode,
        tablesample: _p?.tablesample,
        perminfoindex: _p?.perminfoindex,
        subquery: _p?.subquery,
        security_barrier: _p?.security_barrier,
        jointype: _p?.jointype,
        joinmergedcols: _p?.joinmergedcols,
        joinaliasvars: _p?.joinaliasvars,
        joinleftcols: _p?.joinleftcols,
        joinrightcols: _p?.joinrightcols,
        join_using_alias: _p?.join_using_alias,
        functions: _p?.functions,
        funcordinality: _p?.funcordinality,
        tablefunc: _p?.tablefunc,
        values_lists: _p?.values_lists,
        ctename: _p?.ctename,
        ctelevelsup: _p?.ctelevelsup,
        self_reference: _p?.self_reference,
        coltypes: _p?.coltypes,
        coltypmods: _p?.coltypmods,
        colcollations: _p?.colcollations,
        enrname: _p?.enrname,
        enrtuples: _p?.enrtuples,
        alias: _p?.alias,
        eref: _p?.eref,
        lateral: _p?.lateral,
        inh: _p?.inh,
        inFromCl: _p?.inFromCl,
        securityQuals: _p?.securityQuals
      }
    };
  },
  rtePermissionInfo(_p?: RTEPermissionInfo): {
    RTEPermissionInfo: RTEPermissionInfo;
  } {
    return {
      RTEPermissionInfo: {
        relid: _p?.relid,
        inh: _p?.inh,
        requiredPerms: _p?.requiredPerms,
        checkAsUser: _p?.checkAsUser,
        selectedCols: _p?.selectedCols,
        insertedCols: _p?.insertedCols,
        updatedCols: _p?.updatedCols
      }
    };
  },
  rangeTblFunction(_p?: RangeTblFunction): {
    RangeTblFunction: RangeTblFunction;
  } {
    return {
      RangeTblFunction: {
        funcexpr: _p?.funcexpr,
        funccolcount: _p?.funccolcount,
        funccolnames: _p?.funccolnames,
        funccoltypes: _p?.funccoltypes,
        funccoltypmods: _p?.funccoltypmods,
        funccolcollations: _p?.funccolcollations,
        funcparams: _p?.funcparams
      }
    };
  },
  tableSampleClause(_p?: TableSampleClause): {
    TableSampleClause: TableSampleClause;
  } {
    return {
      TableSampleClause: {
        tsmhandler: _p?.tsmhandler,
        args: _p?.args,
        repeatable: _p?.repeatable
      }
    };
  },
  withCheckOption(_p?: WithCheckOption): {
    WithCheckOption: WithCheckOption;
  } {
    return {
      WithCheckOption: {
        kind: _p?.kind,
        relname: _p?.relname,
        polname: _p?.polname,
        qual: _p?.qual,
        cascaded: _p?.cascaded
      }
    };
  },
  sortGroupClause(_p?: SortGroupClause): {
    SortGroupClause: SortGroupClause;
  } {
    return {
      SortGroupClause: {
        tleSortGroupRef: _p?.tleSortGroupRef,
        eqop: _p?.eqop,
        sortop: _p?.sortop,
        nulls_first: _p?.nulls_first,
        hashable: _p?.hashable
      }
    };
  },
  groupingSet(_p?: GroupingSet): {
    GroupingSet: GroupingSet;
  } {
    return {
      GroupingSet: {
        kind: _p?.kind,
        content: _p?.content,
        location: _p?.location
      }
    };
  },
  windowClause(_p?: WindowClause): {
    WindowClause: WindowClause;
  } {
    return {
      WindowClause: {
        name: _p?.name,
        refname: _p?.refname,
        partitionClause: _p?.partitionClause,
        orderClause: _p?.orderClause,
        frameOptions: _p?.frameOptions,
        startOffset: _p?.startOffset,
        endOffset: _p?.endOffset,
        runCondition: _p?.runCondition,
        startInRangeFunc: _p?.startInRangeFunc,
        endInRangeFunc: _p?.endInRangeFunc,
        inRangeColl: _p?.inRangeColl,
        inRangeAsc: _p?.inRangeAsc,
        inRangeNullsFirst: _p?.inRangeNullsFirst,
        winref: _p?.winref,
        copiedOrder: _p?.copiedOrder
      }
    };
  },
  rowMarkClause(_p?: RowMarkClause): {
    RowMarkClause: RowMarkClause;
  } {
    return {
      RowMarkClause: {
        rti: _p?.rti,
        strength: _p?.strength,
        waitPolicy: _p?.waitPolicy,
        pushedDown: _p?.pushedDown
      }
    };
  },
  withClause(_p?: WithClause): {
    WithClause: WithClause;
  } {
    return {
      WithClause: {
        ctes: _p?.ctes,
        recursive: _p?.recursive,
        location: _p?.location
      }
    };
  },
  inferClause(_p?: InferClause): {
    InferClause: InferClause;
  } {
    return {
      InferClause: {
        indexElems: _p?.indexElems,
        whereClause: _p?.whereClause,
        conname: _p?.conname,
        location: _p?.location
      }
    };
  },
  onConflictClause(_p?: OnConflictClause): {
    OnConflictClause: OnConflictClause;
  } {
    return {
      OnConflictClause: {
        action: _p?.action,
        infer: _p?.infer,
        targetList: _p?.targetList,
        whereClause: _p?.whereClause,
        location: _p?.location
      }
    };
  },
  cteSearchClause(_p?: CTESearchClause): {
    CTESearchClause: CTESearchClause;
  } {
    return {
      CTESearchClause: {
        search_col_list: _p?.search_col_list,
        search_breadth_first: _p?.search_breadth_first,
        search_seq_column: _p?.search_seq_column,
        location: _p?.location
      }
    };
  },
  cteCycleClause(_p?: CTECycleClause): {
    CTECycleClause: CTECycleClause;
  } {
    return {
      CTECycleClause: {
        cycle_col_list: _p?.cycle_col_list,
        cycle_mark_column: _p?.cycle_mark_column,
        cycle_mark_value: _p?.cycle_mark_value,
        cycle_mark_default: _p?.cycle_mark_default,
        cycle_path_column: _p?.cycle_path_column,
        location: _p?.location,
        cycle_mark_type: _p?.cycle_mark_type,
        cycle_mark_typmod: _p?.cycle_mark_typmod,
        cycle_mark_collation: _p?.cycle_mark_collation,
        cycle_mark_neop: _p?.cycle_mark_neop
      }
    };
  },
  commonTableExpr(_p?: CommonTableExpr): {
    CommonTableExpr: CommonTableExpr;
  } {
    return {
      CommonTableExpr: {
        ctename: _p?.ctename,
        aliascolnames: _p?.aliascolnames,
        ctematerialized: _p?.ctematerialized,
        ctequery: _p?.ctequery,
        search_clause: _p?.search_clause,
        cycle_clause: _p?.cycle_clause,
        location: _p?.location,
        cterecursive: _p?.cterecursive,
        cterefcount: _p?.cterefcount,
        ctecolnames: _p?.ctecolnames,
        ctecoltypes: _p?.ctecoltypes,
        ctecoltypmods: _p?.ctecoltypmods,
        ctecolcollations: _p?.ctecolcollations
      }
    };
  },
  mergeWhenClause(_p?: MergeWhenClause): {
    MergeWhenClause: MergeWhenClause;
  } {
    return {
      MergeWhenClause: {
        matched: _p?.matched,
        commandType: _p?.commandType,
        override: _p?.override,
        condition: _p?.condition,
        targetList: _p?.targetList,
        values: _p?.values
      }
    };
  },
  mergeAction(_p?: MergeAction): {
    MergeAction: MergeAction;
  } {
    return {
      MergeAction: {
        matched: _p?.matched,
        commandType: _p?.commandType,
        override: _p?.override,
        qual: _p?.qual,
        targetList: _p?.targetList,
        updateColnos: _p?.updateColnos
      }
    };
  },
  triggerTransition(_p?: TriggerTransition): {
    TriggerTransition: TriggerTransition;
  } {
    return {
      TriggerTransition: {
        name: _p?.name,
        isNew: _p?.isNew,
        isTable: _p?.isTable
      }
    };
  },
  jsonOutput(_p?: JsonOutput): {
    JsonOutput: JsonOutput;
  } {
    return {
      JsonOutput: {
        typeName: _p?.typeName,
        returning: _p?.returning
      }
    };
  },
  jsonKeyValue(_p?: JsonKeyValue): {
    JsonKeyValue: JsonKeyValue;
  } {
    return {
      JsonKeyValue: {
        key: _p?.key,
        value: _p?.value
      }
    };
  },
  jsonObjectConstructor(_p?: JsonObjectConstructor): {
    JsonObjectConstructor: JsonObjectConstructor;
  } {
    return {
      JsonObjectConstructor: {
        exprs: _p?.exprs,
        output: _p?.output,
        absent_on_null: _p?.absent_on_null,
        unique: _p?.unique,
        location: _p?.location
      }
    };
  },
  jsonArrayConstructor(_p?: JsonArrayConstructor): {
    JsonArrayConstructor: JsonArrayConstructor;
  } {
    return {
      JsonArrayConstructor: {
        exprs: _p?.exprs,
        output: _p?.output,
        absent_on_null: _p?.absent_on_null,
        location: _p?.location
      }
    };
  },
  jsonArrayQueryConstructor(_p?: JsonArrayQueryConstructor): {
    JsonArrayQueryConstructor: JsonArrayQueryConstructor;
  } {
    return {
      JsonArrayQueryConstructor: {
        query: _p?.query,
        output: _p?.output,
        format: _p?.format,
        absent_on_null: _p?.absent_on_null,
        location: _p?.location
      }
    };
  },
  jsonAggConstructor(_p?: JsonAggConstructor): {
    JsonAggConstructor: JsonAggConstructor;
  } {
    return {
      JsonAggConstructor: {
        output: _p?.output,
        agg_filter: _p?.agg_filter,
        agg_order: _p?.agg_order,
        over: _p?.over,
        location: _p?.location
      }
    };
  },
  jsonObjectAgg(_p?: JsonObjectAgg): {
    JsonObjectAgg: JsonObjectAgg;
  } {
    return {
      JsonObjectAgg: {
        constructor: _p?.constructor,
        arg: _p?.arg,
        absent_on_null: _p?.absent_on_null,
        unique: _p?.unique
      }
    };
  },
  jsonArrayAgg(_p?: JsonArrayAgg): {
    JsonArrayAgg: JsonArrayAgg;
  } {
    return {
      JsonArrayAgg: {
        constructor: _p?.constructor,
        arg: _p?.arg,
        absent_on_null: _p?.absent_on_null
      }
    };
  },
  rawStmt(_p?: RawStmt): {
    RawStmt: RawStmt;
  } {
    return {
      RawStmt: {
        stmt: _p?.stmt,
        stmt_location: _p?.stmt_location,
        stmt_len: _p?.stmt_len
      }
    };
  },
  insertStmt(_p?: InsertStmt): {
    InsertStmt: InsertStmt;
  } {
    return {
      InsertStmt: {
        relation: _p?.relation,
        cols: _p?.cols,
        selectStmt: _p?.selectStmt,
        onConflictClause: _p?.onConflictClause,
        returningList: _p?.returningList,
        withClause: _p?.withClause,
        override: _p?.override
      }
    };
  },
  deleteStmt(_p?: DeleteStmt): {
    DeleteStmt: DeleteStmt;
  } {
    return {
      DeleteStmt: {
        relation: _p?.relation,
        usingClause: _p?.usingClause,
        whereClause: _p?.whereClause,
        returningList: _p?.returningList,
        withClause: _p?.withClause
      }
    };
  },
  updateStmt(_p?: UpdateStmt): {
    UpdateStmt: UpdateStmt;
  } {
    return {
      UpdateStmt: {
        relation: _p?.relation,
        targetList: _p?.targetList,
        whereClause: _p?.whereClause,
        fromClause: _p?.fromClause,
        returningList: _p?.returningList,
        withClause: _p?.withClause
      }
    };
  },
  mergeStmt(_p?: MergeStmt): {
    MergeStmt: MergeStmt;
  } {
    return {
      MergeStmt: {
        relation: _p?.relation,
        sourceRelation: _p?.sourceRelation,
        joinCondition: _p?.joinCondition,
        mergeWhenClauses: _p?.mergeWhenClauses,
        withClause: _p?.withClause
      }
    };
  },
  selectStmt(_p?: SelectStmt): {
    SelectStmt: SelectStmt;
  } {
    return {
      SelectStmt: {
        distinctClause: _p?.distinctClause,
        intoClause: _p?.intoClause,
        targetList: _p?.targetList,
        fromClause: _p?.fromClause,
        whereClause: _p?.whereClause,
        groupClause: _p?.groupClause,
        groupDistinct: _p?.groupDistinct,
        havingClause: _p?.havingClause,
        windowClause: _p?.windowClause,
        valuesLists: _p?.valuesLists,
        sortClause: _p?.sortClause,
        limitOffset: _p?.limitOffset,
        limitCount: _p?.limitCount,
        limitOption: _p?.limitOption,
        lockingClause: _p?.lockingClause,
        withClause: _p?.withClause,
        op: _p?.op,
        all: _p?.all,
        larg: _p?.larg,
        rarg: _p?.rarg
      }
    };
  },
  setOperationStmt(_p?: SetOperationStmt): {
    SetOperationStmt: SetOperationStmt;
  } {
    return {
      SetOperationStmt: {
        op: _p?.op,
        all: _p?.all,
        larg: _p?.larg,
        rarg: _p?.rarg,
        colTypes: _p?.colTypes,
        colTypmods: _p?.colTypmods,
        colCollations: _p?.colCollations,
        groupClauses: _p?.groupClauses
      }
    };
  },
  returnStmt(_p?: ReturnStmt): {
    ReturnStmt: ReturnStmt;
  } {
    return {
      ReturnStmt: {
        returnval: _p?.returnval
      }
    };
  },
  plAssignStmt(_p?: PLAssignStmt): {
    PLAssignStmt: PLAssignStmt;
  } {
    return {
      PLAssignStmt: {
        name: _p?.name,
        indirection: _p?.indirection,
        nnames: _p?.nnames,
        val: _p?.val,
        location: _p?.location
      }
    };
  },
  createSchemaStmt(_p?: CreateSchemaStmt): {
    CreateSchemaStmt: CreateSchemaStmt;
  } {
    return {
      CreateSchemaStmt: {
        schemaname: _p?.schemaname,
        authrole: _p?.authrole,
        schemaElts: _p?.schemaElts,
        if_not_exists: _p?.if_not_exists
      }
    };
  },
  alterTableStmt(_p?: AlterTableStmt): {
    AlterTableStmt: AlterTableStmt;
  } {
    return {
      AlterTableStmt: {
        relation: _p?.relation,
        cmds: _p?.cmds,
        objtype: _p?.objtype,
        missing_ok: _p?.missing_ok
      }
    };
  },
  replicaIdentityStmt(_p?: ReplicaIdentityStmt): {
    ReplicaIdentityStmt: ReplicaIdentityStmt;
  } {
    return {
      ReplicaIdentityStmt: {
        identity_type: _p?.identity_type,
        name: _p?.name
      }
    };
  },
  alterTableCmd(_p?: AlterTableCmd): {
    AlterTableCmd: AlterTableCmd;
  } {
    return {
      AlterTableCmd: {
        subtype: _p?.subtype,
        name: _p?.name,
        num: _p?.num,
        newowner: _p?.newowner,
        def: _p?.def,
        behavior: _p?.behavior,
        missing_ok: _p?.missing_ok,
        recurse: _p?.recurse
      }
    };
  },
  alterCollationStmt(_p?: AlterCollationStmt): {
    AlterCollationStmt: AlterCollationStmt;
  } {
    return {
      AlterCollationStmt: {
        collname: _p?.collname
      }
    };
  },
  alterDomainStmt(_p?: AlterDomainStmt): {
    AlterDomainStmt: AlterDomainStmt;
  } {
    return {
      AlterDomainStmt: {
        subtype: _p?.subtype,
        typeName: _p?.typeName,
        name: _p?.name,
        def: _p?.def,
        behavior: _p?.behavior,
        missing_ok: _p?.missing_ok
      }
    };
  },
  grantStmt(_p?: GrantStmt): {
    GrantStmt: GrantStmt;
  } {
    return {
      GrantStmt: {
        is_grant: _p?.is_grant,
        targtype: _p?.targtype,
        objtype: _p?.objtype,
        objects: _p?.objects,
        privileges: _p?.privileges,
        grantees: _p?.grantees,
        grant_option: _p?.grant_option,
        grantor: _p?.grantor,
        behavior: _p?.behavior
      }
    };
  },
  objectWithArgs(_p?: ObjectWithArgs): {
    ObjectWithArgs: ObjectWithArgs;
  } {
    return {
      ObjectWithArgs: {
        objname: _p?.objname,
        objargs: _p?.objargs,
        objfuncargs: _p?.objfuncargs,
        args_unspecified: _p?.args_unspecified
      }
    };
  },
  accessPriv(_p?: AccessPriv): {
    AccessPriv: AccessPriv;
  } {
    return {
      AccessPriv: {
        priv_name: _p?.priv_name,
        cols: _p?.cols
      }
    };
  },
  grantRoleStmt(_p?: GrantRoleStmt): {
    GrantRoleStmt: GrantRoleStmt;
  } {
    return {
      GrantRoleStmt: {
        granted_roles: _p?.granted_roles,
        grantee_roles: _p?.grantee_roles,
        is_grant: _p?.is_grant,
        opt: _p?.opt,
        grantor: _p?.grantor,
        behavior: _p?.behavior
      }
    };
  },
  alterDefaultPrivilegesStmt(_p?: AlterDefaultPrivilegesStmt): {
    AlterDefaultPrivilegesStmt: AlterDefaultPrivilegesStmt;
  } {
    return {
      AlterDefaultPrivilegesStmt: {
        options: _p?.options,
        action: _p?.action
      }
    };
  },
  copyStmt(_p?: CopyStmt): {
    CopyStmt: CopyStmt;
  } {
    return {
      CopyStmt: {
        relation: _p?.relation,
        query: _p?.query,
        attlist: _p?.attlist,
        is_from: _p?.is_from,
        is_program: _p?.is_program,
        filename: _p?.filename,
        options: _p?.options,
        whereClause: _p?.whereClause
      }
    };
  },
  variableSetStmt(_p?: VariableSetStmt): {
    VariableSetStmt: VariableSetStmt;
  } {
    return {
      VariableSetStmt: {
        kind: _p?.kind,
        name: _p?.name,
        args: _p?.args,
        is_local: _p?.is_local
      }
    };
  },
  variableShowStmt(_p?: VariableShowStmt): {
    VariableShowStmt: VariableShowStmt;
  } {
    return {
      VariableShowStmt: {
        name: _p?.name
      }
    };
  },
  createStmt(_p?: CreateStmt): {
    CreateStmt: CreateStmt;
  } {
    return {
      CreateStmt: {
        relation: _p?.relation,
        tableElts: _p?.tableElts,
        inhRelations: _p?.inhRelations,
        partbound: _p?.partbound,
        partspec: _p?.partspec,
        ofTypename: _p?.ofTypename,
        constraints: _p?.constraints,
        options: _p?.options,
        oncommit: _p?.oncommit,
        tablespacename: _p?.tablespacename,
        accessMethod: _p?.accessMethod,
        if_not_exists: _p?.if_not_exists
      }
    };
  },
  constraint(_p?: Constraint): {
    Constraint: Constraint;
  } {
    return {
      Constraint: {
        contype: _p?.contype,
        conname: _p?.conname,
        deferrable: _p?.deferrable,
        initdeferred: _p?.initdeferred,
        location: _p?.location,
        is_no_inherit: _p?.is_no_inherit,
        raw_expr: _p?.raw_expr,
        cooked_expr: _p?.cooked_expr,
        generated_when: _p?.generated_when,
        nulls_not_distinct: _p?.nulls_not_distinct,
        keys: _p?.keys,
        including: _p?.including,
        exclusions: _p?.exclusions,
        options: _p?.options,
        indexname: _p?.indexname,
        indexspace: _p?.indexspace,
        reset_default_tblspc: _p?.reset_default_tblspc,
        access_method: _p?.access_method,
        where_clause: _p?.where_clause,
        pktable: _p?.pktable,
        fk_attrs: _p?.fk_attrs,
        pk_attrs: _p?.pk_attrs,
        fk_matchtype: _p?.fk_matchtype,
        fk_upd_action: _p?.fk_upd_action,
        fk_del_action: _p?.fk_del_action,
        fk_del_set_cols: _p?.fk_del_set_cols,
        old_conpfeqop: _p?.old_conpfeqop,
        old_pktable_oid: _p?.old_pktable_oid,
        skip_validation: _p?.skip_validation,
        initially_valid: _p?.initially_valid
      }
    };
  },
  createTableSpaceStmt(_p?: CreateTableSpaceStmt): {
    CreateTableSpaceStmt: CreateTableSpaceStmt;
  } {
    return {
      CreateTableSpaceStmt: {
        tablespacename: _p?.tablespacename,
        owner: _p?.owner,
        location: _p?.location,
        options: _p?.options
      }
    };
  },
  dropTableSpaceStmt(_p?: DropTableSpaceStmt): {
    DropTableSpaceStmt: DropTableSpaceStmt;
  } {
    return {
      DropTableSpaceStmt: {
        tablespacename: _p?.tablespacename,
        missing_ok: _p?.missing_ok
      }
    };
  },
  alterTableSpaceOptionsStmt(_p?: AlterTableSpaceOptionsStmt): {
    AlterTableSpaceOptionsStmt: AlterTableSpaceOptionsStmt;
  } {
    return {
      AlterTableSpaceOptionsStmt: {
        tablespacename: _p?.tablespacename,
        options: _p?.options,
        isReset: _p?.isReset
      }
    };
  },
  alterTableMoveAllStmt(_p?: AlterTableMoveAllStmt): {
    AlterTableMoveAllStmt: AlterTableMoveAllStmt;
  } {
    return {
      AlterTableMoveAllStmt: {
        orig_tablespacename: _p?.orig_tablespacename,
        objtype: _p?.objtype,
        roles: _p?.roles,
        new_tablespacename: _p?.new_tablespacename,
        nowait: _p?.nowait
      }
    };
  },
  createExtensionStmt(_p?: CreateExtensionStmt): {
    CreateExtensionStmt: CreateExtensionStmt;
  } {
    return {
      CreateExtensionStmt: {
        extname: _p?.extname,
        if_not_exists: _p?.if_not_exists,
        options: _p?.options
      }
    };
  },
  alterExtensionStmt(_p?: AlterExtensionStmt): {
    AlterExtensionStmt: AlterExtensionStmt;
  } {
    return {
      AlterExtensionStmt: {
        extname: _p?.extname,
        options: _p?.options
      }
    };
  },
  alterExtensionContentsStmt(_p?: AlterExtensionContentsStmt): {
    AlterExtensionContentsStmt: AlterExtensionContentsStmt;
  } {
    return {
      AlterExtensionContentsStmt: {
        extname: _p?.extname,
        action: _p?.action,
        objtype: _p?.objtype,
        object: _p?.object
      }
    };
  },
  createFdwStmt(_p?: CreateFdwStmt): {
    CreateFdwStmt: CreateFdwStmt;
  } {
    return {
      CreateFdwStmt: {
        fdwname: _p?.fdwname,
        func_options: _p?.func_options,
        options: _p?.options
      }
    };
  },
  alterFdwStmt(_p?: AlterFdwStmt): {
    AlterFdwStmt: AlterFdwStmt;
  } {
    return {
      AlterFdwStmt: {
        fdwname: _p?.fdwname,
        func_options: _p?.func_options,
        options: _p?.options
      }
    };
  },
  createForeignServerStmt(_p?: CreateForeignServerStmt): {
    CreateForeignServerStmt: CreateForeignServerStmt;
  } {
    return {
      CreateForeignServerStmt: {
        servername: _p?.servername,
        servertype: _p?.servertype,
        version: _p?.version,
        fdwname: _p?.fdwname,
        if_not_exists: _p?.if_not_exists,
        options: _p?.options
      }
    };
  },
  alterForeignServerStmt(_p?: AlterForeignServerStmt): {
    AlterForeignServerStmt: AlterForeignServerStmt;
  } {
    return {
      AlterForeignServerStmt: {
        servername: _p?.servername,
        version: _p?.version,
        options: _p?.options,
        has_version: _p?.has_version
      }
    };
  },
  createForeignTableStmt(_p?: CreateForeignTableStmt): {
    CreateForeignTableStmt: CreateForeignTableStmt;
  } {
    return {
      CreateForeignTableStmt: {
        base: _p?.base,
        servername: _p?.servername,
        options: _p?.options
      }
    };
  },
  createUserMappingStmt(_p?: CreateUserMappingStmt): {
    CreateUserMappingStmt: CreateUserMappingStmt;
  } {
    return {
      CreateUserMappingStmt: {
        user: _p?.user,
        servername: _p?.servername,
        if_not_exists: _p?.if_not_exists,
        options: _p?.options
      }
    };
  },
  alterUserMappingStmt(_p?: AlterUserMappingStmt): {
    AlterUserMappingStmt: AlterUserMappingStmt;
  } {
    return {
      AlterUserMappingStmt: {
        user: _p?.user,
        servername: _p?.servername,
        options: _p?.options
      }
    };
  },
  dropUserMappingStmt(_p?: DropUserMappingStmt): {
    DropUserMappingStmt: DropUserMappingStmt;
  } {
    return {
      DropUserMappingStmt: {
        user: _p?.user,
        servername: _p?.servername,
        missing_ok: _p?.missing_ok
      }
    };
  },
  importForeignSchemaStmt(_p?: ImportForeignSchemaStmt): {
    ImportForeignSchemaStmt: ImportForeignSchemaStmt;
  } {
    return {
      ImportForeignSchemaStmt: {
        server_name: _p?.server_name,
        remote_schema: _p?.remote_schema,
        local_schema: _p?.local_schema,
        list_type: _p?.list_type,
        table_list: _p?.table_list,
        options: _p?.options
      }
    };
  },
  createPolicyStmt(_p?: CreatePolicyStmt): {
    CreatePolicyStmt: CreatePolicyStmt;
  } {
    return {
      CreatePolicyStmt: {
        policy_name: _p?.policy_name,
        table: _p?.table,
        cmd_name: _p?.cmd_name,
        permissive: _p?.permissive,
        roles: _p?.roles,
        qual: _p?.qual,
        with_check: _p?.with_check
      }
    };
  },
  alterPolicyStmt(_p?: AlterPolicyStmt): {
    AlterPolicyStmt: AlterPolicyStmt;
  } {
    return {
      AlterPolicyStmt: {
        policy_name: _p?.policy_name,
        table: _p?.table,
        roles: _p?.roles,
        qual: _p?.qual,
        with_check: _p?.with_check
      }
    };
  },
  createAmStmt(_p?: CreateAmStmt): {
    CreateAmStmt: CreateAmStmt;
  } {
    return {
      CreateAmStmt: {
        amname: _p?.amname,
        handler_name: _p?.handler_name,
        amtype: _p?.amtype
      }
    };
  },
  createTrigStmt(_p?: CreateTrigStmt): {
    CreateTrigStmt: CreateTrigStmt;
  } {
    return {
      CreateTrigStmt: {
        replace: _p?.replace,
        isconstraint: _p?.isconstraint,
        trigname: _p?.trigname,
        relation: _p?.relation,
        funcname: _p?.funcname,
        args: _p?.args,
        row: _p?.row,
        timing: _p?.timing,
        events: _p?.events,
        columns: _p?.columns,
        whenClause: _p?.whenClause,
        transitionRels: _p?.transitionRels,
        deferrable: _p?.deferrable,
        initdeferred: _p?.initdeferred,
        constrrel: _p?.constrrel
      }
    };
  },
  createEventTrigStmt(_p?: CreateEventTrigStmt): {
    CreateEventTrigStmt: CreateEventTrigStmt;
  } {
    return {
      CreateEventTrigStmt: {
        trigname: _p?.trigname,
        eventname: _p?.eventname,
        whenclause: _p?.whenclause,
        funcname: _p?.funcname
      }
    };
  },
  alterEventTrigStmt(_p?: AlterEventTrigStmt): {
    AlterEventTrigStmt: AlterEventTrigStmt;
  } {
    return {
      AlterEventTrigStmt: {
        trigname: _p?.trigname,
        tgenabled: _p?.tgenabled
      }
    };
  },
  createpLangStmt(_p?: CreatePLangStmt): {
    CreatePLangStmt: CreatePLangStmt;
  } {
    return {
      CreatePLangStmt: {
        replace: _p?.replace,
        plname: _p?.plname,
        plhandler: _p?.plhandler,
        plinline: _p?.plinline,
        plvalidator: _p?.plvalidator,
        pltrusted: _p?.pltrusted
      }
    };
  },
  createRoleStmt(_p?: CreateRoleStmt): {
    CreateRoleStmt: CreateRoleStmt;
  } {
    return {
      CreateRoleStmt: {
        stmt_type: _p?.stmt_type,
        role: _p?.role,
        options: _p?.options
      }
    };
  },
  alterRoleStmt(_p?: AlterRoleStmt): {
    AlterRoleStmt: AlterRoleStmt;
  } {
    return {
      AlterRoleStmt: {
        role: _p?.role,
        options: _p?.options,
        action: _p?.action
      }
    };
  },
  alterRoleSetStmt(_p?: AlterRoleSetStmt): {
    AlterRoleSetStmt: AlterRoleSetStmt;
  } {
    return {
      AlterRoleSetStmt: {
        role: _p?.role,
        database: _p?.database,
        setstmt: _p?.setstmt
      }
    };
  },
  dropRoleStmt(_p?: DropRoleStmt): {
    DropRoleStmt: DropRoleStmt;
  } {
    return {
      DropRoleStmt: {
        roles: _p?.roles,
        missing_ok: _p?.missing_ok
      }
    };
  },
  createSeqStmt(_p?: CreateSeqStmt): {
    CreateSeqStmt: CreateSeqStmt;
  } {
    return {
      CreateSeqStmt: {
        sequence: _p?.sequence,
        options: _p?.options,
        ownerId: _p?.ownerId,
        for_identity: _p?.for_identity,
        if_not_exists: _p?.if_not_exists
      }
    };
  },
  alterSeqStmt(_p?: AlterSeqStmt): {
    AlterSeqStmt: AlterSeqStmt;
  } {
    return {
      AlterSeqStmt: {
        sequence: _p?.sequence,
        options: _p?.options,
        for_identity: _p?.for_identity,
        missing_ok: _p?.missing_ok
      }
    };
  },
  defineStmt(_p?: DefineStmt): {
    DefineStmt: DefineStmt;
  } {
    return {
      DefineStmt: {
        kind: _p?.kind,
        oldstyle: _p?.oldstyle,
        defnames: _p?.defnames,
        args: _p?.args,
        definition: _p?.definition,
        if_not_exists: _p?.if_not_exists,
        replace: _p?.replace
      }
    };
  },
  createDomainStmt(_p?: CreateDomainStmt): {
    CreateDomainStmt: CreateDomainStmt;
  } {
    return {
      CreateDomainStmt: {
        domainname: _p?.domainname,
        typeName: _p?.typeName,
        collClause: _p?.collClause,
        constraints: _p?.constraints
      }
    };
  },
  createOpClassStmt(_p?: CreateOpClassStmt): {
    CreateOpClassStmt: CreateOpClassStmt;
  } {
    return {
      CreateOpClassStmt: {
        opclassname: _p?.opclassname,
        opfamilyname: _p?.opfamilyname,
        amname: _p?.amname,
        datatype: _p?.datatype,
        items: _p?.items,
        isDefault: _p?.isDefault
      }
    };
  },
  createOpClassItem(_p?: CreateOpClassItem): {
    CreateOpClassItem: CreateOpClassItem;
  } {
    return {
      CreateOpClassItem: {
        itemtype: _p?.itemtype,
        name: _p?.name,
        number: _p?.number,
        order_family: _p?.order_family,
        class_args: _p?.class_args,
        storedtype: _p?.storedtype
      }
    };
  },
  createOpFamilyStmt(_p?: CreateOpFamilyStmt): {
    CreateOpFamilyStmt: CreateOpFamilyStmt;
  } {
    return {
      CreateOpFamilyStmt: {
        opfamilyname: _p?.opfamilyname,
        amname: _p?.amname
      }
    };
  },
  alterOpFamilyStmt(_p?: AlterOpFamilyStmt): {
    AlterOpFamilyStmt: AlterOpFamilyStmt;
  } {
    return {
      AlterOpFamilyStmt: {
        opfamilyname: _p?.opfamilyname,
        amname: _p?.amname,
        isDrop: _p?.isDrop,
        items: _p?.items
      }
    };
  },
  dropStmt(_p?: DropStmt): {
    DropStmt: DropStmt;
  } {
    return {
      DropStmt: {
        objects: _p?.objects,
        removeType: _p?.removeType,
        behavior: _p?.behavior,
        missing_ok: _p?.missing_ok,
        concurrent: _p?.concurrent
      }
    };
  },
  truncateStmt(_p?: TruncateStmt): {
    TruncateStmt: TruncateStmt;
  } {
    return {
      TruncateStmt: {
        relations: _p?.relations,
        restart_seqs: _p?.restart_seqs,
        behavior: _p?.behavior
      }
    };
  },
  commentStmt(_p?: CommentStmt): {
    CommentStmt: CommentStmt;
  } {
    return {
      CommentStmt: {
        objtype: _p?.objtype,
        object: _p?.object,
        comment: _p?.comment
      }
    };
  },
  secLabelStmt(_p?: SecLabelStmt): {
    SecLabelStmt: SecLabelStmt;
  } {
    return {
      SecLabelStmt: {
        objtype: _p?.objtype,
        object: _p?.object,
        provider: _p?.provider,
        label: _p?.label
      }
    };
  },
  declareCursorStmt(_p?: DeclareCursorStmt): {
    DeclareCursorStmt: DeclareCursorStmt;
  } {
    return {
      DeclareCursorStmt: {
        portalname: _p?.portalname,
        options: _p?.options,
        query: _p?.query
      }
    };
  },
  closePortalStmt(_p?: ClosePortalStmt): {
    ClosePortalStmt: ClosePortalStmt;
  } {
    return {
      ClosePortalStmt: {
        portalname: _p?.portalname
      }
    };
  },
  fetchStmt(_p?: FetchStmt): {
    FetchStmt: FetchStmt;
  } {
    return {
      FetchStmt: {
        direction: _p?.direction,
        howMany: _p?.howMany,
        portalname: _p?.portalname,
        ismove: _p?.ismove
      }
    };
  },
  indexStmt(_p?: IndexStmt): {
    IndexStmt: IndexStmt;
  } {
    return {
      IndexStmt: {
        idxname: _p?.idxname,
        relation: _p?.relation,
        accessMethod: _p?.accessMethod,
        tableSpace: _p?.tableSpace,
        indexParams: _p?.indexParams,
        indexIncludingParams: _p?.indexIncludingParams,
        options: _p?.options,
        whereClause: _p?.whereClause,
        excludeOpNames: _p?.excludeOpNames,
        idxcomment: _p?.idxcomment,
        indexOid: _p?.indexOid,
        oldNumber: _p?.oldNumber,
        oldCreateSubid: _p?.oldCreateSubid,
        oldFirstRelfilelocatorSubid: _p?.oldFirstRelfilelocatorSubid,
        unique: _p?.unique,
        nulls_not_distinct: _p?.nulls_not_distinct,
        primary: _p?.primary,
        isconstraint: _p?.isconstraint,
        deferrable: _p?.deferrable,
        initdeferred: _p?.initdeferred,
        transformed: _p?.transformed,
        concurrent: _p?.concurrent,
        if_not_exists: _p?.if_not_exists,
        reset_default_tblspc: _p?.reset_default_tblspc
      }
    };
  },
  createStatsStmt(_p?: CreateStatsStmt): {
    CreateStatsStmt: CreateStatsStmt;
  } {
    return {
      CreateStatsStmt: {
        defnames: _p?.defnames,
        stat_types: _p?.stat_types,
        exprs: _p?.exprs,
        relations: _p?.relations,
        stxcomment: _p?.stxcomment,
        transformed: _p?.transformed,
        if_not_exists: _p?.if_not_exists
      }
    };
  },
  statsElem(_p?: StatsElem): {
    StatsElem: StatsElem;
  } {
    return {
      StatsElem: {
        name: _p?.name,
        expr: _p?.expr
      }
    };
  },
  alterStatsStmt(_p?: AlterStatsStmt): {
    AlterStatsStmt: AlterStatsStmt;
  } {
    return {
      AlterStatsStmt: {
        defnames: _p?.defnames,
        stxstattarget: _p?.stxstattarget,
        missing_ok: _p?.missing_ok
      }
    };
  },
  createFunctionStmt(_p?: CreateFunctionStmt): {
    CreateFunctionStmt: CreateFunctionStmt;
  } {
    return {
      CreateFunctionStmt: {
        is_procedure: _p?.is_procedure,
        replace: _p?.replace,
        funcname: _p?.funcname,
        parameters: _p?.parameters,
        returnType: _p?.returnType,
        options: _p?.options,
        sql_body: _p?.sql_body
      }
    };
  },
  functionParameter(_p?: FunctionParameter): {
    FunctionParameter: FunctionParameter;
  } {
    return {
      FunctionParameter: {
        name: _p?.name,
        argType: _p?.argType,
        mode: _p?.mode,
        defexpr: _p?.defexpr
      }
    };
  },
  alterFunctionStmt(_p?: AlterFunctionStmt): {
    AlterFunctionStmt: AlterFunctionStmt;
  } {
    return {
      AlterFunctionStmt: {
        objtype: _p?.objtype,
        func: _p?.func,
        actions: _p?.actions
      }
    };
  },
  doStmt(_p?: DoStmt): {
    DoStmt: DoStmt;
  } {
    return {
      DoStmt: {
        args: _p?.args
      }
    };
  },
  inlineCodeBlock(_p?: InlineCodeBlock): {
    InlineCodeBlock: InlineCodeBlock;
  } {
    return {
      InlineCodeBlock: {
        source_text: _p?.source_text,
        langOid: _p?.langOid,
        langIsTrusted: _p?.langIsTrusted,
        atomic: _p?.atomic
      }
    };
  },
  callStmt(_p?: CallStmt): {
    CallStmt: CallStmt;
  } {
    return {
      CallStmt: {
        funccall: _p?.funccall,
        funcexpr: _p?.funcexpr,
        outargs: _p?.outargs
      }
    };
  },
  callContext(_p?: CallContext): {
    CallContext: CallContext;
  } {
    return {
      CallContext: {
        atomic: _p?.atomic
      }
    };
  },
  renameStmt(_p?: RenameStmt): {
    RenameStmt: RenameStmt;
  } {
    return {
      RenameStmt: {
        renameType: _p?.renameType,
        relationType: _p?.relationType,
        relation: _p?.relation,
        object: _p?.object,
        subname: _p?.subname,
        newname: _p?.newname,
        behavior: _p?.behavior,
        missing_ok: _p?.missing_ok
      }
    };
  },
  alterObjectDependsStmt(_p?: AlterObjectDependsStmt): {
    AlterObjectDependsStmt: AlterObjectDependsStmt;
  } {
    return {
      AlterObjectDependsStmt: {
        objectType: _p?.objectType,
        relation: _p?.relation,
        object: _p?.object,
        extname: _p?.extname,
        remove: _p?.remove
      }
    };
  },
  alterObjectSchemaStmt(_p?: AlterObjectSchemaStmt): {
    AlterObjectSchemaStmt: AlterObjectSchemaStmt;
  } {
    return {
      AlterObjectSchemaStmt: {
        objectType: _p?.objectType,
        relation: _p?.relation,
        object: _p?.object,
        newschema: _p?.newschema,
        missing_ok: _p?.missing_ok
      }
    };
  },
  alterOwnerStmt(_p?: AlterOwnerStmt): {
    AlterOwnerStmt: AlterOwnerStmt;
  } {
    return {
      AlterOwnerStmt: {
        objectType: _p?.objectType,
        relation: _p?.relation,
        object: _p?.object,
        newowner: _p?.newowner
      }
    };
  },
  alterOperatorStmt(_p?: AlterOperatorStmt): {
    AlterOperatorStmt: AlterOperatorStmt;
  } {
    return {
      AlterOperatorStmt: {
        opername: _p?.opername,
        options: _p?.options
      }
    };
  },
  alterTypeStmt(_p?: AlterTypeStmt): {
    AlterTypeStmt: AlterTypeStmt;
  } {
    return {
      AlterTypeStmt: {
        typeName: _p?.typeName,
        options: _p?.options
      }
    };
  },
  ruleStmt(_p?: RuleStmt): {
    RuleStmt: RuleStmt;
  } {
    return {
      RuleStmt: {
        relation: _p?.relation,
        rulename: _p?.rulename,
        whereClause: _p?.whereClause,
        event: _p?.event,
        instead: _p?.instead,
        actions: _p?.actions,
        replace: _p?.replace
      }
    };
  },
  notifyStmt(_p?: NotifyStmt): {
    NotifyStmt: NotifyStmt;
  } {
    return {
      NotifyStmt: {
        conditionname: _p?.conditionname,
        payload: _p?.payload
      }
    };
  },
  listenStmt(_p?: ListenStmt): {
    ListenStmt: ListenStmt;
  } {
    return {
      ListenStmt: {
        conditionname: _p?.conditionname
      }
    };
  },
  unlistenStmt(_p?: UnlistenStmt): {
    UnlistenStmt: UnlistenStmt;
  } {
    return {
      UnlistenStmt: {
        conditionname: _p?.conditionname
      }
    };
  },
  transactionStmt(_p?: TransactionStmt): {
    TransactionStmt: TransactionStmt;
  } {
    return {
      TransactionStmt: {
        kind: _p?.kind,
        options: _p?.options,
        savepoint_name: _p?.savepoint_name,
        gid: _p?.gid,
        chain: _p?.chain
      }
    };
  },
  compositeTypeStmt(_p?: CompositeTypeStmt): {
    CompositeTypeStmt: CompositeTypeStmt;
  } {
    return {
      CompositeTypeStmt: {
        typevar: _p?.typevar,
        coldeflist: _p?.coldeflist
      }
    };
  },
  createEnumStmt(_p?: CreateEnumStmt): {
    CreateEnumStmt: CreateEnumStmt;
  } {
    return {
      CreateEnumStmt: {
        typeName: _p?.typeName,
        vals: _p?.vals
      }
    };
  },
  createRangeStmt(_p?: CreateRangeStmt): {
    CreateRangeStmt: CreateRangeStmt;
  } {
    return {
      CreateRangeStmt: {
        typeName: _p?.typeName,
        params: _p?.params
      }
    };
  },
  alterEnumStmt(_p?: AlterEnumStmt): {
    AlterEnumStmt: AlterEnumStmt;
  } {
    return {
      AlterEnumStmt: {
        typeName: _p?.typeName,
        oldVal: _p?.oldVal,
        newVal: _p?.newVal,
        newValNeighbor: _p?.newValNeighbor,
        newValIsAfter: _p?.newValIsAfter,
        skipIfNewValExists: _p?.skipIfNewValExists
      }
    };
  },
  viewStmt(_p?: ViewStmt): {
    ViewStmt: ViewStmt;
  } {
    return {
      ViewStmt: {
        view: _p?.view,
        aliases: _p?.aliases,
        query: _p?.query,
        replace: _p?.replace,
        options: _p?.options,
        withCheckOption: _p?.withCheckOption
      }
    };
  },
  loadStmt(_p?: LoadStmt): {
    LoadStmt: LoadStmt;
  } {
    return {
      LoadStmt: {
        filename: _p?.filename
      }
    };
  },
  createdbStmt(_p?: CreatedbStmt): {
    CreatedbStmt: CreatedbStmt;
  } {
    return {
      CreatedbStmt: {
        dbname: _p?.dbname,
        options: _p?.options
      }
    };
  },
  alterDatabaseStmt(_p?: AlterDatabaseStmt): {
    AlterDatabaseStmt: AlterDatabaseStmt;
  } {
    return {
      AlterDatabaseStmt: {
        dbname: _p?.dbname,
        options: _p?.options
      }
    };
  },
  alterDatabaseRefreshCollStmt(_p?: AlterDatabaseRefreshCollStmt): {
    AlterDatabaseRefreshCollStmt: AlterDatabaseRefreshCollStmt;
  } {
    return {
      AlterDatabaseRefreshCollStmt: {
        dbname: _p?.dbname
      }
    };
  },
  alterDatabaseSetStmt(_p?: AlterDatabaseSetStmt): {
    AlterDatabaseSetStmt: AlterDatabaseSetStmt;
  } {
    return {
      AlterDatabaseSetStmt: {
        dbname: _p?.dbname,
        setstmt: _p?.setstmt
      }
    };
  },
  dropdbStmt(_p?: DropdbStmt): {
    DropdbStmt: DropdbStmt;
  } {
    return {
      DropdbStmt: {
        dbname: _p?.dbname,
        missing_ok: _p?.missing_ok,
        options: _p?.options
      }
    };
  },
  alterSystemStmt(_p?: AlterSystemStmt): {
    AlterSystemStmt: AlterSystemStmt;
  } {
    return {
      AlterSystemStmt: {
        setstmt: _p?.setstmt
      }
    };
  },
  clusterStmt(_p?: ClusterStmt): {
    ClusterStmt: ClusterStmt;
  } {
    return {
      ClusterStmt: {
        relation: _p?.relation,
        indexname: _p?.indexname,
        params: _p?.params
      }
    };
  },
  vacuumStmt(_p?: VacuumStmt): {
    VacuumStmt: VacuumStmt;
  } {
    return {
      VacuumStmt: {
        options: _p?.options,
        rels: _p?.rels,
        is_vacuumcmd: _p?.is_vacuumcmd
      }
    };
  },
  vacuumRelation(_p?: VacuumRelation): {
    VacuumRelation: VacuumRelation;
  } {
    return {
      VacuumRelation: {
        relation: _p?.relation,
        oid: _p?.oid,
        va_cols: _p?.va_cols
      }
    };
  },
  explainStmt(_p?: ExplainStmt): {
    ExplainStmt: ExplainStmt;
  } {
    return {
      ExplainStmt: {
        query: _p?.query,
        options: _p?.options
      }
    };
  },
  createTableAsStmt(_p?: CreateTableAsStmt): {
    CreateTableAsStmt: CreateTableAsStmt;
  } {
    return {
      CreateTableAsStmt: {
        query: _p?.query,
        into: _p?.into,
        objtype: _p?.objtype,
        is_select_into: _p?.is_select_into,
        if_not_exists: _p?.if_not_exists
      }
    };
  },
  refreshMatViewStmt(_p?: RefreshMatViewStmt): {
    RefreshMatViewStmt: RefreshMatViewStmt;
  } {
    return {
      RefreshMatViewStmt: {
        concurrent: _p?.concurrent,
        skipData: _p?.skipData,
        relation: _p?.relation
      }
    };
  },
  checkPointStmt(_p?: CheckPointStmt): {
    CheckPointStmt: CheckPointStmt;
  } {
    return {
      CheckPointStmt: {}
    };
  },
  discardStmt(_p?: DiscardStmt): {
    DiscardStmt: DiscardStmt;
  } {
    return {
      DiscardStmt: {
        target: _p?.target
      }
    };
  },
  lockStmt(_p?: LockStmt): {
    LockStmt: LockStmt;
  } {
    return {
      LockStmt: {
        relations: _p?.relations,
        mode: _p?.mode,
        nowait: _p?.nowait
      }
    };
  },
  constraintsSetStmt(_p?: ConstraintsSetStmt): {
    ConstraintsSetStmt: ConstraintsSetStmt;
  } {
    return {
      ConstraintsSetStmt: {
        constraints: _p?.constraints,
        deferred: _p?.deferred
      }
    };
  },
  reindexStmt(_p?: ReindexStmt): {
    ReindexStmt: ReindexStmt;
  } {
    return {
      ReindexStmt: {
        kind: _p?.kind,
        relation: _p?.relation,
        name: _p?.name,
        params: _p?.params
      }
    };
  },
  createConversionStmt(_p?: CreateConversionStmt): {
    CreateConversionStmt: CreateConversionStmt;
  } {
    return {
      CreateConversionStmt: {
        conversion_name: _p?.conversion_name,
        for_encoding_name: _p?.for_encoding_name,
        to_encoding_name: _p?.to_encoding_name,
        func_name: _p?.func_name,
        def: _p?.def
      }
    };
  },
  createCastStmt(_p?: CreateCastStmt): {
    CreateCastStmt: CreateCastStmt;
  } {
    return {
      CreateCastStmt: {
        sourcetype: _p?.sourcetype,
        targettype: _p?.targettype,
        func: _p?.func,
        context: _p?.context,
        inout: _p?.inout
      }
    };
  },
  createTransformStmt(_p?: CreateTransformStmt): {
    CreateTransformStmt: CreateTransformStmt;
  } {
    return {
      CreateTransformStmt: {
        replace: _p?.replace,
        type_name: _p?.type_name,
        lang: _p?.lang,
        fromsql: _p?.fromsql,
        tosql: _p?.tosql
      }
    };
  },
  prepareStmt(_p?: PrepareStmt): {
    PrepareStmt: PrepareStmt;
  } {
    return {
      PrepareStmt: {
        name: _p?.name,
        argtypes: _p?.argtypes,
        query: _p?.query
      }
    };
  },
  executeStmt(_p?: ExecuteStmt): {
    ExecuteStmt: ExecuteStmt;
  } {
    return {
      ExecuteStmt: {
        name: _p?.name,
        params: _p?.params
      }
    };
  },
  deallocateStmt(_p?: DeallocateStmt): {
    DeallocateStmt: DeallocateStmt;
  } {
    return {
      DeallocateStmt: {
        name: _p?.name
      }
    };
  },
  dropOwnedStmt(_p?: DropOwnedStmt): {
    DropOwnedStmt: DropOwnedStmt;
  } {
    return {
      DropOwnedStmt: {
        roles: _p?.roles,
        behavior: _p?.behavior
      }
    };
  },
  reassignOwnedStmt(_p?: ReassignOwnedStmt): {
    ReassignOwnedStmt: ReassignOwnedStmt;
  } {
    return {
      ReassignOwnedStmt: {
        roles: _p?.roles,
        newrole: _p?.newrole
      }
    };
  },
  altertsDictionaryStmt(_p?: AlterTSDictionaryStmt): {
    AlterTSDictionaryStmt: AlterTSDictionaryStmt;
  } {
    return {
      AlterTSDictionaryStmt: {
        dictname: _p?.dictname,
        options: _p?.options
      }
    };
  },
  altertsConfigurationStmt(_p?: AlterTSConfigurationStmt): {
    AlterTSConfigurationStmt: AlterTSConfigurationStmt;
  } {
    return {
      AlterTSConfigurationStmt: {
        kind: _p?.kind,
        cfgname: _p?.cfgname,
        tokentype: _p?.tokentype,
        dicts: _p?.dicts,
        override: _p?.override,
        replace: _p?.replace,
        missing_ok: _p?.missing_ok
      }
    };
  },
  publicationTable(_p?: PublicationTable): {
    PublicationTable: PublicationTable;
  } {
    return {
      PublicationTable: {
        relation: _p?.relation,
        whereClause: _p?.whereClause,
        columns: _p?.columns
      }
    };
  },
  publicationObjSpec(_p?: PublicationObjSpec): {
    PublicationObjSpec: PublicationObjSpec;
  } {
    return {
      PublicationObjSpec: {
        pubobjtype: _p?.pubobjtype,
        name: _p?.name,
        pubtable: _p?.pubtable,
        location: _p?.location
      }
    };
  },
  createPublicationStmt(_p?: CreatePublicationStmt): {
    CreatePublicationStmt: CreatePublicationStmt;
  } {
    return {
      CreatePublicationStmt: {
        pubname: _p?.pubname,
        options: _p?.options,
        pubobjects: _p?.pubobjects,
        for_all_tables: _p?.for_all_tables
      }
    };
  },
  alterPublicationStmt(_p?: AlterPublicationStmt): {
    AlterPublicationStmt: AlterPublicationStmt;
  } {
    return {
      AlterPublicationStmt: {
        pubname: _p?.pubname,
        options: _p?.options,
        pubobjects: _p?.pubobjects,
        for_all_tables: _p?.for_all_tables,
        action: _p?.action
      }
    };
  },
  createSubscriptionStmt(_p?: CreateSubscriptionStmt): {
    CreateSubscriptionStmt: CreateSubscriptionStmt;
  } {
    return {
      CreateSubscriptionStmt: {
        subname: _p?.subname,
        conninfo: _p?.conninfo,
        publication: _p?.publication,
        options: _p?.options
      }
    };
  },
  alterSubscriptionStmt(_p?: AlterSubscriptionStmt): {
    AlterSubscriptionStmt: AlterSubscriptionStmt;
  } {
    return {
      AlterSubscriptionStmt: {
        kind: _p?.kind,
        subname: _p?.subname,
        conninfo: _p?.conninfo,
        publication: _p?.publication,
        options: _p?.options
      }
    };
  },
  dropSubscriptionStmt(_p?: DropSubscriptionStmt): {
    DropSubscriptionStmt: DropSubscriptionStmt;
  } {
    return {
      DropSubscriptionStmt: {
        subname: _p?.subname,
        missing_ok: _p?.missing_ok,
        behavior: _p?.behavior
      }
    };
  },
  scanToken(_p?: ScanToken): {
    ScanToken: ScanToken;
  } {
    return {
      ScanToken: {
        start: _p?.start,
        end: _p?.end,
        token: _p?.token,
        keyword_kind: _p?.keyword_kind
      }
    };
  }
};