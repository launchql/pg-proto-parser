import { Type, Enum } from '@launchql/protobufjs';
import * as t from '@babel/types';
import { PgProtoParserOptions } from './types';
export declare const getTSType: (type: string) => t.TSStringKeyword | t.TSNumberKeyword | t.TSBigIntKeyword | t.TSTypeReference | t.TSBooleanKeyword;
export declare const isPrimitiveType: (type: string) => boolean;
export declare const resolveTypeName: (type: string) => t.TSStringKeyword | t.TSNumberKeyword | t.TSBigIntKeyword | t.TSTypeReference | t.TSBooleanKeyword;
export declare const transformTypeToAST: (type: Type) => t.ExportNamedDeclaration;
export declare const generateTSInterfaces: (types: Type[]) => string;
export declare const generateTSEnums: (enums: Enum[], options: PgProtoParserOptions) => string;
export declare const generateTSEnumFunction: (enums: Enum[]) => string;
export declare const transformEnumToAST: (enumData: any, options: PgProtoParserOptions) => t.ExportNamedDeclaration;
export declare const buildEnumValueFunctionAST: (enumData: Enum[]) => t.ExportNamedDeclaration[];
