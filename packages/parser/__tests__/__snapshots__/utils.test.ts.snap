// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`utils astHelpers enabled 1`] = `
[
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
import _o from "nested-obj";
import { ParseResult, ScanResult, Node, Integer, Float, Boolean, String, BitString, List, OidList, IntList, A_Const, Alias, RangeVar, TableFunc, IntoClause, Var, Param, Aggref, GroupingFunc, WindowFunc, SubscriptingRef, FuncExpr, NamedArgExpr, OpExpr, DistinctExpr, NullIfExpr, ScalarArrayOpExpr, BoolExpr, SubLink, SubPlan, AlternativeSubPlan, FieldSelect, FieldStore, RelabelType, CoerceViaIO, ArrayCoerceExpr, ConvertRowtypeExpr, CollateExpr, CaseExpr, CaseWhen, CaseTestExpr, ArrayExpr, RowExpr, RowCompareExpr, CoalesceExpr, MinMaxExpr, SQLValueFunction, XmlExpr, JsonFormat, JsonReturning, JsonValueExpr, JsonConstructorExpr, JsonIsPredicate, NullTest, BooleanTest, CoerceToDomain, CoerceToDomainValue, SetToDefault, CurrentOfExpr, NextValueExpr, InferenceElem, TargetEntry, RangeTblRef, JoinExpr, FromExpr, OnConflictExpr, Query, TypeName, ColumnRef, ParamRef, A_Expr, TypeCast, CollateClause, RoleSpec, FuncCall, A_Star, A_Indices, A_Indirection, A_ArrayExpr, ResTarget, MultiAssignRef, SortBy, WindowDef, RangeSubselect, RangeFunction, RangeTableFunc, RangeTableFuncCol, RangeTableSample, ColumnDef, TableLikeClause, IndexElem, DefElem, LockingClause, XmlSerialize, PartitionElem, PartitionSpec, PartitionBoundSpec, PartitionRangeDatum, PartitionCmd, RangeTblEntry, RTEPermissionInfo, RangeTblFunction, TableSampleClause, WithCheckOption, SortGroupClause, GroupingSet, WindowClause, RowMarkClause, WithClause, InferClause, OnConflictClause, CTESearchClause, CTECycleClause, CommonTableExpr, MergeWhenClause, MergeAction, TriggerTransition, JsonOutput, JsonKeyValue, JsonObjectConstructor, JsonArrayConstructor, JsonArrayQueryConstructor, JsonAggConstructor, JsonObjectAgg, JsonArrayAgg, RawStmt, InsertStmt, DeleteStmt, UpdateStmt, MergeStmt, SelectStmt, SetOperationStmt, ReturnStmt, PLAssignStmt, CreateSchemaStmt, AlterTableStmt, ReplicaIdentityStmt, AlterTableCmd, AlterCollationStmt, AlterDomainStmt, GrantStmt, ObjectWithArgs, AccessPriv, GrantRoleStmt, AlterDefaultPrivilegesStmt, CopyStmt, VariableSetStmt, VariableShowStmt, CreateStmt, Constraint, CreateTableSpaceStmt, DropTableSpaceStmt, AlterTableSpaceOptionsStmt, AlterTableMoveAllStmt, CreateExtensionStmt, AlterExtensionStmt, AlterExtensionContentsStmt, CreateFdwStmt, AlterFdwStmt, CreateForeignServerStmt, AlterForeignServerStmt, CreateForeignTableStmt, CreateUserMappingStmt, AlterUserMappingStmt, DropUserMappingStmt, ImportForeignSchemaStmt, CreatePolicyStmt, AlterPolicyStmt, CreateAmStmt, CreateTrigStmt, CreateEventTrigStmt, AlterEventTrigStmt, CreatePLangStmt, CreateRoleStmt, AlterRoleStmt, AlterRoleSetStmt, DropRoleStmt, CreateSeqStmt, AlterSeqStmt, DefineStmt, CreateDomainStmt, CreateOpClassStmt, CreateOpClassItem, CreateOpFamilyStmt, AlterOpFamilyStmt, DropStmt, TruncateStmt, CommentStmt, SecLabelStmt, DeclareCursorStmt, ClosePortalStmt, FetchStmt, IndexStmt, CreateStatsStmt, StatsElem, AlterStatsStmt, CreateFunctionStmt, FunctionParameter, AlterFunctionStmt, DoStmt, InlineCodeBlock, CallStmt, CallContext, RenameStmt, AlterObjectDependsStmt, AlterObjectSchemaStmt, AlterOwnerStmt, AlterOperatorStmt, AlterTypeStmt, RuleStmt, NotifyStmt, ListenStmt, UnlistenStmt, TransactionStmt, CompositeTypeStmt, CreateEnumStmt, CreateRangeStmt, AlterEnumStmt, ViewStmt, LoadStmt, CreatedbStmt, AlterDatabaseStmt, AlterDatabaseRefreshCollStmt, AlterDatabaseSetStmt, DropdbStmt, AlterSystemStmt, ClusterStmt, VacuumStmt, VacuumRelation, ExplainStmt, CreateTableAsStmt, RefreshMatViewStmt, CheckPointStmt, DiscardStmt, LockStmt, ConstraintsSetStmt, ReindexStmt, CreateConversionStmt, CreateCastStmt, CreateTransformStmt, PrepareStmt, ExecuteStmt, DeallocateStmt, DropOwnedStmt, ReassignOwnedStmt, AlterTSDictionaryStmt, AlterTSConfigurationStmt, PublicationTable, PublicationObjSpec, CreatePublicationStmt, AlterPublicationStmt, CreateSubscriptionStmt, AlterSubscriptionStmt, DropSubscriptionStmt, ScanToken } from "./types";
export default {
  parseResult(_p?: ParseResult["ParseResult"]): ParseResult {
    const _j = ({
      ParseResult: {}
    } as ParseResult);
    _o.set(_j, "ParseResult.version", _p?.version);
    _o.set(_j, "ParseResult.stmts", _p?.stmts);
    return _j;
  },
  scanResult(_p?: ScanResult["ScanResult"]): ScanResult {
    const _j = ({
      ScanResult: {}
    } as ScanResult);
    _o.set(_j, "ScanResult.version", _p?.version);
    _o.set(_j, "ScanResult.tokens", _p?.tokens);
    return _j;
  },
  integer(_p?: Integer["Integer"]): Integer {
    const _j = ({
      Integer: {}
    } as Integer);
    _o.set(_j, "Integer.ival", _p?.ival);
    return _j;
  },
  float(_p?: Float["Float"]): Float {
    const _j = ({
      Float: {}
    } as Float);
    _o.set(_j, "Float.fval", _p?.fval);
    return _j;
  },
  boolean(_p?: Boolean["Boolean"]): Boolean {
    const _j = ({
      Boolean: {}
    } as Boolean);
    _o.set(_j, "Boolean.boolval", _p?.boolval);
    return _j;
  },
  string(_p?: String["String"]): String {
    const _j = ({
      String: {}
    } as String);
    _o.set(_j, "String.sval", _p?.sval);
    return _j;
  },
  bitString(_p?: BitString["BitString"]): BitString {
    const _j = ({
      BitString: {}
    } as BitString);
    _o.set(_j, "BitString.bsval", _p?.bsval);
    return _j;
  },
  list(_p?: List["List"]): List {
    const _j = ({
      List: {}
    } as List);
    _o.set(_j, "List.items", _p?.items);
    return _j;
  },
  oidList(_p?: OidList["OidList"]): OidList {
    const _j = ({
      OidList: {}
    } as OidList);
    _o.set(_j, "OidList.items", _p?.items);
    return _j;
  },
  intList(_p?: IntList["IntList"]): IntList {
    const _j = ({
      IntList: {}
    } as IntList);
    _o.set(_j, "IntList.items", _p?.items);
    return _j;
  },
  aConst(_p?: A_Const["A_Const"]): A_Const {
    const _j = ({
      A_Const: {}
    } as A_Const);
    _o.set(_j, "A_Const.ival", _p?.ival);
    _o.set(_j, "A_Const.fval", _p?.fval);
    _o.set(_j, "A_Const.boolval", _p?.boolval);
    _o.set(_j, "A_Const.sval", _p?.sval);
    _o.set(_j, "A_Const.bsval", _p?.bsval);
    _o.set(_j, "A_Const.isnull", _p?.isnull);
    _o.set(_j, "A_Const.location", _p?.location);
    return _j;
  },
  alias(_p?: Alias["Alias"]): Alias {
    const _j = ({
      Alias: {}
    } as Alias);
    _o.set(_j, "Alias.aliasname", _p?.aliasname);
    _o.set(_j, "Alias.colnames", _p?.colnames);
    return _j;
  },
  rangeVar(_p?: RangeVar["RangeVar"]): RangeVar {
    const _j = ({
      RangeVar: {}
    } as RangeVar);
    _o.set(_j, "RangeVar.catalogname", _p?.catalogname);
    _o.set(_j, "RangeVar.schemaname", _p?.schemaname);
    _o.set(_j, "RangeVar.relname", _p?.relname);
    _o.set(_j, "RangeVar.inh", _p?.inh);
    _o.set(_j, "RangeVar.relpersistence", _p?.relpersistence);
    _o.set(_j, "RangeVar.alias", _p?.alias);
    _o.set(_j, "RangeVar.location", _p?.location);
    return _j;
  },
  tableFunc(_p?: TableFunc["TableFunc"]): TableFunc {
    const _j = ({
      TableFunc: {}
    } as TableFunc);
    _o.set(_j, "TableFunc.ns_uris", _p?.ns_uris);
    _o.set(_j, "TableFunc.ns_names", _p?.ns_names);
    _o.set(_j, "TableFunc.docexpr", _p?.docexpr);
    _o.set(_j, "TableFunc.rowexpr", _p?.rowexpr);
    _o.set(_j, "TableFunc.colnames", _p?.colnames);
    _o.set(_j, "TableFunc.coltypes", _p?.coltypes);
    _o.set(_j, "TableFunc.coltypmods", _p?.coltypmods);
    _o.set(_j, "TableFunc.colcollations", _p?.colcollations);
    _o.set(_j, "TableFunc.colexprs", _p?.colexprs);
    _o.set(_j, "TableFunc.coldefexprs", _p?.coldefexprs);
    _o.set(_j, "TableFunc.notnulls", _p?.notnulls);
    _o.set(_j, "TableFunc.ordinalitycol", _p?.ordinalitycol);
    _o.set(_j, "TableFunc.location", _p?.location);
    return _j;
  },
  intoClause(_p?: IntoClause["IntoClause"]): IntoClause {
    const _j = ({
      IntoClause: {}
    } as IntoClause);
    _o.set(_j, "IntoClause.rel", _p?.rel);
    _o.set(_j, "IntoClause.colNames", _p?.colNames);
    _o.set(_j, "IntoClause.accessMethod", _p?.accessMethod);
    _o.set(_j, "IntoClause.options", _p?.options);
    _o.set(_j, "IntoClause.onCommit", _p?.onCommit);
    _o.set(_j, "IntoClause.tableSpaceName", _p?.tableSpaceName);
    _o.set(_j, "IntoClause.viewQuery", _p?.viewQuery);
    _o.set(_j, "IntoClause.skipData", _p?.skipData);
    return _j;
  },
  var(_p?: Var["Var"]): Var {
    const _j = ({
      Var: {}
    } as Var);
    _o.set(_j, "Var.xpr", _p?.xpr);
    _o.set(_j, "Var.varno", _p?.varno);
    _o.set(_j, "Var.varattno", _p?.varattno);
    _o.set(_j, "Var.vartype", _p?.vartype);
    _o.set(_j, "Var.vartypmod", _p?.vartypmod);
    _o.set(_j, "Var.varcollid", _p?.varcollid);
    _o.set(_j, "Var.varnullingrels", _p?.varnullingrels);
    _o.set(_j, "Var.varlevelsup", _p?.varlevelsup);
    _o.set(_j, "Var.location", _p?.location);
    return _j;
  },
  param(_p?: Param["Param"]): Param {
    const _j = ({
      Param: {}
    } as Param);
    _o.set(_j, "Param.xpr", _p?.xpr);
    _o.set(_j, "Param.paramkind", _p?.paramkind);
    _o.set(_j, "Param.paramid", _p?.paramid);
    _o.set(_j, "Param.paramtype", _p?.paramtype);
    _o.set(_j, "Param.paramtypmod", _p?.paramtypmod);
    _o.set(_j, "Param.paramcollid", _p?.paramcollid);
    _o.set(_j, "Param.location", _p?.location);
    return _j;
  },
  aggref(_p?: Aggref["Aggref"]): Aggref {
    const _j = ({
      Aggref: {}
    } as Aggref);
    _o.set(_j, "Aggref.xpr", _p?.xpr);
    _o.set(_j, "Aggref.aggfnoid", _p?.aggfnoid);
    _o.set(_j, "Aggref.aggtype", _p?.aggtype);
    _o.set(_j, "Aggref.aggcollid", _p?.aggcollid);
    _o.set(_j, "Aggref.inputcollid", _p?.inputcollid);
    _o.set(_j, "Aggref.aggargtypes", _p?.aggargtypes);
    _o.set(_j, "Aggref.aggdirectargs", _p?.aggdirectargs);
    _o.set(_j, "Aggref.args", _p?.args);
    _o.set(_j, "Aggref.aggorder", _p?.aggorder);
    _o.set(_j, "Aggref.aggdistinct", _p?.aggdistinct);
    _o.set(_j, "Aggref.aggfilter", _p?.aggfilter);
    _o.set(_j, "Aggref.aggstar", _p?.aggstar);
    _o.set(_j, "Aggref.aggvariadic", _p?.aggvariadic);
    _o.set(_j, "Aggref.aggkind", _p?.aggkind);
    _o.set(_j, "Aggref.agglevelsup", _p?.agglevelsup);
    _o.set(_j, "Aggref.aggsplit", _p?.aggsplit);
    _o.set(_j, "Aggref.aggno", _p?.aggno);
    _o.set(_j, "Aggref.aggtransno", _p?.aggtransno);
    _o.set(_j, "Aggref.location", _p?.location);
    return _j;
  },
  groupingFunc(_p?: GroupingFunc["GroupingFunc"]): GroupingFunc {
    const _j = ({
      GroupingFunc: {}
    } as GroupingFunc);
    _o.set(_j, "GroupingFunc.xpr", _p?.xpr);
    _o.set(_j, "GroupingFunc.args", _p?.args);
    _o.set(_j, "GroupingFunc.refs", _p?.refs);
    _o.set(_j, "GroupingFunc.agglevelsup", _p?.agglevelsup);
    _o.set(_j, "GroupingFunc.location", _p?.location);
    return _j;
  },
  windowFunc(_p?: WindowFunc["WindowFunc"]): WindowFunc {
    const _j = ({
      WindowFunc: {}
    } as WindowFunc);
    _o.set(_j, "WindowFunc.xpr", _p?.xpr);
    _o.set(_j, "WindowFunc.winfnoid", _p?.winfnoid);
    _o.set(_j, "WindowFunc.wintype", _p?.wintype);
    _o.set(_j, "WindowFunc.wincollid", _p?.wincollid);
    _o.set(_j, "WindowFunc.inputcollid", _p?.inputcollid);
    _o.set(_j, "WindowFunc.args", _p?.args);
    _o.set(_j, "WindowFunc.aggfilter", _p?.aggfilter);
    _o.set(_j, "WindowFunc.winref", _p?.winref);
    _o.set(_j, "WindowFunc.winstar", _p?.winstar);
    _o.set(_j, "WindowFunc.winagg", _p?.winagg);
    _o.set(_j, "WindowFunc.location", _p?.location);
    return _j;
  },
  subscriptingRef(_p?: SubscriptingRef["SubscriptingRef"]): SubscriptingRef {
    const _j = ({
      SubscriptingRef: {}
    } as SubscriptingRef);
    _o.set(_j, "SubscriptingRef.xpr", _p?.xpr);
    _o.set(_j, "SubscriptingRef.refcontainertype", _p?.refcontainertype);
    _o.set(_j, "SubscriptingRef.refelemtype", _p?.refelemtype);
    _o.set(_j, "SubscriptingRef.refrestype", _p?.refrestype);
    _o.set(_j, "SubscriptingRef.reftypmod", _p?.reftypmod);
    _o.set(_j, "SubscriptingRef.refcollid", _p?.refcollid);
    _o.set(_j, "SubscriptingRef.refupperindexpr", _p?.refupperindexpr);
    _o.set(_j, "SubscriptingRef.reflowerindexpr", _p?.reflowerindexpr);
    _o.set(_j, "SubscriptingRef.refexpr", _p?.refexpr);
    _o.set(_j, "SubscriptingRef.refassgnexpr", _p?.refassgnexpr);
    return _j;
  },
  funcExpr(_p?: FuncExpr["FuncExpr"]): FuncExpr {
    const _j = ({
      FuncExpr: {}
    } as FuncExpr);
    _o.set(_j, "FuncExpr.xpr", _p?.xpr);
    _o.set(_j, "FuncExpr.funcid", _p?.funcid);
    _o.set(_j, "FuncExpr.funcresulttype", _p?.funcresulttype);
    _o.set(_j, "FuncExpr.funcretset", _p?.funcretset);
    _o.set(_j, "FuncExpr.funcvariadic", _p?.funcvariadic);
    _o.set(_j, "FuncExpr.funcformat", _p?.funcformat);
    _o.set(_j, "FuncExpr.funccollid", _p?.funccollid);
    _o.set(_j, "FuncExpr.inputcollid", _p?.inputcollid);
    _o.set(_j, "FuncExpr.args", _p?.args);
    _o.set(_j, "FuncExpr.location", _p?.location);
    return _j;
  },
  namedArgExpr(_p?: NamedArgExpr["NamedArgExpr"]): NamedArgExpr {
    const _j = ({
      NamedArgExpr: {}
    } as NamedArgExpr);
    _o.set(_j, "NamedArgExpr.xpr", _p?.xpr);
    _o.set(_j, "NamedArgExpr.arg", _p?.arg);
    _o.set(_j, "NamedArgExpr.name", _p?.name);
    _o.set(_j, "NamedArgExpr.argnumber", _p?.argnumber);
    _o.set(_j, "NamedArgExpr.location", _p?.location);
    return _j;
  },
  opExpr(_p?: OpExpr["OpExpr"]): OpExpr {
    const _j = ({
      OpExpr: {}
    } as OpExpr);
    _o.set(_j, "OpExpr.xpr", _p?.xpr);
    _o.set(_j, "OpExpr.opno", _p?.opno);
    _o.set(_j, "OpExpr.opresulttype", _p?.opresulttype);
    _o.set(_j, "OpExpr.opretset", _p?.opretset);
    _o.set(_j, "OpExpr.opcollid", _p?.opcollid);
    _o.set(_j, "OpExpr.inputcollid", _p?.inputcollid);
    _o.set(_j, "OpExpr.args", _p?.args);
    _o.set(_j, "OpExpr.location", _p?.location);
    return _j;
  },
  distinctExpr(_p?: DistinctExpr["DistinctExpr"]): DistinctExpr {
    const _j = ({
      DistinctExpr: {}
    } as DistinctExpr);
    _o.set(_j, "DistinctExpr.xpr", _p?.xpr);
    _o.set(_j, "DistinctExpr.opno", _p?.opno);
    _o.set(_j, "DistinctExpr.opresulttype", _p?.opresulttype);
    _o.set(_j, "DistinctExpr.opretset", _p?.opretset);
    _o.set(_j, "DistinctExpr.opcollid", _p?.opcollid);
    _o.set(_j, "DistinctExpr.inputcollid", _p?.inputcollid);
    _o.set(_j, "DistinctExpr.args", _p?.args);
    _o.set(_j, "DistinctExpr.location", _p?.location);
    return _j;
  },
  nullIfExpr(_p?: NullIfExpr["NullIfExpr"]): NullIfExpr {
    const _j = ({
      NullIfExpr: {}
    } as NullIfExpr);
    _o.set(_j, "NullIfExpr.xpr", _p?.xpr);
    _o.set(_j, "NullIfExpr.opno", _p?.opno);
    _o.set(_j, "NullIfExpr.opresulttype", _p?.opresulttype);
    _o.set(_j, "NullIfExpr.opretset", _p?.opretset);
    _o.set(_j, "NullIfExpr.opcollid", _p?.opcollid);
    _o.set(_j, "NullIfExpr.inputcollid", _p?.inputcollid);
    _o.set(_j, "NullIfExpr.args", _p?.args);
    _o.set(_j, "NullIfExpr.location", _p?.location);
    return _j;
  },
  scalarArrayOpExpr(_p?: ScalarArrayOpExpr["ScalarArrayOpExpr"]): ScalarArrayOpExpr {
    const _j = ({
      ScalarArrayOpExpr: {}
    } as ScalarArrayOpExpr);
    _o.set(_j, "ScalarArrayOpExpr.xpr", _p?.xpr);
    _o.set(_j, "ScalarArrayOpExpr.opno", _p?.opno);
    _o.set(_j, "ScalarArrayOpExpr.useOr", _p?.useOr);
    _o.set(_j, "ScalarArrayOpExpr.inputcollid", _p?.inputcollid);
    _o.set(_j, "ScalarArrayOpExpr.args", _p?.args);
    _o.set(_j, "ScalarArrayOpExpr.location", _p?.location);
    return _j;
  },
  boolExpr(_p?: BoolExpr["BoolExpr"]): BoolExpr {
    const _j = ({
      BoolExpr: {}
    } as BoolExpr);
    _o.set(_j, "BoolExpr.xpr", _p?.xpr);
    _o.set(_j, "BoolExpr.boolop", _p?.boolop);
    _o.set(_j, "BoolExpr.args", _p?.args);
    _o.set(_j, "BoolExpr.location", _p?.location);
    return _j;
  },
  subLink(_p?: SubLink["SubLink"]): SubLink {
    const _j = ({
      SubLink: {}
    } as SubLink);
    _o.set(_j, "SubLink.xpr", _p?.xpr);
    _o.set(_j, "SubLink.subLinkType", _p?.subLinkType);
    _o.set(_j, "SubLink.subLinkId", _p?.subLinkId);
    _o.set(_j, "SubLink.testexpr", _p?.testexpr);
    _o.set(_j, "SubLink.operName", _p?.operName);
    _o.set(_j, "SubLink.subselect", _p?.subselect);
    _o.set(_j, "SubLink.location", _p?.location);
    return _j;
  },
  subPlan(_p?: SubPlan["SubPlan"]): SubPlan {
    const _j = ({
      SubPlan: {}
    } as SubPlan);
    _o.set(_j, "SubPlan.xpr", _p?.xpr);
    _o.set(_j, "SubPlan.subLinkType", _p?.subLinkType);
    _o.set(_j, "SubPlan.testexpr", _p?.testexpr);
    _o.set(_j, "SubPlan.paramIds", _p?.paramIds);
    _o.set(_j, "SubPlan.plan_id", _p?.plan_id);
    _o.set(_j, "SubPlan.plan_name", _p?.plan_name);
    _o.set(_j, "SubPlan.firstColType", _p?.firstColType);
    _o.set(_j, "SubPlan.firstColTypmod", _p?.firstColTypmod);
    _o.set(_j, "SubPlan.firstColCollation", _p?.firstColCollation);
    _o.set(_j, "SubPlan.useHashTable", _p?.useHashTable);
    _o.set(_j, "SubPlan.unknownEqFalse", _p?.unknownEqFalse);
    _o.set(_j, "SubPlan.parallel_safe", _p?.parallel_safe);
    _o.set(_j, "SubPlan.setParam", _p?.setParam);
    _o.set(_j, "SubPlan.parParam", _p?.parParam);
    _o.set(_j, "SubPlan.args", _p?.args);
    _o.set(_j, "SubPlan.startup_cost", _p?.startup_cost);
    _o.set(_j, "SubPlan.per_call_cost", _p?.per_call_cost);
    return _j;
  },
  alternativeSubPlan(_p?: AlternativeSubPlan["AlternativeSubPlan"]): AlternativeSubPlan {
    const _j = ({
      AlternativeSubPlan: {}
    } as AlternativeSubPlan);
    _o.set(_j, "AlternativeSubPlan.xpr", _p?.xpr);
    _o.set(_j, "AlternativeSubPlan.subplans", _p?.subplans);
    return _j;
  },
  fieldSelect(_p?: FieldSelect["FieldSelect"]): FieldSelect {
    const _j = ({
      FieldSelect: {}
    } as FieldSelect);
    _o.set(_j, "FieldSelect.xpr", _p?.xpr);
    _o.set(_j, "FieldSelect.arg", _p?.arg);
    _o.set(_j, "FieldSelect.fieldnum", _p?.fieldnum);
    _o.set(_j, "FieldSelect.resulttype", _p?.resulttype);
    _o.set(_j, "FieldSelect.resulttypmod", _p?.resulttypmod);
    _o.set(_j, "FieldSelect.resultcollid", _p?.resultcollid);
    return _j;
  },
  fieldStore(_p?: FieldStore["FieldStore"]): FieldStore {
    const _j = ({
      FieldStore: {}
    } as FieldStore);
    _o.set(_j, "FieldStore.xpr", _p?.xpr);
    _o.set(_j, "FieldStore.arg", _p?.arg);
    _o.set(_j, "FieldStore.newvals", _p?.newvals);
    _o.set(_j, "FieldStore.fieldnums", _p?.fieldnums);
    _o.set(_j, "FieldStore.resulttype", _p?.resulttype);
    return _j;
  },
  relabelType(_p?: RelabelType["RelabelType"]): RelabelType {
    const _j = ({
      RelabelType: {}
    } as RelabelType);
    _o.set(_j, "RelabelType.xpr", _p?.xpr);
    _o.set(_j, "RelabelType.arg", _p?.arg);
    _o.set(_j, "RelabelType.resulttype", _p?.resulttype);
    _o.set(_j, "RelabelType.resulttypmod", _p?.resulttypmod);
    _o.set(_j, "RelabelType.resultcollid", _p?.resultcollid);
    _o.set(_j, "RelabelType.relabelformat", _p?.relabelformat);
    _o.set(_j, "RelabelType.location", _p?.location);
    return _j;
  },
  coerceViaio(_p?: CoerceViaIO["CoerceViaIO"]): CoerceViaIO {
    const _j = ({
      CoerceViaIO: {}
    } as CoerceViaIO);
    _o.set(_j, "CoerceViaIO.xpr", _p?.xpr);
    _o.set(_j, "CoerceViaIO.arg", _p?.arg);
    _o.set(_j, "CoerceViaIO.resulttype", _p?.resulttype);
    _o.set(_j, "CoerceViaIO.resultcollid", _p?.resultcollid);
    _o.set(_j, "CoerceViaIO.coerceformat", _p?.coerceformat);
    _o.set(_j, "CoerceViaIO.location", _p?.location);
    return _j;
  },
  arrayCoerceExpr(_p?: ArrayCoerceExpr["ArrayCoerceExpr"]): ArrayCoerceExpr {
    const _j = ({
      ArrayCoerceExpr: {}
    } as ArrayCoerceExpr);
    _o.set(_j, "ArrayCoerceExpr.xpr", _p?.xpr);
    _o.set(_j, "ArrayCoerceExpr.arg", _p?.arg);
    _o.set(_j, "ArrayCoerceExpr.elemexpr", _p?.elemexpr);
    _o.set(_j, "ArrayCoerceExpr.resulttype", _p?.resulttype);
    _o.set(_j, "ArrayCoerceExpr.resulttypmod", _p?.resulttypmod);
    _o.set(_j, "ArrayCoerceExpr.resultcollid", _p?.resultcollid);
    _o.set(_j, "ArrayCoerceExpr.coerceformat", _p?.coerceformat);
    _o.set(_j, "ArrayCoerceExpr.location", _p?.location);
    return _j;
  },
  convertRowtypeExpr(_p?: ConvertRowtypeExpr["ConvertRowtypeExpr"]): ConvertRowtypeExpr {
    const _j = ({
      ConvertRowtypeExpr: {}
    } as ConvertRowtypeExpr);
    _o.set(_j, "ConvertRowtypeExpr.xpr", _p?.xpr);
    _o.set(_j, "ConvertRowtypeExpr.arg", _p?.arg);
    _o.set(_j, "ConvertRowtypeExpr.resulttype", _p?.resulttype);
    _o.set(_j, "ConvertRowtypeExpr.convertformat", _p?.convertformat);
    _o.set(_j, "ConvertRowtypeExpr.location", _p?.location);
    return _j;
  },
  collateExpr(_p?: CollateExpr["CollateExpr"]): CollateExpr {
    const _j = ({
      CollateExpr: {}
    } as CollateExpr);
    _o.set(_j, "CollateExpr.xpr", _p?.xpr);
    _o.set(_j, "CollateExpr.arg", _p?.arg);
    _o.set(_j, "CollateExpr.collOid", _p?.collOid);
    _o.set(_j, "CollateExpr.location", _p?.location);
    return _j;
  },
  caseExpr(_p?: CaseExpr["CaseExpr"]): CaseExpr {
    const _j = ({
      CaseExpr: {}
    } as CaseExpr);
    _o.set(_j, "CaseExpr.xpr", _p?.xpr);
    _o.set(_j, "CaseExpr.casetype", _p?.casetype);
    _o.set(_j, "CaseExpr.casecollid", _p?.casecollid);
    _o.set(_j, "CaseExpr.arg", _p?.arg);
    _o.set(_j, "CaseExpr.args", _p?.args);
    _o.set(_j, "CaseExpr.defresult", _p?.defresult);
    _o.set(_j, "CaseExpr.location", _p?.location);
    return _j;
  },
  caseWhen(_p?: CaseWhen["CaseWhen"]): CaseWhen {
    const _j = ({
      CaseWhen: {}
    } as CaseWhen);
    _o.set(_j, "CaseWhen.xpr", _p?.xpr);
    _o.set(_j, "CaseWhen.expr", _p?.expr);
    _o.set(_j, "CaseWhen.result", _p?.result);
    _o.set(_j, "CaseWhen.location", _p?.location);
    return _j;
  },
  caseTestExpr(_p?: CaseTestExpr["CaseTestExpr"]): CaseTestExpr {
    const _j = ({
      CaseTestExpr: {}
    } as CaseTestExpr);
    _o.set(_j, "CaseTestExpr.xpr", _p?.xpr);
    _o.set(_j, "CaseTestExpr.typeId", _p?.typeId);
    _o.set(_j, "CaseTestExpr.typeMod", _p?.typeMod);
    _o.set(_j, "CaseTestExpr.collation", _p?.collation);
    return _j;
  },
  arrayExpr(_p?: ArrayExpr["ArrayExpr"]): ArrayExpr {
    const _j = ({
      ArrayExpr: {}
    } as ArrayExpr);
    _o.set(_j, "ArrayExpr.xpr", _p?.xpr);
    _o.set(_j, "ArrayExpr.array_typeid", _p?.array_typeid);
    _o.set(_j, "ArrayExpr.array_collid", _p?.array_collid);
    _o.set(_j, "ArrayExpr.element_typeid", _p?.element_typeid);
    _o.set(_j, "ArrayExpr.elements", _p?.elements);
    _o.set(_j, "ArrayExpr.multidims", _p?.multidims);
    _o.set(_j, "ArrayExpr.location", _p?.location);
    return _j;
  },
  rowExpr(_p?: RowExpr["RowExpr"]): RowExpr {
    const _j = ({
      RowExpr: {}
    } as RowExpr);
    _o.set(_j, "RowExpr.xpr", _p?.xpr);
    _o.set(_j, "RowExpr.args", _p?.args);
    _o.set(_j, "RowExpr.row_typeid", _p?.row_typeid);
    _o.set(_j, "RowExpr.row_format", _p?.row_format);
    _o.set(_j, "RowExpr.colnames", _p?.colnames);
    _o.set(_j, "RowExpr.location", _p?.location);
    return _j;
  },
  rowCompareExpr(_p?: RowCompareExpr["RowCompareExpr"]): RowCompareExpr {
    const _j = ({
      RowCompareExpr: {}
    } as RowCompareExpr);
    _o.set(_j, "RowCompareExpr.xpr", _p?.xpr);
    _o.set(_j, "RowCompareExpr.rctype", _p?.rctype);
    _o.set(_j, "RowCompareExpr.opnos", _p?.opnos);
    _o.set(_j, "RowCompareExpr.opfamilies", _p?.opfamilies);
    _o.set(_j, "RowCompareExpr.inputcollids", _p?.inputcollids);
    _o.set(_j, "RowCompareExpr.largs", _p?.largs);
    _o.set(_j, "RowCompareExpr.rargs", _p?.rargs);
    return _j;
  },
  coalesceExpr(_p?: CoalesceExpr["CoalesceExpr"]): CoalesceExpr {
    const _j = ({
      CoalesceExpr: {}
    } as CoalesceExpr);
    _o.set(_j, "CoalesceExpr.xpr", _p?.xpr);
    _o.set(_j, "CoalesceExpr.coalescetype", _p?.coalescetype);
    _o.set(_j, "CoalesceExpr.coalescecollid", _p?.coalescecollid);
    _o.set(_j, "CoalesceExpr.args", _p?.args);
    _o.set(_j, "CoalesceExpr.location", _p?.location);
    return _j;
  },
  minMaxExpr(_p?: MinMaxExpr["MinMaxExpr"]): MinMaxExpr {
    const _j = ({
      MinMaxExpr: {}
    } as MinMaxExpr);
    _o.set(_j, "MinMaxExpr.xpr", _p?.xpr);
    _o.set(_j, "MinMaxExpr.minmaxtype", _p?.minmaxtype);
    _o.set(_j, "MinMaxExpr.minmaxcollid", _p?.minmaxcollid);
    _o.set(_j, "MinMaxExpr.inputcollid", _p?.inputcollid);
    _o.set(_j, "MinMaxExpr.op", _p?.op);
    _o.set(_j, "MinMaxExpr.args", _p?.args);
    _o.set(_j, "MinMaxExpr.location", _p?.location);
    return _j;
  },
  sqlValueFunction(_p?: SQLValueFunction["SQLValueFunction"]): SQLValueFunction {
    const _j = ({
      SQLValueFunction: {}
    } as SQLValueFunction);
    _o.set(_j, "SQLValueFunction.xpr", _p?.xpr);
    _o.set(_j, "SQLValueFunction.op", _p?.op);
    _o.set(_j, "SQLValueFunction.type", _p?.type);
    _o.set(_j, "SQLValueFunction.typmod", _p?.typmod);
    _o.set(_j, "SQLValueFunction.location", _p?.location);
    return _j;
  },
  xmlExpr(_p?: XmlExpr["XmlExpr"]): XmlExpr {
    const _j = ({
      XmlExpr: {}
    } as XmlExpr);
    _o.set(_j, "XmlExpr.xpr", _p?.xpr);
    _o.set(_j, "XmlExpr.op", _p?.op);
    _o.set(_j, "XmlExpr.name", _p?.name);
    _o.set(_j, "XmlExpr.named_args", _p?.named_args);
    _o.set(_j, "XmlExpr.arg_names", _p?.arg_names);
    _o.set(_j, "XmlExpr.args", _p?.args);
    _o.set(_j, "XmlExpr.xmloption", _p?.xmloption);
    _o.set(_j, "XmlExpr.indent", _p?.indent);
    _o.set(_j, "XmlExpr.type", _p?.type);
    _o.set(_j, "XmlExpr.typmod", _p?.typmod);
    _o.set(_j, "XmlExpr.location", _p?.location);
    return _j;
  },
  jsonFormat(_p?: JsonFormat["JsonFormat"]): JsonFormat {
    const _j = ({
      JsonFormat: {}
    } as JsonFormat);
    _o.set(_j, "JsonFormat.format_type", _p?.format_type);
    _o.set(_j, "JsonFormat.encoding", _p?.encoding);
    _o.set(_j, "JsonFormat.location", _p?.location);
    return _j;
  },
  jsonReturning(_p?: JsonReturning["JsonReturning"]): JsonReturning {
    const _j = ({
      JsonReturning: {}
    } as JsonReturning);
    _o.set(_j, "JsonReturning.format", _p?.format);
    _o.set(_j, "JsonReturning.typid", _p?.typid);
    _o.set(_j, "JsonReturning.typmod", _p?.typmod);
    return _j;
  },
  jsonValueExpr(_p?: JsonValueExpr["JsonValueExpr"]): JsonValueExpr {
    const _j = ({
      JsonValueExpr: {}
    } as JsonValueExpr);
    _o.set(_j, "JsonValueExpr.raw_expr", _p?.raw_expr);
    _o.set(_j, "JsonValueExpr.formatted_expr", _p?.formatted_expr);
    _o.set(_j, "JsonValueExpr.format", _p?.format);
    return _j;
  },
  jsonConstructorExpr(_p?: JsonConstructorExpr["JsonConstructorExpr"]): JsonConstructorExpr {
    const _j = ({
      JsonConstructorExpr: {}
    } as JsonConstructorExpr);
    _o.set(_j, "JsonConstructorExpr.xpr", _p?.xpr);
    _o.set(_j, "JsonConstructorExpr.type", _p?.type);
    _o.set(_j, "JsonConstructorExpr.args", _p?.args);
    _o.set(_j, "JsonConstructorExpr.func", _p?.func);
    _o.set(_j, "JsonConstructorExpr.coercion", _p?.coercion);
    _o.set(_j, "JsonConstructorExpr.returning", _p?.returning);
    _o.set(_j, "JsonConstructorExpr.absent_on_null", _p?.absent_on_null);
    _o.set(_j, "JsonConstructorExpr.unique", _p?.unique);
    _o.set(_j, "JsonConstructorExpr.location", _p?.location);
    return _j;
  },
  jsonIsPredicate(_p?: JsonIsPredicate["JsonIsPredicate"]): JsonIsPredicate {
    const _j = ({
      JsonIsPredicate: {}
    } as JsonIsPredicate);
    _o.set(_j, "JsonIsPredicate.expr", _p?.expr);
    _o.set(_j, "JsonIsPredicate.format", _p?.format);
    _o.set(_j, "JsonIsPredicate.item_type", _p?.item_type);
    _o.set(_j, "JsonIsPredicate.unique_keys", _p?.unique_keys);
    _o.set(_j, "JsonIsPredicate.location", _p?.location);
    return _j;
  },
  nullTest(_p?: NullTest["NullTest"]): NullTest {
    const _j = ({
      NullTest: {}
    } as NullTest);
    _o.set(_j, "NullTest.xpr", _p?.xpr);
    _o.set(_j, "NullTest.arg", _p?.arg);
    _o.set(_j, "NullTest.nulltesttype", _p?.nulltesttype);
    _o.set(_j, "NullTest.argisrow", _p?.argisrow);
    _o.set(_j, "NullTest.location", _p?.location);
    return _j;
  },
  booleanTest(_p?: BooleanTest["BooleanTest"]): BooleanTest {
    const _j = ({
      BooleanTest: {}
    } as BooleanTest);
    _o.set(_j, "BooleanTest.xpr", _p?.xpr);
    _o.set(_j, "BooleanTest.arg", _p?.arg);
    _o.set(_j, "BooleanTest.booltesttype", _p?.booltesttype);
    _o.set(_j, "BooleanTest.location", _p?.location);
    return _j;
  },
  coerceToDomain(_p?: CoerceToDomain["CoerceToDomain"]): CoerceToDomain {
    const _j = ({
      CoerceToDomain: {}
    } as CoerceToDomain);
    _o.set(_j, "CoerceToDomain.xpr", _p?.xpr);
    _o.set(_j, "CoerceToDomain.arg", _p?.arg);
    _o.set(_j, "CoerceToDomain.resulttype", _p?.resulttype);
    _o.set(_j, "CoerceToDomain.resulttypmod", _p?.resulttypmod);
    _o.set(_j, "CoerceToDomain.resultcollid", _p?.resultcollid);
    _o.set(_j, "CoerceToDomain.coercionformat", _p?.coercionformat);
    _o.set(_j, "CoerceToDomain.location", _p?.location);
    return _j;
  },
  coerceToDomainValue(_p?: CoerceToDomainValue["CoerceToDomainValue"]): CoerceToDomainValue {
    const _j = ({
      CoerceToDomainValue: {}
    } as CoerceToDomainValue);
    _o.set(_j, "CoerceToDomainValue.xpr", _p?.xpr);
    _o.set(_j, "CoerceToDomainValue.typeId", _p?.typeId);
    _o.set(_j, "CoerceToDomainValue.typeMod", _p?.typeMod);
    _o.set(_j, "CoerceToDomainValue.collation", _p?.collation);
    _o.set(_j, "CoerceToDomainValue.location", _p?.location);
    return _j;
  },
  setToDefault(_p?: SetToDefault["SetToDefault"]): SetToDefault {
    const _j = ({
      SetToDefault: {}
    } as SetToDefault);
    _o.set(_j, "SetToDefault.xpr", _p?.xpr);
    _o.set(_j, "SetToDefault.typeId", _p?.typeId);
    _o.set(_j, "SetToDefault.typeMod", _p?.typeMod);
    _o.set(_j, "SetToDefault.collation", _p?.collation);
    _o.set(_j, "SetToDefault.location", _p?.location);
    return _j;
  },
  currentOfExpr(_p?: CurrentOfExpr["CurrentOfExpr"]): CurrentOfExpr {
    const _j = ({
      CurrentOfExpr: {}
    } as CurrentOfExpr);
    _o.set(_j, "CurrentOfExpr.xpr", _p?.xpr);
    _o.set(_j, "CurrentOfExpr.cvarno", _p?.cvarno);
    _o.set(_j, "CurrentOfExpr.cursor_name", _p?.cursor_name);
    _o.set(_j, "CurrentOfExpr.cursor_param", _p?.cursor_param);
    return _j;
  },
  nextValueExpr(_p?: NextValueExpr["NextValueExpr"]): NextValueExpr {
    const _j = ({
      NextValueExpr: {}
    } as NextValueExpr);
    _o.set(_j, "NextValueExpr.xpr", _p?.xpr);
    _o.set(_j, "NextValueExpr.seqid", _p?.seqid);
    _o.set(_j, "NextValueExpr.typeId", _p?.typeId);
    return _j;
  },
  inferenceElem(_p?: InferenceElem["InferenceElem"]): InferenceElem {
    const _j = ({
      InferenceElem: {}
    } as InferenceElem);
    _o.set(_j, "InferenceElem.xpr", _p?.xpr);
    _o.set(_j, "InferenceElem.expr", _p?.expr);
    _o.set(_j, "InferenceElem.infercollid", _p?.infercollid);
    _o.set(_j, "InferenceElem.inferopclass", _p?.inferopclass);
    return _j;
  },
  targetEntry(_p?: TargetEntry["TargetEntry"]): TargetEntry {
    const _j = ({
      TargetEntry: {}
    } as TargetEntry);
    _o.set(_j, "TargetEntry.xpr", _p?.xpr);
    _o.set(_j, "TargetEntry.expr", _p?.expr);
    _o.set(_j, "TargetEntry.resno", _p?.resno);
    _o.set(_j, "TargetEntry.resname", _p?.resname);
    _o.set(_j, "TargetEntry.ressortgroupref", _p?.ressortgroupref);
    _o.set(_j, "TargetEntry.resorigtbl", _p?.resorigtbl);
    _o.set(_j, "TargetEntry.resorigcol", _p?.resorigcol);
    _o.set(_j, "TargetEntry.resjunk", _p?.resjunk);
    return _j;
  },
  rangeTblRef(_p?: RangeTblRef["RangeTblRef"]): RangeTblRef {
    const _j = ({
      RangeTblRef: {}
    } as RangeTblRef);
    _o.set(_j, "RangeTblRef.rtindex", _p?.rtindex);
    return _j;
  },
  joinExpr(_p?: JoinExpr["JoinExpr"]): JoinExpr {
    const _j = ({
      JoinExpr: {}
    } as JoinExpr);
    _o.set(_j, "JoinExpr.jointype", _p?.jointype);
    _o.set(_j, "JoinExpr.isNatural", _p?.isNatural);
    _o.set(_j, "JoinExpr.larg", _p?.larg);
    _o.set(_j, "JoinExpr.rarg", _p?.rarg);
    _o.set(_j, "JoinExpr.usingClause", _p?.usingClause);
    _o.set(_j, "JoinExpr.join_using_alias", _p?.join_using_alias);
    _o.set(_j, "JoinExpr.quals", _p?.quals);
    _o.set(_j, "JoinExpr.alias", _p?.alias);
    _o.set(_j, "JoinExpr.rtindex", _p?.rtindex);
    return _j;
  },
  fromExpr(_p?: FromExpr["FromExpr"]): FromExpr {
    const _j = ({
      FromExpr: {}
    } as FromExpr);
    _o.set(_j, "FromExpr.fromlist", _p?.fromlist);
    _o.set(_j, "FromExpr.quals", _p?.quals);
    return _j;
  },
  onConflictExpr(_p?: OnConflictExpr["OnConflictExpr"]): OnConflictExpr {
    const _j = ({
      OnConflictExpr: {}
    } as OnConflictExpr);
    _o.set(_j, "OnConflictExpr.action", _p?.action);
    _o.set(_j, "OnConflictExpr.arbiterElems", _p?.arbiterElems);
    _o.set(_j, "OnConflictExpr.arbiterWhere", _p?.arbiterWhere);
    _o.set(_j, "OnConflictExpr.constraint", _p?.constraint);
    _o.set(_j, "OnConflictExpr.onConflictSet", _p?.onConflictSet);
    _o.set(_j, "OnConflictExpr.onConflictWhere", _p?.onConflictWhere);
    _o.set(_j, "OnConflictExpr.exclRelIndex", _p?.exclRelIndex);
    _o.set(_j, "OnConflictExpr.exclRelTlist", _p?.exclRelTlist);
    return _j;
  },
  query(_p?: Query["Query"]): Query {
    const _j = ({
      Query: {}
    } as Query);
    _o.set(_j, "Query.commandType", _p?.commandType);
    _o.set(_j, "Query.querySource", _p?.querySource);
    _o.set(_j, "Query.canSetTag", _p?.canSetTag);
    _o.set(_j, "Query.utilityStmt", _p?.utilityStmt);
    _o.set(_j, "Query.resultRelation", _p?.resultRelation);
    _o.set(_j, "Query.hasAggs", _p?.hasAggs);
    _o.set(_j, "Query.hasWindowFuncs", _p?.hasWindowFuncs);
    _o.set(_j, "Query.hasTargetSRFs", _p?.hasTargetSRFs);
    _o.set(_j, "Query.hasSubLinks", _p?.hasSubLinks);
    _o.set(_j, "Query.hasDistinctOn", _p?.hasDistinctOn);
    _o.set(_j, "Query.hasRecursive", _p?.hasRecursive);
    _o.set(_j, "Query.hasModifyingCTE", _p?.hasModifyingCTE);
    _o.set(_j, "Query.hasForUpdate", _p?.hasForUpdate);
    _o.set(_j, "Query.hasRowSecurity", _p?.hasRowSecurity);
    _o.set(_j, "Query.isReturn", _p?.isReturn);
    _o.set(_j, "Query.cteList", _p?.cteList);
    _o.set(_j, "Query.rtable", _p?.rtable);
    _o.set(_j, "Query.rteperminfos", _p?.rteperminfos);
    _o.set(_j, "Query.jointree", _p?.jointree);
    _o.set(_j, "Query.mergeActionList", _p?.mergeActionList);
    _o.set(_j, "Query.mergeUseOuterJoin", _p?.mergeUseOuterJoin);
    _o.set(_j, "Query.targetList", _p?.targetList);
    _o.set(_j, "Query.override", _p?.override);
    _o.set(_j, "Query.onConflict", _p?.onConflict);
    _o.set(_j, "Query.returningList", _p?.returningList);
    _o.set(_j, "Query.groupClause", _p?.groupClause);
    _o.set(_j, "Query.groupDistinct", _p?.groupDistinct);
    _o.set(_j, "Query.groupingSets", _p?.groupingSets);
    _o.set(_j, "Query.havingQual", _p?.havingQual);
    _o.set(_j, "Query.windowClause", _p?.windowClause);
    _o.set(_j, "Query.distinctClause", _p?.distinctClause);
    _o.set(_j, "Query.sortClause", _p?.sortClause);
    _o.set(_j, "Query.limitOffset", _p?.limitOffset);
    _o.set(_j, "Query.limitCount", _p?.limitCount);
    _o.set(_j, "Query.limitOption", _p?.limitOption);
    _o.set(_j, "Query.rowMarks", _p?.rowMarks);
    _o.set(_j, "Query.setOperations", _p?.setOperations);
    _o.set(_j, "Query.constraintDeps", _p?.constraintDeps);
    _o.set(_j, "Query.withCheckOptions", _p?.withCheckOptions);
    _o.set(_j, "Query.stmt_location", _p?.stmt_location);
    _o.set(_j, "Query.stmt_len", _p?.stmt_len);
    return _j;
  },
  typeName(_p?: TypeName): TypeName {
    const _j = ({} as TypeName);
    _o.set(_j, "names", _p?.names);
    _o.set(_j, "typeOid", _p?.typeOid);
    _o.set(_j, "setof", _p?.setof);
    _o.set(_j, "pct_type", _p?.pct_type);
    _o.set(_j, "typmods", _p?.typmods);
    _o.set(_j, "typemod", _p?.typemod);
    _o.set(_j, "arrayBounds", _p?.arrayBounds);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  columnRef(_p?: ColumnRef["ColumnRef"]): ColumnRef {
    const _j = ({
      ColumnRef: {}
    } as ColumnRef);
    _o.set(_j, "ColumnRef.fields", _p?.fields);
    _o.set(_j, "ColumnRef.location", _p?.location);
    return _j;
  },
  paramRef(_p?: ParamRef["ParamRef"]): ParamRef {
    const _j = ({
      ParamRef: {}
    } as ParamRef);
    _o.set(_j, "ParamRef.number", _p?.number);
    _o.set(_j, "ParamRef.location", _p?.location);
    return _j;
  },
  aExpr(_p?: A_Expr["A_Expr"]): A_Expr {
    const _j = ({
      A_Expr: {}
    } as A_Expr);
    _o.set(_j, "A_Expr.kind", _p?.kind);
    _o.set(_j, "A_Expr.name", _p?.name);
    _o.set(_j, "A_Expr.lexpr", _p?.lexpr);
    _o.set(_j, "A_Expr.rexpr", _p?.rexpr);
    _o.set(_j, "A_Expr.location", _p?.location);
    return _j;
  },
  typeCast(_p?: TypeCast["TypeCast"]): TypeCast {
    const _j = ({
      TypeCast: {}
    } as TypeCast);
    _o.set(_j, "TypeCast.arg", _p?.arg);
    _o.set(_j, "TypeCast.typeName", _p?.typeName);
    _o.set(_j, "TypeCast.location", _p?.location);
    return _j;
  },
  collateClause(_p?: CollateClause["CollateClause"]): CollateClause {
    const _j = ({
      CollateClause: {}
    } as CollateClause);
    _o.set(_j, "CollateClause.arg", _p?.arg);
    _o.set(_j, "CollateClause.collname", _p?.collname);
    _o.set(_j, "CollateClause.location", _p?.location);
    return _j;
  },
  roleSpec(_p?: RoleSpec["RoleSpec"]): RoleSpec {
    const _j = ({
      RoleSpec: {}
    } as RoleSpec);
    _o.set(_j, "RoleSpec.roletype", _p?.roletype);
    _o.set(_j, "RoleSpec.rolename", _p?.rolename);
    _o.set(_j, "RoleSpec.location", _p?.location);
    return _j;
  },
  funcCall(_p?: FuncCall["FuncCall"]): FuncCall {
    const _j = ({
      FuncCall: {}
    } as FuncCall);
    _o.set(_j, "FuncCall.funcname", _p?.funcname);
    _o.set(_j, "FuncCall.args", _p?.args);
    _o.set(_j, "FuncCall.agg_order", _p?.agg_order);
    _o.set(_j, "FuncCall.agg_filter", _p?.agg_filter);
    _o.set(_j, "FuncCall.over", _p?.over);
    _o.set(_j, "FuncCall.agg_within_group", _p?.agg_within_group);
    _o.set(_j, "FuncCall.agg_star", _p?.agg_star);
    _o.set(_j, "FuncCall.agg_distinct", _p?.agg_distinct);
    _o.set(_j, "FuncCall.func_variadic", _p?.func_variadic);
    _o.set(_j, "FuncCall.funcformat", _p?.funcformat);
    _o.set(_j, "FuncCall.location", _p?.location);
    return _j;
  },
  aStar(_p?: A_Star["A_Star"]): A_Star {
    const _j = ({
      A_Star: {}
    } as A_Star);
    return _j;
  },
  aIndices(_p?: A_Indices["A_Indices"]): A_Indices {
    const _j = ({
      A_Indices: {}
    } as A_Indices);
    _o.set(_j, "A_Indices.is_slice", _p?.is_slice);
    _o.set(_j, "A_Indices.lidx", _p?.lidx);
    _o.set(_j, "A_Indices.uidx", _p?.uidx);
    return _j;
  },
  aIndirection(_p?: A_Indirection["A_Indirection"]): A_Indirection {
    const _j = ({
      A_Indirection: {}
    } as A_Indirection);
    _o.set(_j, "A_Indirection.arg", _p?.arg);
    _o.set(_j, "A_Indirection.indirection", _p?.indirection);
    return _j;
  },
  aArrayExpr(_p?: A_ArrayExpr["A_ArrayExpr"]): A_ArrayExpr {
    const _j = ({
      A_ArrayExpr: {}
    } as A_ArrayExpr);
    _o.set(_j, "A_ArrayExpr.elements", _p?.elements);
    _o.set(_j, "A_ArrayExpr.location", _p?.location);
    return _j;
  },
  resTarget(_p?: ResTarget["ResTarget"]): ResTarget {
    const _j = ({
      ResTarget: {}
    } as ResTarget);
    _o.set(_j, "ResTarget.name", _p?.name);
    _o.set(_j, "ResTarget.indirection", _p?.indirection);
    _o.set(_j, "ResTarget.val", _p?.val);
    _o.set(_j, "ResTarget.location", _p?.location);
    return _j;
  },
  multiAssignRef(_p?: MultiAssignRef["MultiAssignRef"]): MultiAssignRef {
    const _j = ({
      MultiAssignRef: {}
    } as MultiAssignRef);
    _o.set(_j, "MultiAssignRef.source", _p?.source);
    _o.set(_j, "MultiAssignRef.colno", _p?.colno);
    _o.set(_j, "MultiAssignRef.ncolumns", _p?.ncolumns);
    return _j;
  },
  sortBy(_p?: SortBy["SortBy"]): SortBy {
    const _j = ({
      SortBy: {}
    } as SortBy);
    _o.set(_j, "SortBy.node", _p?.node);
    _o.set(_j, "SortBy.sortby_dir", _p?.sortby_dir);
    _o.set(_j, "SortBy.sortby_nulls", _p?.sortby_nulls);
    _o.set(_j, "SortBy.useOp", _p?.useOp);
    _o.set(_j, "SortBy.location", _p?.location);
    return _j;
  },
  windowDef(_p?: WindowDef["WindowDef"]): WindowDef {
    const _j = ({
      WindowDef: {}
    } as WindowDef);
    _o.set(_j, "WindowDef.name", _p?.name);
    _o.set(_j, "WindowDef.refname", _p?.refname);
    _o.set(_j, "WindowDef.partitionClause", _p?.partitionClause);
    _o.set(_j, "WindowDef.orderClause", _p?.orderClause);
    _o.set(_j, "WindowDef.frameOptions", _p?.frameOptions);
    _o.set(_j, "WindowDef.startOffset", _p?.startOffset);
    _o.set(_j, "WindowDef.endOffset", _p?.endOffset);
    _o.set(_j, "WindowDef.location", _p?.location);
    return _j;
  },
  rangeSubselect(_p?: RangeSubselect["RangeSubselect"]): RangeSubselect {
    const _j = ({
      RangeSubselect: {}
    } as RangeSubselect);
    _o.set(_j, "RangeSubselect.lateral", _p?.lateral);
    _o.set(_j, "RangeSubselect.subquery", _p?.subquery);
    _o.set(_j, "RangeSubselect.alias", _p?.alias);
    return _j;
  },
  rangeFunction(_p?: RangeFunction["RangeFunction"]): RangeFunction {
    const _j = ({
      RangeFunction: {}
    } as RangeFunction);
    _o.set(_j, "RangeFunction.lateral", _p?.lateral);
    _o.set(_j, "RangeFunction.ordinality", _p?.ordinality);
    _o.set(_j, "RangeFunction.is_rowsfrom", _p?.is_rowsfrom);
    _o.set(_j, "RangeFunction.functions", _p?.functions);
    _o.set(_j, "RangeFunction.alias", _p?.alias);
    _o.set(_j, "RangeFunction.coldeflist", _p?.coldeflist);
    return _j;
  },
  rangeTableFunc(_p?: RangeTableFunc["RangeTableFunc"]): RangeTableFunc {
    const _j = ({
      RangeTableFunc: {}
    } as RangeTableFunc);
    _o.set(_j, "RangeTableFunc.lateral", _p?.lateral);
    _o.set(_j, "RangeTableFunc.docexpr", _p?.docexpr);
    _o.set(_j, "RangeTableFunc.rowexpr", _p?.rowexpr);
    _o.set(_j, "RangeTableFunc.namespaces", _p?.namespaces);
    _o.set(_j, "RangeTableFunc.columns", _p?.columns);
    _o.set(_j, "RangeTableFunc.alias", _p?.alias);
    _o.set(_j, "RangeTableFunc.location", _p?.location);
    return _j;
  },
  rangeTableFuncCol(_p?: RangeTableFuncCol["RangeTableFuncCol"]): RangeTableFuncCol {
    const _j = ({
      RangeTableFuncCol: {}
    } as RangeTableFuncCol);
    _o.set(_j, "RangeTableFuncCol.colname", _p?.colname);
    _o.set(_j, "RangeTableFuncCol.typeName", _p?.typeName);
    _o.set(_j, "RangeTableFuncCol.for_ordinality", _p?.for_ordinality);
    _o.set(_j, "RangeTableFuncCol.is_not_null", _p?.is_not_null);
    _o.set(_j, "RangeTableFuncCol.colexpr", _p?.colexpr);
    _o.set(_j, "RangeTableFuncCol.coldefexpr", _p?.coldefexpr);
    _o.set(_j, "RangeTableFuncCol.location", _p?.location);
    return _j;
  },
  rangeTableSample(_p?: RangeTableSample["RangeTableSample"]): RangeTableSample {
    const _j = ({
      RangeTableSample: {}
    } as RangeTableSample);
    _o.set(_j, "RangeTableSample.relation", _p?.relation);
    _o.set(_j, "RangeTableSample.method", _p?.method);
    _o.set(_j, "RangeTableSample.args", _p?.args);
    _o.set(_j, "RangeTableSample.repeatable", _p?.repeatable);
    _o.set(_j, "RangeTableSample.location", _p?.location);
    return _j;
  },
  columnDef(_p?: ColumnDef["ColumnDef"]): ColumnDef {
    const _j = ({
      ColumnDef: {}
    } as ColumnDef);
    _o.set(_j, "ColumnDef.colname", _p?.colname);
    _o.set(_j, "ColumnDef.typeName", _p?.typeName);
    _o.set(_j, "ColumnDef.compression", _p?.compression);
    _o.set(_j, "ColumnDef.inhcount", _p?.inhcount);
    _o.set(_j, "ColumnDef.is_local", _p?.is_local);
    _o.set(_j, "ColumnDef.is_not_null", _p?.is_not_null);
    _o.set(_j, "ColumnDef.is_from_type", _p?.is_from_type);
    _o.set(_j, "ColumnDef.storage", _p?.storage);
    _o.set(_j, "ColumnDef.storage_name", _p?.storage_name);
    _o.set(_j, "ColumnDef.raw_default", _p?.raw_default);
    _o.set(_j, "ColumnDef.cooked_default", _p?.cooked_default);
    _o.set(_j, "ColumnDef.identity", _p?.identity);
    _o.set(_j, "ColumnDef.identitySequence", _p?.identitySequence);
    _o.set(_j, "ColumnDef.generated", _p?.generated);
    _o.set(_j, "ColumnDef.collClause", _p?.collClause);
    _o.set(_j, "ColumnDef.collOid", _p?.collOid);
    _o.set(_j, "ColumnDef.constraints", _p?.constraints);
    _o.set(_j, "ColumnDef.fdwoptions", _p?.fdwoptions);
    _o.set(_j, "ColumnDef.location", _p?.location);
    return _j;
  },
  tableLikeClause(_p?: TableLikeClause["TableLikeClause"]): TableLikeClause {
    const _j = ({
      TableLikeClause: {}
    } as TableLikeClause);
    _o.set(_j, "TableLikeClause.relation", _p?.relation);
    _o.set(_j, "TableLikeClause.options", _p?.options);
    _o.set(_j, "TableLikeClause.relationOid", _p?.relationOid);
    return _j;
  },
  indexElem(_p?: IndexElem["IndexElem"]): IndexElem {
    const _j = ({
      IndexElem: {}
    } as IndexElem);
    _o.set(_j, "IndexElem.name", _p?.name);
    _o.set(_j, "IndexElem.expr", _p?.expr);
    _o.set(_j, "IndexElem.indexcolname", _p?.indexcolname);
    _o.set(_j, "IndexElem.collation", _p?.collation);
    _o.set(_j, "IndexElem.opclass", _p?.opclass);
    _o.set(_j, "IndexElem.opclassopts", _p?.opclassopts);
    _o.set(_j, "IndexElem.ordering", _p?.ordering);
    _o.set(_j, "IndexElem.nulls_ordering", _p?.nulls_ordering);
    return _j;
  },
  defElem(_p?: DefElem["DefElem"]): DefElem {
    const _j = ({
      DefElem: {}
    } as DefElem);
    _o.set(_j, "DefElem.defnamespace", _p?.defnamespace);
    _o.set(_j, "DefElem.defname", _p?.defname);
    _o.set(_j, "DefElem.arg", _p?.arg);
    _o.set(_j, "DefElem.defaction", _p?.defaction);
    _o.set(_j, "DefElem.location", _p?.location);
    return _j;
  },
  lockingClause(_p?: LockingClause["LockingClause"]): LockingClause {
    const _j = ({
      LockingClause: {}
    } as LockingClause);
    _o.set(_j, "LockingClause.lockedRels", _p?.lockedRels);
    _o.set(_j, "LockingClause.strength", _p?.strength);
    _o.set(_j, "LockingClause.waitPolicy", _p?.waitPolicy);
    return _j;
  },
  xmlSerialize(_p?: XmlSerialize["XmlSerialize"]): XmlSerialize {
    const _j = ({
      XmlSerialize: {}
    } as XmlSerialize);
    _o.set(_j, "XmlSerialize.xmloption", _p?.xmloption);
    _o.set(_j, "XmlSerialize.expr", _p?.expr);
    _o.set(_j, "XmlSerialize.typeName", _p?.typeName);
    _o.set(_j, "XmlSerialize.indent", _p?.indent);
    _o.set(_j, "XmlSerialize.location", _p?.location);
    return _j;
  },
  partitionElem(_p?: PartitionElem["PartitionElem"]): PartitionElem {
    const _j = ({
      PartitionElem: {}
    } as PartitionElem);
    _o.set(_j, "PartitionElem.name", _p?.name);
    _o.set(_j, "PartitionElem.expr", _p?.expr);
    _o.set(_j, "PartitionElem.collation", _p?.collation);
    _o.set(_j, "PartitionElem.opclass", _p?.opclass);
    _o.set(_j, "PartitionElem.location", _p?.location);
    return _j;
  },
  partitionSpec(_p?: PartitionSpec["PartitionSpec"]): PartitionSpec {
    const _j = ({
      PartitionSpec: {}
    } as PartitionSpec);
    _o.set(_j, "PartitionSpec.strategy", _p?.strategy);
    _o.set(_j, "PartitionSpec.partParams", _p?.partParams);
    _o.set(_j, "PartitionSpec.location", _p?.location);
    return _j;
  },
  partitionBoundSpec(_p?: PartitionBoundSpec["PartitionBoundSpec"]): PartitionBoundSpec {
    const _j = ({
      PartitionBoundSpec: {}
    } as PartitionBoundSpec);
    _o.set(_j, "PartitionBoundSpec.strategy", _p?.strategy);
    _o.set(_j, "PartitionBoundSpec.is_default", _p?.is_default);
    _o.set(_j, "PartitionBoundSpec.modulus", _p?.modulus);
    _o.set(_j, "PartitionBoundSpec.remainder", _p?.remainder);
    _o.set(_j, "PartitionBoundSpec.listdatums", _p?.listdatums);
    _o.set(_j, "PartitionBoundSpec.lowerdatums", _p?.lowerdatums);
    _o.set(_j, "PartitionBoundSpec.upperdatums", _p?.upperdatums);
    _o.set(_j, "PartitionBoundSpec.location", _p?.location);
    return _j;
  },
  partitionRangeDatum(_p?: PartitionRangeDatum["PartitionRangeDatum"]): PartitionRangeDatum {
    const _j = ({
      PartitionRangeDatum: {}
    } as PartitionRangeDatum);
    _o.set(_j, "PartitionRangeDatum.kind", _p?.kind);
    _o.set(_j, "PartitionRangeDatum.value", _p?.value);
    _o.set(_j, "PartitionRangeDatum.location", _p?.location);
    return _j;
  },
  partitionCmd(_p?: PartitionCmd["PartitionCmd"]): PartitionCmd {
    const _j = ({
      PartitionCmd: {}
    } as PartitionCmd);
    _o.set(_j, "PartitionCmd.name", _p?.name);
    _o.set(_j, "PartitionCmd.bound", _p?.bound);
    _o.set(_j, "PartitionCmd.concurrent", _p?.concurrent);
    return _j;
  },
  rangeTblEntry(_p?: RangeTblEntry["RangeTblEntry"]): RangeTblEntry {
    const _j = ({
      RangeTblEntry: {}
    } as RangeTblEntry);
    _o.set(_j, "RangeTblEntry.rtekind", _p?.rtekind);
    _o.set(_j, "RangeTblEntry.relid", _p?.relid);
    _o.set(_j, "RangeTblEntry.relkind", _p?.relkind);
    _o.set(_j, "RangeTblEntry.rellockmode", _p?.rellockmode);
    _o.set(_j, "RangeTblEntry.tablesample", _p?.tablesample);
    _o.set(_j, "RangeTblEntry.perminfoindex", _p?.perminfoindex);
    _o.set(_j, "RangeTblEntry.subquery", _p?.subquery);
    _o.set(_j, "RangeTblEntry.security_barrier", _p?.security_barrier);
    _o.set(_j, "RangeTblEntry.jointype", _p?.jointype);
    _o.set(_j, "RangeTblEntry.joinmergedcols", _p?.joinmergedcols);
    _o.set(_j, "RangeTblEntry.joinaliasvars", _p?.joinaliasvars);
    _o.set(_j, "RangeTblEntry.joinleftcols", _p?.joinleftcols);
    _o.set(_j, "RangeTblEntry.joinrightcols", _p?.joinrightcols);
    _o.set(_j, "RangeTblEntry.join_using_alias", _p?.join_using_alias);
    _o.set(_j, "RangeTblEntry.functions", _p?.functions);
    _o.set(_j, "RangeTblEntry.funcordinality", _p?.funcordinality);
    _o.set(_j, "RangeTblEntry.tablefunc", _p?.tablefunc);
    _o.set(_j, "RangeTblEntry.values_lists", _p?.values_lists);
    _o.set(_j, "RangeTblEntry.ctename", _p?.ctename);
    _o.set(_j, "RangeTblEntry.ctelevelsup", _p?.ctelevelsup);
    _o.set(_j, "RangeTblEntry.self_reference", _p?.self_reference);
    _o.set(_j, "RangeTblEntry.coltypes", _p?.coltypes);
    _o.set(_j, "RangeTblEntry.coltypmods", _p?.coltypmods);
    _o.set(_j, "RangeTblEntry.colcollations", _p?.colcollations);
    _o.set(_j, "RangeTblEntry.enrname", _p?.enrname);
    _o.set(_j, "RangeTblEntry.enrtuples", _p?.enrtuples);
    _o.set(_j, "RangeTblEntry.alias", _p?.alias);
    _o.set(_j, "RangeTblEntry.eref", _p?.eref);
    _o.set(_j, "RangeTblEntry.lateral", _p?.lateral);
    _o.set(_j, "RangeTblEntry.inh", _p?.inh);
    _o.set(_j, "RangeTblEntry.inFromCl", _p?.inFromCl);
    _o.set(_j, "RangeTblEntry.securityQuals", _p?.securityQuals);
    return _j;
  },
  rtePermissionInfo(_p?: RTEPermissionInfo["RTEPermissionInfo"]): RTEPermissionInfo {
    const _j = ({
      RTEPermissionInfo: {}
    } as RTEPermissionInfo);
    _o.set(_j, "RTEPermissionInfo.relid", _p?.relid);
    _o.set(_j, "RTEPermissionInfo.inh", _p?.inh);
    _o.set(_j, "RTEPermissionInfo.requiredPerms", _p?.requiredPerms);
    _o.set(_j, "RTEPermissionInfo.checkAsUser", _p?.checkAsUser);
    _o.set(_j, "RTEPermissionInfo.selectedCols", _p?.selectedCols);
    _o.set(_j, "RTEPermissionInfo.insertedCols", _p?.insertedCols);
    _o.set(_j, "RTEPermissionInfo.updatedCols", _p?.updatedCols);
    return _j;
  },
  rangeTblFunction(_p?: RangeTblFunction["RangeTblFunction"]): RangeTblFunction {
    const _j = ({
      RangeTblFunction: {}
    } as RangeTblFunction);
    _o.set(_j, "RangeTblFunction.funcexpr", _p?.funcexpr);
    _o.set(_j, "RangeTblFunction.funccolcount", _p?.funccolcount);
    _o.set(_j, "RangeTblFunction.funccolnames", _p?.funccolnames);
    _o.set(_j, "RangeTblFunction.funccoltypes", _p?.funccoltypes);
    _o.set(_j, "RangeTblFunction.funccoltypmods", _p?.funccoltypmods);
    _o.set(_j, "RangeTblFunction.funccolcollations", _p?.funccolcollations);
    _o.set(_j, "RangeTblFunction.funcparams", _p?.funcparams);
    return _j;
  },
  tableSampleClause(_p?: TableSampleClause["TableSampleClause"]): TableSampleClause {
    const _j = ({
      TableSampleClause: {}
    } as TableSampleClause);
    _o.set(_j, "TableSampleClause.tsmhandler", _p?.tsmhandler);
    _o.set(_j, "TableSampleClause.args", _p?.args);
    _o.set(_j, "TableSampleClause.repeatable", _p?.repeatable);
    return _j;
  },
  withCheckOption(_p?: WithCheckOption["WithCheckOption"]): WithCheckOption {
    const _j = ({
      WithCheckOption: {}
    } as WithCheckOption);
    _o.set(_j, "WithCheckOption.kind", _p?.kind);
    _o.set(_j, "WithCheckOption.relname", _p?.relname);
    _o.set(_j, "WithCheckOption.polname", _p?.polname);
    _o.set(_j, "WithCheckOption.qual", _p?.qual);
    _o.set(_j, "WithCheckOption.cascaded", _p?.cascaded);
    return _j;
  },
  sortGroupClause(_p?: SortGroupClause["SortGroupClause"]): SortGroupClause {
    const _j = ({
      SortGroupClause: {}
    } as SortGroupClause);
    _o.set(_j, "SortGroupClause.tleSortGroupRef", _p?.tleSortGroupRef);
    _o.set(_j, "SortGroupClause.eqop", _p?.eqop);
    _o.set(_j, "SortGroupClause.sortop", _p?.sortop);
    _o.set(_j, "SortGroupClause.nulls_first", _p?.nulls_first);
    _o.set(_j, "SortGroupClause.hashable", _p?.hashable);
    return _j;
  },
  groupingSet(_p?: GroupingSet["GroupingSet"]): GroupingSet {
    const _j = ({
      GroupingSet: {}
    } as GroupingSet);
    _o.set(_j, "GroupingSet.kind", _p?.kind);
    _o.set(_j, "GroupingSet.content", _p?.content);
    _o.set(_j, "GroupingSet.location", _p?.location);
    return _j;
  },
  windowClause(_p?: WindowClause["WindowClause"]): WindowClause {
    const _j = ({
      WindowClause: {}
    } as WindowClause);
    _o.set(_j, "WindowClause.name", _p?.name);
    _o.set(_j, "WindowClause.refname", _p?.refname);
    _o.set(_j, "WindowClause.partitionClause", _p?.partitionClause);
    _o.set(_j, "WindowClause.orderClause", _p?.orderClause);
    _o.set(_j, "WindowClause.frameOptions", _p?.frameOptions);
    _o.set(_j, "WindowClause.startOffset", _p?.startOffset);
    _o.set(_j, "WindowClause.endOffset", _p?.endOffset);
    _o.set(_j, "WindowClause.runCondition", _p?.runCondition);
    _o.set(_j, "WindowClause.startInRangeFunc", _p?.startInRangeFunc);
    _o.set(_j, "WindowClause.endInRangeFunc", _p?.endInRangeFunc);
    _o.set(_j, "WindowClause.inRangeColl", _p?.inRangeColl);
    _o.set(_j, "WindowClause.inRangeAsc", _p?.inRangeAsc);
    _o.set(_j, "WindowClause.inRangeNullsFirst", _p?.inRangeNullsFirst);
    _o.set(_j, "WindowClause.winref", _p?.winref);
    _o.set(_j, "WindowClause.copiedOrder", _p?.copiedOrder);
    return _j;
  },
  rowMarkClause(_p?: RowMarkClause["RowMarkClause"]): RowMarkClause {
    const _j = ({
      RowMarkClause: {}
    } as RowMarkClause);
    _o.set(_j, "RowMarkClause.rti", _p?.rti);
    _o.set(_j, "RowMarkClause.strength", _p?.strength);
    _o.set(_j, "RowMarkClause.waitPolicy", _p?.waitPolicy);
    _o.set(_j, "RowMarkClause.pushedDown", _p?.pushedDown);
    return _j;
  },
  withClause(_p?: WithClause["WithClause"]): WithClause {
    const _j = ({
      WithClause: {}
    } as WithClause);
    _o.set(_j, "WithClause.ctes", _p?.ctes);
    _o.set(_j, "WithClause.recursive", _p?.recursive);
    _o.set(_j, "WithClause.location", _p?.location);
    return _j;
  },
  inferClause(_p?: InferClause["InferClause"]): InferClause {
    const _j = ({
      InferClause: {}
    } as InferClause);
    _o.set(_j, "InferClause.indexElems", _p?.indexElems);
    _o.set(_j, "InferClause.whereClause", _p?.whereClause);
    _o.set(_j, "InferClause.conname", _p?.conname);
    _o.set(_j, "InferClause.location", _p?.location);
    return _j;
  },
  onConflictClause(_p?: OnConflictClause["OnConflictClause"]): OnConflictClause {
    const _j = ({
      OnConflictClause: {}
    } as OnConflictClause);
    _o.set(_j, "OnConflictClause.action", _p?.action);
    _o.set(_j, "OnConflictClause.infer", _p?.infer);
    _o.set(_j, "OnConflictClause.targetList", _p?.targetList);
    _o.set(_j, "OnConflictClause.whereClause", _p?.whereClause);
    _o.set(_j, "OnConflictClause.location", _p?.location);
    return _j;
  },
  cteSearchClause(_p?: CTESearchClause["CTESearchClause"]): CTESearchClause {
    const _j = ({
      CTESearchClause: {}
    } as CTESearchClause);
    _o.set(_j, "CTESearchClause.search_col_list", _p?.search_col_list);
    _o.set(_j, "CTESearchClause.search_breadth_first", _p?.search_breadth_first);
    _o.set(_j, "CTESearchClause.search_seq_column", _p?.search_seq_column);
    _o.set(_j, "CTESearchClause.location", _p?.location);
    return _j;
  },
  cteCycleClause(_p?: CTECycleClause["CTECycleClause"]): CTECycleClause {
    const _j = ({
      CTECycleClause: {}
    } as CTECycleClause);
    _o.set(_j, "CTECycleClause.cycle_col_list", _p?.cycle_col_list);
    _o.set(_j, "CTECycleClause.cycle_mark_column", _p?.cycle_mark_column);
    _o.set(_j, "CTECycleClause.cycle_mark_value", _p?.cycle_mark_value);
    _o.set(_j, "CTECycleClause.cycle_mark_default", _p?.cycle_mark_default);
    _o.set(_j, "CTECycleClause.cycle_path_column", _p?.cycle_path_column);
    _o.set(_j, "CTECycleClause.location", _p?.location);
    _o.set(_j, "CTECycleClause.cycle_mark_type", _p?.cycle_mark_type);
    _o.set(_j, "CTECycleClause.cycle_mark_typmod", _p?.cycle_mark_typmod);
    _o.set(_j, "CTECycleClause.cycle_mark_collation", _p?.cycle_mark_collation);
    _o.set(_j, "CTECycleClause.cycle_mark_neop", _p?.cycle_mark_neop);
    return _j;
  },
  commonTableExpr(_p?: CommonTableExpr["CommonTableExpr"]): CommonTableExpr {
    const _j = ({
      CommonTableExpr: {}
    } as CommonTableExpr);
    _o.set(_j, "CommonTableExpr.ctename", _p?.ctename);
    _o.set(_j, "CommonTableExpr.aliascolnames", _p?.aliascolnames);
    _o.set(_j, "CommonTableExpr.ctematerialized", _p?.ctematerialized);
    _o.set(_j, "CommonTableExpr.ctequery", _p?.ctequery);
    _o.set(_j, "CommonTableExpr.search_clause", _p?.search_clause);
    _o.set(_j, "CommonTableExpr.cycle_clause", _p?.cycle_clause);
    _o.set(_j, "CommonTableExpr.location", _p?.location);
    _o.set(_j, "CommonTableExpr.cterecursive", _p?.cterecursive);
    _o.set(_j, "CommonTableExpr.cterefcount", _p?.cterefcount);
    _o.set(_j, "CommonTableExpr.ctecolnames", _p?.ctecolnames);
    _o.set(_j, "CommonTableExpr.ctecoltypes", _p?.ctecoltypes);
    _o.set(_j, "CommonTableExpr.ctecoltypmods", _p?.ctecoltypmods);
    _o.set(_j, "CommonTableExpr.ctecolcollations", _p?.ctecolcollations);
    return _j;
  },
  mergeWhenClause(_p?: MergeWhenClause["MergeWhenClause"]): MergeWhenClause {
    const _j = ({
      MergeWhenClause: {}
    } as MergeWhenClause);
    _o.set(_j, "MergeWhenClause.matched", _p?.matched);
    _o.set(_j, "MergeWhenClause.commandType", _p?.commandType);
    _o.set(_j, "MergeWhenClause.override", _p?.override);
    _o.set(_j, "MergeWhenClause.condition", _p?.condition);
    _o.set(_j, "MergeWhenClause.targetList", _p?.targetList);
    _o.set(_j, "MergeWhenClause.values", _p?.values);
    return _j;
  },
  mergeAction(_p?: MergeAction["MergeAction"]): MergeAction {
    const _j = ({
      MergeAction: {}
    } as MergeAction);
    _o.set(_j, "MergeAction.matched", _p?.matched);
    _o.set(_j, "MergeAction.commandType", _p?.commandType);
    _o.set(_j, "MergeAction.override", _p?.override);
    _o.set(_j, "MergeAction.qual", _p?.qual);
    _o.set(_j, "MergeAction.targetList", _p?.targetList);
    _o.set(_j, "MergeAction.updateColnos", _p?.updateColnos);
    return _j;
  },
  triggerTransition(_p?: TriggerTransition["TriggerTransition"]): TriggerTransition {
    const _j = ({
      TriggerTransition: {}
    } as TriggerTransition);
    _o.set(_j, "TriggerTransition.name", _p?.name);
    _o.set(_j, "TriggerTransition.isNew", _p?.isNew);
    _o.set(_j, "TriggerTransition.isTable", _p?.isTable);
    return _j;
  },
  jsonOutput(_p?: JsonOutput["JsonOutput"]): JsonOutput {
    const _j = ({
      JsonOutput: {}
    } as JsonOutput);
    _o.set(_j, "JsonOutput.typeName", _p?.typeName);
    _o.set(_j, "JsonOutput.returning", _p?.returning);
    return _j;
  },
  jsonKeyValue(_p?: JsonKeyValue["JsonKeyValue"]): JsonKeyValue {
    const _j = ({
      JsonKeyValue: {}
    } as JsonKeyValue);
    _o.set(_j, "JsonKeyValue.key", _p?.key);
    _o.set(_j, "JsonKeyValue.value", _p?.value);
    return _j;
  },
  jsonObjectConstructor(_p?: JsonObjectConstructor["JsonObjectConstructor"]): JsonObjectConstructor {
    const _j = ({
      JsonObjectConstructor: {}
    } as JsonObjectConstructor);
    _o.set(_j, "JsonObjectConstructor.exprs", _p?.exprs);
    _o.set(_j, "JsonObjectConstructor.output", _p?.output);
    _o.set(_j, "JsonObjectConstructor.absent_on_null", _p?.absent_on_null);
    _o.set(_j, "JsonObjectConstructor.unique", _p?.unique);
    _o.set(_j, "JsonObjectConstructor.location", _p?.location);
    return _j;
  },
  jsonArrayConstructor(_p?: JsonArrayConstructor["JsonArrayConstructor"]): JsonArrayConstructor {
    const _j = ({
      JsonArrayConstructor: {}
    } as JsonArrayConstructor);
    _o.set(_j, "JsonArrayConstructor.exprs", _p?.exprs);
    _o.set(_j, "JsonArrayConstructor.output", _p?.output);
    _o.set(_j, "JsonArrayConstructor.absent_on_null", _p?.absent_on_null);
    _o.set(_j, "JsonArrayConstructor.location", _p?.location);
    return _j;
  },
  jsonArrayQueryConstructor(_p?: JsonArrayQueryConstructor["JsonArrayQueryConstructor"]): JsonArrayQueryConstructor {
    const _j = ({
      JsonArrayQueryConstructor: {}
    } as JsonArrayQueryConstructor);
    _o.set(_j, "JsonArrayQueryConstructor.query", _p?.query);
    _o.set(_j, "JsonArrayQueryConstructor.output", _p?.output);
    _o.set(_j, "JsonArrayQueryConstructor.format", _p?.format);
    _o.set(_j, "JsonArrayQueryConstructor.absent_on_null", _p?.absent_on_null);
    _o.set(_j, "JsonArrayQueryConstructor.location", _p?.location);
    return _j;
  },
  jsonAggConstructor(_p?: JsonAggConstructor["JsonAggConstructor"]): JsonAggConstructor {
    const _j = ({
      JsonAggConstructor: {}
    } as JsonAggConstructor);
    _o.set(_j, "JsonAggConstructor.output", _p?.output);
    _o.set(_j, "JsonAggConstructor.agg_filter", _p?.agg_filter);
    _o.set(_j, "JsonAggConstructor.agg_order", _p?.agg_order);
    _o.set(_j, "JsonAggConstructor.over", _p?.over);
    _o.set(_j, "JsonAggConstructor.location", _p?.location);
    return _j;
  },
  jsonObjectAgg(_p?: JsonObjectAgg["JsonObjectAgg"]): JsonObjectAgg {
    const _j = ({
      JsonObjectAgg: {}
    } as JsonObjectAgg);
    _o.set(_j, "JsonObjectAgg.constructor", _p?.constructor);
    _o.set(_j, "JsonObjectAgg.arg", _p?.arg);
    _o.set(_j, "JsonObjectAgg.absent_on_null", _p?.absent_on_null);
    _o.set(_j, "JsonObjectAgg.unique", _p?.unique);
    return _j;
  },
  jsonArrayAgg(_p?: JsonArrayAgg["JsonArrayAgg"]): JsonArrayAgg {
    const _j = ({
      JsonArrayAgg: {}
    } as JsonArrayAgg);
    _o.set(_j, "JsonArrayAgg.constructor", _p?.constructor);
    _o.set(_j, "JsonArrayAgg.arg", _p?.arg);
    _o.set(_j, "JsonArrayAgg.absent_on_null", _p?.absent_on_null);
    return _j;
  },
  rawStmt(_p?: RawStmt["RawStmt"]): RawStmt {
    const _j = ({
      RawStmt: {}
    } as RawStmt);
    _o.set(_j, "RawStmt.stmt", _p?.stmt);
    _o.set(_j, "RawStmt.stmt_location", _p?.stmt_location);
    _o.set(_j, "RawStmt.stmt_len", _p?.stmt_len);
    return _j;
  },
  insertStmt(_p?: InsertStmt["InsertStmt"]): InsertStmt {
    const _j = ({
      InsertStmt: {}
    } as InsertStmt);
    _o.set(_j, "InsertStmt.relation", _p?.relation);
    _o.set(_j, "InsertStmt.cols", _p?.cols);
    _o.set(_j, "InsertStmt.selectStmt", _p?.selectStmt);
    _o.set(_j, "InsertStmt.onConflictClause", _p?.onConflictClause);
    _o.set(_j, "InsertStmt.returningList", _p?.returningList);
    _o.set(_j, "InsertStmt.withClause", _p?.withClause);
    _o.set(_j, "InsertStmt.override", _p?.override);
    return _j;
  },
  deleteStmt(_p?: DeleteStmt["DeleteStmt"]): DeleteStmt {
    const _j = ({
      DeleteStmt: {}
    } as DeleteStmt);
    _o.set(_j, "DeleteStmt.relation", _p?.relation);
    _o.set(_j, "DeleteStmt.usingClause", _p?.usingClause);
    _o.set(_j, "DeleteStmt.whereClause", _p?.whereClause);
    _o.set(_j, "DeleteStmt.returningList", _p?.returningList);
    _o.set(_j, "DeleteStmt.withClause", _p?.withClause);
    return _j;
  },
  updateStmt(_p?: UpdateStmt["UpdateStmt"]): UpdateStmt {
    const _j = ({
      UpdateStmt: {}
    } as UpdateStmt);
    _o.set(_j, "UpdateStmt.relation", _p?.relation);
    _o.set(_j, "UpdateStmt.targetList", _p?.targetList);
    _o.set(_j, "UpdateStmt.whereClause", _p?.whereClause);
    _o.set(_j, "UpdateStmt.fromClause", _p?.fromClause);
    _o.set(_j, "UpdateStmt.returningList", _p?.returningList);
    _o.set(_j, "UpdateStmt.withClause", _p?.withClause);
    return _j;
  },
  mergeStmt(_p?: MergeStmt["MergeStmt"]): MergeStmt {
    const _j = ({
      MergeStmt: {}
    } as MergeStmt);
    _o.set(_j, "MergeStmt.relation", _p?.relation);
    _o.set(_j, "MergeStmt.sourceRelation", _p?.sourceRelation);
    _o.set(_j, "MergeStmt.joinCondition", _p?.joinCondition);
    _o.set(_j, "MergeStmt.mergeWhenClauses", _p?.mergeWhenClauses);
    _o.set(_j, "MergeStmt.withClause", _p?.withClause);
    return _j;
  },
  selectStmt(_p?: SelectStmt["SelectStmt"]): SelectStmt {
    const _j = ({
      SelectStmt: {}
    } as SelectStmt);
    _o.set(_j, "SelectStmt.distinctClause", _p?.distinctClause);
    _o.set(_j, "SelectStmt.intoClause", _p?.intoClause);
    _o.set(_j, "SelectStmt.targetList", _p?.targetList);
    _o.set(_j, "SelectStmt.fromClause", _p?.fromClause);
    _o.set(_j, "SelectStmt.whereClause", _p?.whereClause);
    _o.set(_j, "SelectStmt.groupClause", _p?.groupClause);
    _o.set(_j, "SelectStmt.groupDistinct", _p?.groupDistinct);
    _o.set(_j, "SelectStmt.havingClause", _p?.havingClause);
    _o.set(_j, "SelectStmt.windowClause", _p?.windowClause);
    _o.set(_j, "SelectStmt.valuesLists", _p?.valuesLists);
    _o.set(_j, "SelectStmt.sortClause", _p?.sortClause);
    _o.set(_j, "SelectStmt.limitOffset", _p?.limitOffset);
    _o.set(_j, "SelectStmt.limitCount", _p?.limitCount);
    _o.set(_j, "SelectStmt.limitOption", _p?.limitOption);
    _o.set(_j, "SelectStmt.lockingClause", _p?.lockingClause);
    _o.set(_j, "SelectStmt.withClause", _p?.withClause);
    _o.set(_j, "SelectStmt.op", _p?.op);
    _o.set(_j, "SelectStmt.all", _p?.all);
    _o.set(_j, "SelectStmt.larg", _p?.larg);
    _o.set(_j, "SelectStmt.rarg", _p?.rarg);
    return _j;
  },
  setOperationStmt(_p?: SetOperationStmt["SetOperationStmt"]): SetOperationStmt {
    const _j = ({
      SetOperationStmt: {}
    } as SetOperationStmt);
    _o.set(_j, "SetOperationStmt.op", _p?.op);
    _o.set(_j, "SetOperationStmt.all", _p?.all);
    _o.set(_j, "SetOperationStmt.larg", _p?.larg);
    _o.set(_j, "SetOperationStmt.rarg", _p?.rarg);
    _o.set(_j, "SetOperationStmt.colTypes", _p?.colTypes);
    _o.set(_j, "SetOperationStmt.colTypmods", _p?.colTypmods);
    _o.set(_j, "SetOperationStmt.colCollations", _p?.colCollations);
    _o.set(_j, "SetOperationStmt.groupClauses", _p?.groupClauses);
    return _j;
  },
  returnStmt(_p?: ReturnStmt["ReturnStmt"]): ReturnStmt {
    const _j = ({
      ReturnStmt: {}
    } as ReturnStmt);
    _o.set(_j, "ReturnStmt.returnval", _p?.returnval);
    return _j;
  },
  plAssignStmt(_p?: PLAssignStmt["PLAssignStmt"]): PLAssignStmt {
    const _j = ({
      PLAssignStmt: {}
    } as PLAssignStmt);
    _o.set(_j, "PLAssignStmt.name", _p?.name);
    _o.set(_j, "PLAssignStmt.indirection", _p?.indirection);
    _o.set(_j, "PLAssignStmt.nnames", _p?.nnames);
    _o.set(_j, "PLAssignStmt.val", _p?.val);
    _o.set(_j, "PLAssignStmt.location", _p?.location);
    return _j;
  },
  createSchemaStmt(_p?: CreateSchemaStmt["CreateSchemaStmt"]): CreateSchemaStmt {
    const _j = ({
      CreateSchemaStmt: {}
    } as CreateSchemaStmt);
    _o.set(_j, "CreateSchemaStmt.schemaname", _p?.schemaname);
    _o.set(_j, "CreateSchemaStmt.authrole", _p?.authrole);
    _o.set(_j, "CreateSchemaStmt.schemaElts", _p?.schemaElts);
    _o.set(_j, "CreateSchemaStmt.if_not_exists", _p?.if_not_exists);
    return _j;
  },
  alterTableStmt(_p?: AlterTableStmt["AlterTableStmt"]): AlterTableStmt {
    const _j = ({
      AlterTableStmt: {}
    } as AlterTableStmt);
    _o.set(_j, "AlterTableStmt.relation", _p?.relation);
    _o.set(_j, "AlterTableStmt.cmds", _p?.cmds);
    _o.set(_j, "AlterTableStmt.objtype", _p?.objtype);
    _o.set(_j, "AlterTableStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  replicaIdentityStmt(_p?: ReplicaIdentityStmt["ReplicaIdentityStmt"]): ReplicaIdentityStmt {
    const _j = ({
      ReplicaIdentityStmt: {}
    } as ReplicaIdentityStmt);
    _o.set(_j, "ReplicaIdentityStmt.identity_type", _p?.identity_type);
    _o.set(_j, "ReplicaIdentityStmt.name", _p?.name);
    return _j;
  },
  alterTableCmd(_p?: AlterTableCmd["AlterTableCmd"]): AlterTableCmd {
    const _j = ({
      AlterTableCmd: {}
    } as AlterTableCmd);
    _o.set(_j, "AlterTableCmd.subtype", _p?.subtype);
    _o.set(_j, "AlterTableCmd.name", _p?.name);
    _o.set(_j, "AlterTableCmd.num", _p?.num);
    _o.set(_j, "AlterTableCmd.newowner", _p?.newowner);
    _o.set(_j, "AlterTableCmd.def", _p?.def);
    _o.set(_j, "AlterTableCmd.behavior", _p?.behavior);
    _o.set(_j, "AlterTableCmd.missing_ok", _p?.missing_ok);
    _o.set(_j, "AlterTableCmd.recurse", _p?.recurse);
    return _j;
  },
  alterCollationStmt(_p?: AlterCollationStmt["AlterCollationStmt"]): AlterCollationStmt {
    const _j = ({
      AlterCollationStmt: {}
    } as AlterCollationStmt);
    _o.set(_j, "AlterCollationStmt.collname", _p?.collname);
    return _j;
  },
  alterDomainStmt(_p?: AlterDomainStmt["AlterDomainStmt"]): AlterDomainStmt {
    const _j = ({
      AlterDomainStmt: {}
    } as AlterDomainStmt);
    _o.set(_j, "AlterDomainStmt.subtype", _p?.subtype);
    _o.set(_j, "AlterDomainStmt.typeName", _p?.typeName);
    _o.set(_j, "AlterDomainStmt.name", _p?.name);
    _o.set(_j, "AlterDomainStmt.def", _p?.def);
    _o.set(_j, "AlterDomainStmt.behavior", _p?.behavior);
    _o.set(_j, "AlterDomainStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  grantStmt(_p?: GrantStmt["GrantStmt"]): GrantStmt {
    const _j = ({
      GrantStmt: {}
    } as GrantStmt);
    _o.set(_j, "GrantStmt.is_grant", _p?.is_grant);
    _o.set(_j, "GrantStmt.targtype", _p?.targtype);
    _o.set(_j, "GrantStmt.objtype", _p?.objtype);
    _o.set(_j, "GrantStmt.objects", _p?.objects);
    _o.set(_j, "GrantStmt.privileges", _p?.privileges);
    _o.set(_j, "GrantStmt.grantees", _p?.grantees);
    _o.set(_j, "GrantStmt.grant_option", _p?.grant_option);
    _o.set(_j, "GrantStmt.grantor", _p?.grantor);
    _o.set(_j, "GrantStmt.behavior", _p?.behavior);
    return _j;
  },
  objectWithArgs(_p?: ObjectWithArgs["ObjectWithArgs"]): ObjectWithArgs {
    const _j = ({
      ObjectWithArgs: {}
    } as ObjectWithArgs);
    _o.set(_j, "ObjectWithArgs.objname", _p?.objname);
    _o.set(_j, "ObjectWithArgs.objargs", _p?.objargs);
    _o.set(_j, "ObjectWithArgs.objfuncargs", _p?.objfuncargs);
    _o.set(_j, "ObjectWithArgs.args_unspecified", _p?.args_unspecified);
    return _j;
  },
  accessPriv(_p?: AccessPriv["AccessPriv"]): AccessPriv {
    const _j = ({
      AccessPriv: {}
    } as AccessPriv);
    _o.set(_j, "AccessPriv.priv_name", _p?.priv_name);
    _o.set(_j, "AccessPriv.cols", _p?.cols);
    return _j;
  },
  grantRoleStmt(_p?: GrantRoleStmt["GrantRoleStmt"]): GrantRoleStmt {
    const _j = ({
      GrantRoleStmt: {}
    } as GrantRoleStmt);
    _o.set(_j, "GrantRoleStmt.granted_roles", _p?.granted_roles);
    _o.set(_j, "GrantRoleStmt.grantee_roles", _p?.grantee_roles);
    _o.set(_j, "GrantRoleStmt.is_grant", _p?.is_grant);
    _o.set(_j, "GrantRoleStmt.opt", _p?.opt);
    _o.set(_j, "GrantRoleStmt.grantor", _p?.grantor);
    _o.set(_j, "GrantRoleStmt.behavior", _p?.behavior);
    return _j;
  },
  alterDefaultPrivilegesStmt(_p?: AlterDefaultPrivilegesStmt["AlterDefaultPrivilegesStmt"]): AlterDefaultPrivilegesStmt {
    const _j = ({
      AlterDefaultPrivilegesStmt: {}
    } as AlterDefaultPrivilegesStmt);
    _o.set(_j, "AlterDefaultPrivilegesStmt.options", _p?.options);
    _o.set(_j, "AlterDefaultPrivilegesStmt.action", _p?.action);
    return _j;
  },
  copyStmt(_p?: CopyStmt["CopyStmt"]): CopyStmt {
    const _j = ({
      CopyStmt: {}
    } as CopyStmt);
    _o.set(_j, "CopyStmt.relation", _p?.relation);
    _o.set(_j, "CopyStmt.query", _p?.query);
    _o.set(_j, "CopyStmt.attlist", _p?.attlist);
    _o.set(_j, "CopyStmt.is_from", _p?.is_from);
    _o.set(_j, "CopyStmt.is_program", _p?.is_program);
    _o.set(_j, "CopyStmt.filename", _p?.filename);
    _o.set(_j, "CopyStmt.options", _p?.options);
    _o.set(_j, "CopyStmt.whereClause", _p?.whereClause);
    return _j;
  },
  variableSetStmt(_p?: VariableSetStmt["VariableSetStmt"]): VariableSetStmt {
    const _j = ({
      VariableSetStmt: {}
    } as VariableSetStmt);
    _o.set(_j, "VariableSetStmt.kind", _p?.kind);
    _o.set(_j, "VariableSetStmt.name", _p?.name);
    _o.set(_j, "VariableSetStmt.args", _p?.args);
    _o.set(_j, "VariableSetStmt.is_local", _p?.is_local);
    return _j;
  },
  variableShowStmt(_p?: VariableShowStmt["VariableShowStmt"]): VariableShowStmt {
    const _j = ({
      VariableShowStmt: {}
    } as VariableShowStmt);
    _o.set(_j, "VariableShowStmt.name", _p?.name);
    return _j;
  },
  createStmt(_p?: CreateStmt["CreateStmt"]): CreateStmt {
    const _j = ({
      CreateStmt: {}
    } as CreateStmt);
    _o.set(_j, "CreateStmt.relation", _p?.relation);
    _o.set(_j, "CreateStmt.tableElts", _p?.tableElts);
    _o.set(_j, "CreateStmt.inhRelations", _p?.inhRelations);
    _o.set(_j, "CreateStmt.partbound", _p?.partbound);
    _o.set(_j, "CreateStmt.partspec", _p?.partspec);
    _o.set(_j, "CreateStmt.ofTypename", _p?.ofTypename);
    _o.set(_j, "CreateStmt.constraints", _p?.constraints);
    _o.set(_j, "CreateStmt.options", _p?.options);
    _o.set(_j, "CreateStmt.oncommit", _p?.oncommit);
    _o.set(_j, "CreateStmt.tablespacename", _p?.tablespacename);
    _o.set(_j, "CreateStmt.accessMethod", _p?.accessMethod);
    _o.set(_j, "CreateStmt.if_not_exists", _p?.if_not_exists);
    return _j;
  },
  constraint(_p?: Constraint["Constraint"]): Constraint {
    const _j = ({
      Constraint: {}
    } as Constraint);
    _o.set(_j, "Constraint.contype", _p?.contype);
    _o.set(_j, "Constraint.conname", _p?.conname);
    _o.set(_j, "Constraint.deferrable", _p?.deferrable);
    _o.set(_j, "Constraint.initdeferred", _p?.initdeferred);
    _o.set(_j, "Constraint.location", _p?.location);
    _o.set(_j, "Constraint.is_no_inherit", _p?.is_no_inherit);
    _o.set(_j, "Constraint.raw_expr", _p?.raw_expr);
    _o.set(_j, "Constraint.cooked_expr", _p?.cooked_expr);
    _o.set(_j, "Constraint.generated_when", _p?.generated_when);
    _o.set(_j, "Constraint.nulls_not_distinct", _p?.nulls_not_distinct);
    _o.set(_j, "Constraint.keys", _p?.keys);
    _o.set(_j, "Constraint.including", _p?.including);
    _o.set(_j, "Constraint.exclusions", _p?.exclusions);
    _o.set(_j, "Constraint.options", _p?.options);
    _o.set(_j, "Constraint.indexname", _p?.indexname);
    _o.set(_j, "Constraint.indexspace", _p?.indexspace);
    _o.set(_j, "Constraint.reset_default_tblspc", _p?.reset_default_tblspc);
    _o.set(_j, "Constraint.access_method", _p?.access_method);
    _o.set(_j, "Constraint.where_clause", _p?.where_clause);
    _o.set(_j, "Constraint.pktable", _p?.pktable);
    _o.set(_j, "Constraint.fk_attrs", _p?.fk_attrs);
    _o.set(_j, "Constraint.pk_attrs", _p?.pk_attrs);
    _o.set(_j, "Constraint.fk_matchtype", _p?.fk_matchtype);
    _o.set(_j, "Constraint.fk_upd_action", _p?.fk_upd_action);
    _o.set(_j, "Constraint.fk_del_action", _p?.fk_del_action);
    _o.set(_j, "Constraint.fk_del_set_cols", _p?.fk_del_set_cols);
    _o.set(_j, "Constraint.old_conpfeqop", _p?.old_conpfeqop);
    _o.set(_j, "Constraint.old_pktable_oid", _p?.old_pktable_oid);
    _o.set(_j, "Constraint.skip_validation", _p?.skip_validation);
    _o.set(_j, "Constraint.initially_valid", _p?.initially_valid);
    return _j;
  },
  createTableSpaceStmt(_p?: CreateTableSpaceStmt["CreateTableSpaceStmt"]): CreateTableSpaceStmt {
    const _j = ({
      CreateTableSpaceStmt: {}
    } as CreateTableSpaceStmt);
    _o.set(_j, "CreateTableSpaceStmt.tablespacename", _p?.tablespacename);
    _o.set(_j, "CreateTableSpaceStmt.owner", _p?.owner);
    _o.set(_j, "CreateTableSpaceStmt.location", _p?.location);
    _o.set(_j, "CreateTableSpaceStmt.options", _p?.options);
    return _j;
  },
  dropTableSpaceStmt(_p?: DropTableSpaceStmt["DropTableSpaceStmt"]): DropTableSpaceStmt {
    const _j = ({
      DropTableSpaceStmt: {}
    } as DropTableSpaceStmt);
    _o.set(_j, "DropTableSpaceStmt.tablespacename", _p?.tablespacename);
    _o.set(_j, "DropTableSpaceStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  alterTableSpaceOptionsStmt(_p?: AlterTableSpaceOptionsStmt["AlterTableSpaceOptionsStmt"]): AlterTableSpaceOptionsStmt {
    const _j = ({
      AlterTableSpaceOptionsStmt: {}
    } as AlterTableSpaceOptionsStmt);
    _o.set(_j, "AlterTableSpaceOptionsStmt.tablespacename", _p?.tablespacename);
    _o.set(_j, "AlterTableSpaceOptionsStmt.options", _p?.options);
    _o.set(_j, "AlterTableSpaceOptionsStmt.isReset", _p?.isReset);
    return _j;
  },
  alterTableMoveAllStmt(_p?: AlterTableMoveAllStmt["AlterTableMoveAllStmt"]): AlterTableMoveAllStmt {
    const _j = ({
      AlterTableMoveAllStmt: {}
    } as AlterTableMoveAllStmt);
    _o.set(_j, "AlterTableMoveAllStmt.orig_tablespacename", _p?.orig_tablespacename);
    _o.set(_j, "AlterTableMoveAllStmt.objtype", _p?.objtype);
    _o.set(_j, "AlterTableMoveAllStmt.roles", _p?.roles);
    _o.set(_j, "AlterTableMoveAllStmt.new_tablespacename", _p?.new_tablespacename);
    _o.set(_j, "AlterTableMoveAllStmt.nowait", _p?.nowait);
    return _j;
  },
  createExtensionStmt(_p?: CreateExtensionStmt["CreateExtensionStmt"]): CreateExtensionStmt {
    const _j = ({
      CreateExtensionStmt: {}
    } as CreateExtensionStmt);
    _o.set(_j, "CreateExtensionStmt.extname", _p?.extname);
    _o.set(_j, "CreateExtensionStmt.if_not_exists", _p?.if_not_exists);
    _o.set(_j, "CreateExtensionStmt.options", _p?.options);
    return _j;
  },
  alterExtensionStmt(_p?: AlterExtensionStmt["AlterExtensionStmt"]): AlterExtensionStmt {
    const _j = ({
      AlterExtensionStmt: {}
    } as AlterExtensionStmt);
    _o.set(_j, "AlterExtensionStmt.extname", _p?.extname);
    _o.set(_j, "AlterExtensionStmt.options", _p?.options);
    return _j;
  },
  alterExtensionContentsStmt(_p?: AlterExtensionContentsStmt["AlterExtensionContentsStmt"]): AlterExtensionContentsStmt {
    const _j = ({
      AlterExtensionContentsStmt: {}
    } as AlterExtensionContentsStmt);
    _o.set(_j, "AlterExtensionContentsStmt.extname", _p?.extname);
    _o.set(_j, "AlterExtensionContentsStmt.action", _p?.action);
    _o.set(_j, "AlterExtensionContentsStmt.objtype", _p?.objtype);
    _o.set(_j, "AlterExtensionContentsStmt.object", _p?.object);
    return _j;
  },
  createFdwStmt(_p?: CreateFdwStmt["CreateFdwStmt"]): CreateFdwStmt {
    const _j = ({
      CreateFdwStmt: {}
    } as CreateFdwStmt);
    _o.set(_j, "CreateFdwStmt.fdwname", _p?.fdwname);
    _o.set(_j, "CreateFdwStmt.func_options", _p?.func_options);
    _o.set(_j, "CreateFdwStmt.options", _p?.options);
    return _j;
  },
  alterFdwStmt(_p?: AlterFdwStmt["AlterFdwStmt"]): AlterFdwStmt {
    const _j = ({
      AlterFdwStmt: {}
    } as AlterFdwStmt);
    _o.set(_j, "AlterFdwStmt.fdwname", _p?.fdwname);
    _o.set(_j, "AlterFdwStmt.func_options", _p?.func_options);
    _o.set(_j, "AlterFdwStmt.options", _p?.options);
    return _j;
  },
  createForeignServerStmt(_p?: CreateForeignServerStmt["CreateForeignServerStmt"]): CreateForeignServerStmt {
    const _j = ({
      CreateForeignServerStmt: {}
    } as CreateForeignServerStmt);
    _o.set(_j, "CreateForeignServerStmt.servername", _p?.servername);
    _o.set(_j, "CreateForeignServerStmt.servertype", _p?.servertype);
    _o.set(_j, "CreateForeignServerStmt.version", _p?.version);
    _o.set(_j, "CreateForeignServerStmt.fdwname", _p?.fdwname);
    _o.set(_j, "CreateForeignServerStmt.if_not_exists", _p?.if_not_exists);
    _o.set(_j, "CreateForeignServerStmt.options", _p?.options);
    return _j;
  },
  alterForeignServerStmt(_p?: AlterForeignServerStmt["AlterForeignServerStmt"]): AlterForeignServerStmt {
    const _j = ({
      AlterForeignServerStmt: {}
    } as AlterForeignServerStmt);
    _o.set(_j, "AlterForeignServerStmt.servername", _p?.servername);
    _o.set(_j, "AlterForeignServerStmt.version", _p?.version);
    _o.set(_j, "AlterForeignServerStmt.options", _p?.options);
    _o.set(_j, "AlterForeignServerStmt.has_version", _p?.has_version);
    return _j;
  },
  createForeignTableStmt(_p?: CreateForeignTableStmt["CreateForeignTableStmt"]): CreateForeignTableStmt {
    const _j = ({
      CreateForeignTableStmt: {}
    } as CreateForeignTableStmt);
    _o.set(_j, "CreateForeignTableStmt.base", _p?.base);
    _o.set(_j, "CreateForeignTableStmt.servername", _p?.servername);
    _o.set(_j, "CreateForeignTableStmt.options", _p?.options);
    return _j;
  },
  createUserMappingStmt(_p?: CreateUserMappingStmt["CreateUserMappingStmt"]): CreateUserMappingStmt {
    const _j = ({
      CreateUserMappingStmt: {}
    } as CreateUserMappingStmt);
    _o.set(_j, "CreateUserMappingStmt.user", _p?.user);
    _o.set(_j, "CreateUserMappingStmt.servername", _p?.servername);
    _o.set(_j, "CreateUserMappingStmt.if_not_exists", _p?.if_not_exists);
    _o.set(_j, "CreateUserMappingStmt.options", _p?.options);
    return _j;
  },
  alterUserMappingStmt(_p?: AlterUserMappingStmt["AlterUserMappingStmt"]): AlterUserMappingStmt {
    const _j = ({
      AlterUserMappingStmt: {}
    } as AlterUserMappingStmt);
    _o.set(_j, "AlterUserMappingStmt.user", _p?.user);
    _o.set(_j, "AlterUserMappingStmt.servername", _p?.servername);
    _o.set(_j, "AlterUserMappingStmt.options", _p?.options);
    return _j;
  },
  dropUserMappingStmt(_p?: DropUserMappingStmt["DropUserMappingStmt"]): DropUserMappingStmt {
    const _j = ({
      DropUserMappingStmt: {}
    } as DropUserMappingStmt);
    _o.set(_j, "DropUserMappingStmt.user", _p?.user);
    _o.set(_j, "DropUserMappingStmt.servername", _p?.servername);
    _o.set(_j, "DropUserMappingStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  importForeignSchemaStmt(_p?: ImportForeignSchemaStmt["ImportForeignSchemaStmt"]): ImportForeignSchemaStmt {
    const _j = ({
      ImportForeignSchemaStmt: {}
    } as ImportForeignSchemaStmt);
    _o.set(_j, "ImportForeignSchemaStmt.server_name", _p?.server_name);
    _o.set(_j, "ImportForeignSchemaStmt.remote_schema", _p?.remote_schema);
    _o.set(_j, "ImportForeignSchemaStmt.local_schema", _p?.local_schema);
    _o.set(_j, "ImportForeignSchemaStmt.list_type", _p?.list_type);
    _o.set(_j, "ImportForeignSchemaStmt.table_list", _p?.table_list);
    _o.set(_j, "ImportForeignSchemaStmt.options", _p?.options);
    return _j;
  },
  createPolicyStmt(_p?: CreatePolicyStmt["CreatePolicyStmt"]): CreatePolicyStmt {
    const _j = ({
      CreatePolicyStmt: {}
    } as CreatePolicyStmt);
    _o.set(_j, "CreatePolicyStmt.policy_name", _p?.policy_name);
    _o.set(_j, "CreatePolicyStmt.table", _p?.table);
    _o.set(_j, "CreatePolicyStmt.cmd_name", _p?.cmd_name);
    _o.set(_j, "CreatePolicyStmt.permissive", _p?.permissive);
    _o.set(_j, "CreatePolicyStmt.roles", _p?.roles);
    _o.set(_j, "CreatePolicyStmt.qual", _p?.qual);
    _o.set(_j, "CreatePolicyStmt.with_check", _p?.with_check);
    return _j;
  },
  alterPolicyStmt(_p?: AlterPolicyStmt["AlterPolicyStmt"]): AlterPolicyStmt {
    const _j = ({
      AlterPolicyStmt: {}
    } as AlterPolicyStmt);
    _o.set(_j, "AlterPolicyStmt.policy_name", _p?.policy_name);
    _o.set(_j, "AlterPolicyStmt.table", _p?.table);
    _o.set(_j, "AlterPolicyStmt.roles", _p?.roles);
    _o.set(_j, "AlterPolicyStmt.qual", _p?.qual);
    _o.set(_j, "AlterPolicyStmt.with_check", _p?.with_check);
    return _j;
  },
  createAmStmt(_p?: CreateAmStmt["CreateAmStmt"]): CreateAmStmt {
    const _j = ({
      CreateAmStmt: {}
    } as CreateAmStmt);
    _o.set(_j, "CreateAmStmt.amname", _p?.amname);
    _o.set(_j, "CreateAmStmt.handler_name", _p?.handler_name);
    _o.set(_j, "CreateAmStmt.amtype", _p?.amtype);
    return _j;
  },
  createTrigStmt(_p?: CreateTrigStmt["CreateTrigStmt"]): CreateTrigStmt {
    const _j = ({
      CreateTrigStmt: {}
    } as CreateTrigStmt);
    _o.set(_j, "CreateTrigStmt.replace", _p?.replace);
    _o.set(_j, "CreateTrigStmt.isconstraint", _p?.isconstraint);
    _o.set(_j, "CreateTrigStmt.trigname", _p?.trigname);
    _o.set(_j, "CreateTrigStmt.relation", _p?.relation);
    _o.set(_j, "CreateTrigStmt.funcname", _p?.funcname);
    _o.set(_j, "CreateTrigStmt.args", _p?.args);
    _o.set(_j, "CreateTrigStmt.row", _p?.row);
    _o.set(_j, "CreateTrigStmt.timing", _p?.timing);
    _o.set(_j, "CreateTrigStmt.events", _p?.events);
    _o.set(_j, "CreateTrigStmt.columns", _p?.columns);
    _o.set(_j, "CreateTrigStmt.whenClause", _p?.whenClause);
    _o.set(_j, "CreateTrigStmt.transitionRels", _p?.transitionRels);
    _o.set(_j, "CreateTrigStmt.deferrable", _p?.deferrable);
    _o.set(_j, "CreateTrigStmt.initdeferred", _p?.initdeferred);
    _o.set(_j, "CreateTrigStmt.constrrel", _p?.constrrel);
    return _j;
  },
  createEventTrigStmt(_p?: CreateEventTrigStmt["CreateEventTrigStmt"]): CreateEventTrigStmt {
    const _j = ({
      CreateEventTrigStmt: {}
    } as CreateEventTrigStmt);
    _o.set(_j, "CreateEventTrigStmt.trigname", _p?.trigname);
    _o.set(_j, "CreateEventTrigStmt.eventname", _p?.eventname);
    _o.set(_j, "CreateEventTrigStmt.whenclause", _p?.whenclause);
    _o.set(_j, "CreateEventTrigStmt.funcname", _p?.funcname);
    return _j;
  },
  alterEventTrigStmt(_p?: AlterEventTrigStmt["AlterEventTrigStmt"]): AlterEventTrigStmt {
    const _j = ({
      AlterEventTrigStmt: {}
    } as AlterEventTrigStmt);
    _o.set(_j, "AlterEventTrigStmt.trigname", _p?.trigname);
    _o.set(_j, "AlterEventTrigStmt.tgenabled", _p?.tgenabled);
    return _j;
  },
  createpLangStmt(_p?: CreatePLangStmt["CreatePLangStmt"]): CreatePLangStmt {
    const _j = ({
      CreatePLangStmt: {}
    } as CreatePLangStmt);
    _o.set(_j, "CreatePLangStmt.replace", _p?.replace);
    _o.set(_j, "CreatePLangStmt.plname", _p?.plname);
    _o.set(_j, "CreatePLangStmt.plhandler", _p?.plhandler);
    _o.set(_j, "CreatePLangStmt.plinline", _p?.plinline);
    _o.set(_j, "CreatePLangStmt.plvalidator", _p?.plvalidator);
    _o.set(_j, "CreatePLangStmt.pltrusted", _p?.pltrusted);
    return _j;
  },
  createRoleStmt(_p?: CreateRoleStmt["CreateRoleStmt"]): CreateRoleStmt {
    const _j = ({
      CreateRoleStmt: {}
    } as CreateRoleStmt);
    _o.set(_j, "CreateRoleStmt.stmt_type", _p?.stmt_type);
    _o.set(_j, "CreateRoleStmt.role", _p?.role);
    _o.set(_j, "CreateRoleStmt.options", _p?.options);
    return _j;
  },
  alterRoleStmt(_p?: AlterRoleStmt["AlterRoleStmt"]): AlterRoleStmt {
    const _j = ({
      AlterRoleStmt: {}
    } as AlterRoleStmt);
    _o.set(_j, "AlterRoleStmt.role", _p?.role);
    _o.set(_j, "AlterRoleStmt.options", _p?.options);
    _o.set(_j, "AlterRoleStmt.action", _p?.action);
    return _j;
  },
  alterRoleSetStmt(_p?: AlterRoleSetStmt["AlterRoleSetStmt"]): AlterRoleSetStmt {
    const _j = ({
      AlterRoleSetStmt: {}
    } as AlterRoleSetStmt);
    _o.set(_j, "AlterRoleSetStmt.role", _p?.role);
    _o.set(_j, "AlterRoleSetStmt.database", _p?.database);
    _o.set(_j, "AlterRoleSetStmt.setstmt", _p?.setstmt);
    return _j;
  },
  dropRoleStmt(_p?: DropRoleStmt["DropRoleStmt"]): DropRoleStmt {
    const _j = ({
      DropRoleStmt: {}
    } as DropRoleStmt);
    _o.set(_j, "DropRoleStmt.roles", _p?.roles);
    _o.set(_j, "DropRoleStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  createSeqStmt(_p?: CreateSeqStmt["CreateSeqStmt"]): CreateSeqStmt {
    const _j = ({
      CreateSeqStmt: {}
    } as CreateSeqStmt);
    _o.set(_j, "CreateSeqStmt.sequence", _p?.sequence);
    _o.set(_j, "CreateSeqStmt.options", _p?.options);
    _o.set(_j, "CreateSeqStmt.ownerId", _p?.ownerId);
    _o.set(_j, "CreateSeqStmt.for_identity", _p?.for_identity);
    _o.set(_j, "CreateSeqStmt.if_not_exists", _p?.if_not_exists);
    return _j;
  },
  alterSeqStmt(_p?: AlterSeqStmt["AlterSeqStmt"]): AlterSeqStmt {
    const _j = ({
      AlterSeqStmt: {}
    } as AlterSeqStmt);
    _o.set(_j, "AlterSeqStmt.sequence", _p?.sequence);
    _o.set(_j, "AlterSeqStmt.options", _p?.options);
    _o.set(_j, "AlterSeqStmt.for_identity", _p?.for_identity);
    _o.set(_j, "AlterSeqStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  defineStmt(_p?: DefineStmt["DefineStmt"]): DefineStmt {
    const _j = ({
      DefineStmt: {}
    } as DefineStmt);
    _o.set(_j, "DefineStmt.kind", _p?.kind);
    _o.set(_j, "DefineStmt.oldstyle", _p?.oldstyle);
    _o.set(_j, "DefineStmt.defnames", _p?.defnames);
    _o.set(_j, "DefineStmt.args", _p?.args);
    _o.set(_j, "DefineStmt.definition", _p?.definition);
    _o.set(_j, "DefineStmt.if_not_exists", _p?.if_not_exists);
    _o.set(_j, "DefineStmt.replace", _p?.replace);
    return _j;
  },
  createDomainStmt(_p?: CreateDomainStmt["CreateDomainStmt"]): CreateDomainStmt {
    const _j = ({
      CreateDomainStmt: {}
    } as CreateDomainStmt);
    _o.set(_j, "CreateDomainStmt.domainname", _p?.domainname);
    _o.set(_j, "CreateDomainStmt.typeName", _p?.typeName);
    _o.set(_j, "CreateDomainStmt.collClause", _p?.collClause);
    _o.set(_j, "CreateDomainStmt.constraints", _p?.constraints);
    return _j;
  },
  createOpClassStmt(_p?: CreateOpClassStmt["CreateOpClassStmt"]): CreateOpClassStmt {
    const _j = ({
      CreateOpClassStmt: {}
    } as CreateOpClassStmt);
    _o.set(_j, "CreateOpClassStmt.opclassname", _p?.opclassname);
    _o.set(_j, "CreateOpClassStmt.opfamilyname", _p?.opfamilyname);
    _o.set(_j, "CreateOpClassStmt.amname", _p?.amname);
    _o.set(_j, "CreateOpClassStmt.datatype", _p?.datatype);
    _o.set(_j, "CreateOpClassStmt.items", _p?.items);
    _o.set(_j, "CreateOpClassStmt.isDefault", _p?.isDefault);
    return _j;
  },
  createOpClassItem(_p?: CreateOpClassItem["CreateOpClassItem"]): CreateOpClassItem {
    const _j = ({
      CreateOpClassItem: {}
    } as CreateOpClassItem);
    _o.set(_j, "CreateOpClassItem.itemtype", _p?.itemtype);
    _o.set(_j, "CreateOpClassItem.name", _p?.name);
    _o.set(_j, "CreateOpClassItem.number", _p?.number);
    _o.set(_j, "CreateOpClassItem.order_family", _p?.order_family);
    _o.set(_j, "CreateOpClassItem.class_args", _p?.class_args);
    _o.set(_j, "CreateOpClassItem.storedtype", _p?.storedtype);
    return _j;
  },
  createOpFamilyStmt(_p?: CreateOpFamilyStmt["CreateOpFamilyStmt"]): CreateOpFamilyStmt {
    const _j = ({
      CreateOpFamilyStmt: {}
    } as CreateOpFamilyStmt);
    _o.set(_j, "CreateOpFamilyStmt.opfamilyname", _p?.opfamilyname);
    _o.set(_j, "CreateOpFamilyStmt.amname", _p?.amname);
    return _j;
  },
  alterOpFamilyStmt(_p?: AlterOpFamilyStmt["AlterOpFamilyStmt"]): AlterOpFamilyStmt {
    const _j = ({
      AlterOpFamilyStmt: {}
    } as AlterOpFamilyStmt);
    _o.set(_j, "AlterOpFamilyStmt.opfamilyname", _p?.opfamilyname);
    _o.set(_j, "AlterOpFamilyStmt.amname", _p?.amname);
    _o.set(_j, "AlterOpFamilyStmt.isDrop", _p?.isDrop);
    _o.set(_j, "AlterOpFamilyStmt.items", _p?.items);
    return _j;
  },
  dropStmt(_p?: DropStmt["DropStmt"]): DropStmt {
    const _j = ({
      DropStmt: {}
    } as DropStmt);
    _o.set(_j, "DropStmt.objects", _p?.objects);
    _o.set(_j, "DropStmt.removeType", _p?.removeType);
    _o.set(_j, "DropStmt.behavior", _p?.behavior);
    _o.set(_j, "DropStmt.missing_ok", _p?.missing_ok);
    _o.set(_j, "DropStmt.concurrent", _p?.concurrent);
    return _j;
  },
  truncateStmt(_p?: TruncateStmt["TruncateStmt"]): TruncateStmt {
    const _j = ({
      TruncateStmt: {}
    } as TruncateStmt);
    _o.set(_j, "TruncateStmt.relations", _p?.relations);
    _o.set(_j, "TruncateStmt.restart_seqs", _p?.restart_seqs);
    _o.set(_j, "TruncateStmt.behavior", _p?.behavior);
    return _j;
  },
  commentStmt(_p?: CommentStmt["CommentStmt"]): CommentStmt {
    const _j = ({
      CommentStmt: {}
    } as CommentStmt);
    _o.set(_j, "CommentStmt.objtype", _p?.objtype);
    _o.set(_j, "CommentStmt.object", _p?.object);
    _o.set(_j, "CommentStmt.comment", _p?.comment);
    return _j;
  },
  secLabelStmt(_p?: SecLabelStmt["SecLabelStmt"]): SecLabelStmt {
    const _j = ({
      SecLabelStmt: {}
    } as SecLabelStmt);
    _o.set(_j, "SecLabelStmt.objtype", _p?.objtype);
    _o.set(_j, "SecLabelStmt.object", _p?.object);
    _o.set(_j, "SecLabelStmt.provider", _p?.provider);
    _o.set(_j, "SecLabelStmt.label", _p?.label);
    return _j;
  },
  declareCursorStmt(_p?: DeclareCursorStmt["DeclareCursorStmt"]): DeclareCursorStmt {
    const _j = ({
      DeclareCursorStmt: {}
    } as DeclareCursorStmt);
    _o.set(_j, "DeclareCursorStmt.portalname", _p?.portalname);
    _o.set(_j, "DeclareCursorStmt.options", _p?.options);
    _o.set(_j, "DeclareCursorStmt.query", _p?.query);
    return _j;
  },
  closePortalStmt(_p?: ClosePortalStmt["ClosePortalStmt"]): ClosePortalStmt {
    const _j = ({
      ClosePortalStmt: {}
    } as ClosePortalStmt);
    _o.set(_j, "ClosePortalStmt.portalname", _p?.portalname);
    return _j;
  },
  fetchStmt(_p?: FetchStmt["FetchStmt"]): FetchStmt {
    const _j = ({
      FetchStmt: {}
    } as FetchStmt);
    _o.set(_j, "FetchStmt.direction", _p?.direction);
    _o.set(_j, "FetchStmt.howMany", _p?.howMany);
    _o.set(_j, "FetchStmt.portalname", _p?.portalname);
    _o.set(_j, "FetchStmt.ismove", _p?.ismove);
    return _j;
  },
  indexStmt(_p?: IndexStmt["IndexStmt"]): IndexStmt {
    const _j = ({
      IndexStmt: {}
    } as IndexStmt);
    _o.set(_j, "IndexStmt.idxname", _p?.idxname);
    _o.set(_j, "IndexStmt.relation", _p?.relation);
    _o.set(_j, "IndexStmt.accessMethod", _p?.accessMethod);
    _o.set(_j, "IndexStmt.tableSpace", _p?.tableSpace);
    _o.set(_j, "IndexStmt.indexParams", _p?.indexParams);
    _o.set(_j, "IndexStmt.indexIncludingParams", _p?.indexIncludingParams);
    _o.set(_j, "IndexStmt.options", _p?.options);
    _o.set(_j, "IndexStmt.whereClause", _p?.whereClause);
    _o.set(_j, "IndexStmt.excludeOpNames", _p?.excludeOpNames);
    _o.set(_j, "IndexStmt.idxcomment", _p?.idxcomment);
    _o.set(_j, "IndexStmt.indexOid", _p?.indexOid);
    _o.set(_j, "IndexStmt.oldNumber", _p?.oldNumber);
    _o.set(_j, "IndexStmt.oldCreateSubid", _p?.oldCreateSubid);
    _o.set(_j, "IndexStmt.oldFirstRelfilelocatorSubid", _p?.oldFirstRelfilelocatorSubid);
    _o.set(_j, "IndexStmt.unique", _p?.unique);
    _o.set(_j, "IndexStmt.nulls_not_distinct", _p?.nulls_not_distinct);
    _o.set(_j, "IndexStmt.primary", _p?.primary);
    _o.set(_j, "IndexStmt.isconstraint", _p?.isconstraint);
    _o.set(_j, "IndexStmt.deferrable", _p?.deferrable);
    _o.set(_j, "IndexStmt.initdeferred", _p?.initdeferred);
    _o.set(_j, "IndexStmt.transformed", _p?.transformed);
    _o.set(_j, "IndexStmt.concurrent", _p?.concurrent);
    _o.set(_j, "IndexStmt.if_not_exists", _p?.if_not_exists);
    _o.set(_j, "IndexStmt.reset_default_tblspc", _p?.reset_default_tblspc);
    return _j;
  },
  createStatsStmt(_p?: CreateStatsStmt["CreateStatsStmt"]): CreateStatsStmt {
    const _j = ({
      CreateStatsStmt: {}
    } as CreateStatsStmt);
    _o.set(_j, "CreateStatsStmt.defnames", _p?.defnames);
    _o.set(_j, "CreateStatsStmt.stat_types", _p?.stat_types);
    _o.set(_j, "CreateStatsStmt.exprs", _p?.exprs);
    _o.set(_j, "CreateStatsStmt.relations", _p?.relations);
    _o.set(_j, "CreateStatsStmt.stxcomment", _p?.stxcomment);
    _o.set(_j, "CreateStatsStmt.transformed", _p?.transformed);
    _o.set(_j, "CreateStatsStmt.if_not_exists", _p?.if_not_exists);
    return _j;
  },
  statsElem(_p?: StatsElem["StatsElem"]): StatsElem {
    const _j = ({
      StatsElem: {}
    } as StatsElem);
    _o.set(_j, "StatsElem.name", _p?.name);
    _o.set(_j, "StatsElem.expr", _p?.expr);
    return _j;
  },
  alterStatsStmt(_p?: AlterStatsStmt["AlterStatsStmt"]): AlterStatsStmt {
    const _j = ({
      AlterStatsStmt: {}
    } as AlterStatsStmt);
    _o.set(_j, "AlterStatsStmt.defnames", _p?.defnames);
    _o.set(_j, "AlterStatsStmt.stxstattarget", _p?.stxstattarget);
    _o.set(_j, "AlterStatsStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  createFunctionStmt(_p?: CreateFunctionStmt["CreateFunctionStmt"]): CreateFunctionStmt {
    const _j = ({
      CreateFunctionStmt: {}
    } as CreateFunctionStmt);
    _o.set(_j, "CreateFunctionStmt.is_procedure", _p?.is_procedure);
    _o.set(_j, "CreateFunctionStmt.replace", _p?.replace);
    _o.set(_j, "CreateFunctionStmt.funcname", _p?.funcname);
    _o.set(_j, "CreateFunctionStmt.parameters", _p?.parameters);
    _o.set(_j, "CreateFunctionStmt.returnType", _p?.returnType);
    _o.set(_j, "CreateFunctionStmt.options", _p?.options);
    _o.set(_j, "CreateFunctionStmt.sql_body", _p?.sql_body);
    return _j;
  },
  functionParameter(_p?: FunctionParameter["FunctionParameter"]): FunctionParameter {
    const _j = ({
      FunctionParameter: {}
    } as FunctionParameter);
    _o.set(_j, "FunctionParameter.name", _p?.name);
    _o.set(_j, "FunctionParameter.argType", _p?.argType);
    _o.set(_j, "FunctionParameter.mode", _p?.mode);
    _o.set(_j, "FunctionParameter.defexpr", _p?.defexpr);
    return _j;
  },
  alterFunctionStmt(_p?: AlterFunctionStmt["AlterFunctionStmt"]): AlterFunctionStmt {
    const _j = ({
      AlterFunctionStmt: {}
    } as AlterFunctionStmt);
    _o.set(_j, "AlterFunctionStmt.objtype", _p?.objtype);
    _o.set(_j, "AlterFunctionStmt.func", _p?.func);
    _o.set(_j, "AlterFunctionStmt.actions", _p?.actions);
    return _j;
  },
  doStmt(_p?: DoStmt["DoStmt"]): DoStmt {
    const _j = ({
      DoStmt: {}
    } as DoStmt);
    _o.set(_j, "DoStmt.args", _p?.args);
    return _j;
  },
  inlineCodeBlock(_p?: InlineCodeBlock["InlineCodeBlock"]): InlineCodeBlock {
    const _j = ({
      InlineCodeBlock: {}
    } as InlineCodeBlock);
    _o.set(_j, "InlineCodeBlock.source_text", _p?.source_text);
    _o.set(_j, "InlineCodeBlock.langOid", _p?.langOid);
    _o.set(_j, "InlineCodeBlock.langIsTrusted", _p?.langIsTrusted);
    _o.set(_j, "InlineCodeBlock.atomic", _p?.atomic);
    return _j;
  },
  callStmt(_p?: CallStmt["CallStmt"]): CallStmt {
    const _j = ({
      CallStmt: {}
    } as CallStmt);
    _o.set(_j, "CallStmt.funccall", _p?.funccall);
    _o.set(_j, "CallStmt.funcexpr", _p?.funcexpr);
    _o.set(_j, "CallStmt.outargs", _p?.outargs);
    return _j;
  },
  callContext(_p?: CallContext["CallContext"]): CallContext {
    const _j = ({
      CallContext: {}
    } as CallContext);
    _o.set(_j, "CallContext.atomic", _p?.atomic);
    return _j;
  },
  renameStmt(_p?: RenameStmt["RenameStmt"]): RenameStmt {
    const _j = ({
      RenameStmt: {}
    } as RenameStmt);
    _o.set(_j, "RenameStmt.renameType", _p?.renameType);
    _o.set(_j, "RenameStmt.relationType", _p?.relationType);
    _o.set(_j, "RenameStmt.relation", _p?.relation);
    _o.set(_j, "RenameStmt.object", _p?.object);
    _o.set(_j, "RenameStmt.subname", _p?.subname);
    _o.set(_j, "RenameStmt.newname", _p?.newname);
    _o.set(_j, "RenameStmt.behavior", _p?.behavior);
    _o.set(_j, "RenameStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  alterObjectDependsStmt(_p?: AlterObjectDependsStmt["AlterObjectDependsStmt"]): AlterObjectDependsStmt {
    const _j = ({
      AlterObjectDependsStmt: {}
    } as AlterObjectDependsStmt);
    _o.set(_j, "AlterObjectDependsStmt.objectType", _p?.objectType);
    _o.set(_j, "AlterObjectDependsStmt.relation", _p?.relation);
    _o.set(_j, "AlterObjectDependsStmt.object", _p?.object);
    _o.set(_j, "AlterObjectDependsStmt.extname", _p?.extname);
    _o.set(_j, "AlterObjectDependsStmt.remove", _p?.remove);
    return _j;
  },
  alterObjectSchemaStmt(_p?: AlterObjectSchemaStmt["AlterObjectSchemaStmt"]): AlterObjectSchemaStmt {
    const _j = ({
      AlterObjectSchemaStmt: {}
    } as AlterObjectSchemaStmt);
    _o.set(_j, "AlterObjectSchemaStmt.objectType", _p?.objectType);
    _o.set(_j, "AlterObjectSchemaStmt.relation", _p?.relation);
    _o.set(_j, "AlterObjectSchemaStmt.object", _p?.object);
    _o.set(_j, "AlterObjectSchemaStmt.newschema", _p?.newschema);
    _o.set(_j, "AlterObjectSchemaStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  alterOwnerStmt(_p?: AlterOwnerStmt["AlterOwnerStmt"]): AlterOwnerStmt {
    const _j = ({
      AlterOwnerStmt: {}
    } as AlterOwnerStmt);
    _o.set(_j, "AlterOwnerStmt.objectType", _p?.objectType);
    _o.set(_j, "AlterOwnerStmt.relation", _p?.relation);
    _o.set(_j, "AlterOwnerStmt.object", _p?.object);
    _o.set(_j, "AlterOwnerStmt.newowner", _p?.newowner);
    return _j;
  },
  alterOperatorStmt(_p?: AlterOperatorStmt["AlterOperatorStmt"]): AlterOperatorStmt {
    const _j = ({
      AlterOperatorStmt: {}
    } as AlterOperatorStmt);
    _o.set(_j, "AlterOperatorStmt.opername", _p?.opername);
    _o.set(_j, "AlterOperatorStmt.options", _p?.options);
    return _j;
  },
  alterTypeStmt(_p?: AlterTypeStmt["AlterTypeStmt"]): AlterTypeStmt {
    const _j = ({
      AlterTypeStmt: {}
    } as AlterTypeStmt);
    _o.set(_j, "AlterTypeStmt.typeName", _p?.typeName);
    _o.set(_j, "AlterTypeStmt.options", _p?.options);
    return _j;
  },
  ruleStmt(_p?: RuleStmt["RuleStmt"]): RuleStmt {
    const _j = ({
      RuleStmt: {}
    } as RuleStmt);
    _o.set(_j, "RuleStmt.relation", _p?.relation);
    _o.set(_j, "RuleStmt.rulename", _p?.rulename);
    _o.set(_j, "RuleStmt.whereClause", _p?.whereClause);
    _o.set(_j, "RuleStmt.event", _p?.event);
    _o.set(_j, "RuleStmt.instead", _p?.instead);
    _o.set(_j, "RuleStmt.actions", _p?.actions);
    _o.set(_j, "RuleStmt.replace", _p?.replace);
    return _j;
  },
  notifyStmt(_p?: NotifyStmt["NotifyStmt"]): NotifyStmt {
    const _j = ({
      NotifyStmt: {}
    } as NotifyStmt);
    _o.set(_j, "NotifyStmt.conditionname", _p?.conditionname);
    _o.set(_j, "NotifyStmt.payload", _p?.payload);
    return _j;
  },
  listenStmt(_p?: ListenStmt["ListenStmt"]): ListenStmt {
    const _j = ({
      ListenStmt: {}
    } as ListenStmt);
    _o.set(_j, "ListenStmt.conditionname", _p?.conditionname);
    return _j;
  },
  unlistenStmt(_p?: UnlistenStmt["UnlistenStmt"]): UnlistenStmt {
    const _j = ({
      UnlistenStmt: {}
    } as UnlistenStmt);
    _o.set(_j, "UnlistenStmt.conditionname", _p?.conditionname);
    return _j;
  },
  transactionStmt(_p?: TransactionStmt["TransactionStmt"]): TransactionStmt {
    const _j = ({
      TransactionStmt: {}
    } as TransactionStmt);
    _o.set(_j, "TransactionStmt.kind", _p?.kind);
    _o.set(_j, "TransactionStmt.options", _p?.options);
    _o.set(_j, "TransactionStmt.savepoint_name", _p?.savepoint_name);
    _o.set(_j, "TransactionStmt.gid", _p?.gid);
    _o.set(_j, "TransactionStmt.chain", _p?.chain);
    return _j;
  },
  compositeTypeStmt(_p?: CompositeTypeStmt["CompositeTypeStmt"]): CompositeTypeStmt {
    const _j = ({
      CompositeTypeStmt: {}
    } as CompositeTypeStmt);
    _o.set(_j, "CompositeTypeStmt.typevar", _p?.typevar);
    _o.set(_j, "CompositeTypeStmt.coldeflist", _p?.coldeflist);
    return _j;
  },
  createEnumStmt(_p?: CreateEnumStmt["CreateEnumStmt"]): CreateEnumStmt {
    const _j = ({
      CreateEnumStmt: {}
    } as CreateEnumStmt);
    _o.set(_j, "CreateEnumStmt.typeName", _p?.typeName);
    _o.set(_j, "CreateEnumStmt.vals", _p?.vals);
    return _j;
  },
  createRangeStmt(_p?: CreateRangeStmt["CreateRangeStmt"]): CreateRangeStmt {
    const _j = ({
      CreateRangeStmt: {}
    } as CreateRangeStmt);
    _o.set(_j, "CreateRangeStmt.typeName", _p?.typeName);
    _o.set(_j, "CreateRangeStmt.params", _p?.params);
    return _j;
  },
  alterEnumStmt(_p?: AlterEnumStmt["AlterEnumStmt"]): AlterEnumStmt {
    const _j = ({
      AlterEnumStmt: {}
    } as AlterEnumStmt);
    _o.set(_j, "AlterEnumStmt.typeName", _p?.typeName);
    _o.set(_j, "AlterEnumStmt.oldVal", _p?.oldVal);
    _o.set(_j, "AlterEnumStmt.newVal", _p?.newVal);
    _o.set(_j, "AlterEnumStmt.newValNeighbor", _p?.newValNeighbor);
    _o.set(_j, "AlterEnumStmt.newValIsAfter", _p?.newValIsAfter);
    _o.set(_j, "AlterEnumStmt.skipIfNewValExists", _p?.skipIfNewValExists);
    return _j;
  },
  viewStmt(_p?: ViewStmt["ViewStmt"]): ViewStmt {
    const _j = ({
      ViewStmt: {}
    } as ViewStmt);
    _o.set(_j, "ViewStmt.view", _p?.view);
    _o.set(_j, "ViewStmt.aliases", _p?.aliases);
    _o.set(_j, "ViewStmt.query", _p?.query);
    _o.set(_j, "ViewStmt.replace", _p?.replace);
    _o.set(_j, "ViewStmt.options", _p?.options);
    _o.set(_j, "ViewStmt.withCheckOption", _p?.withCheckOption);
    return _j;
  },
  loadStmt(_p?: LoadStmt["LoadStmt"]): LoadStmt {
    const _j = ({
      LoadStmt: {}
    } as LoadStmt);
    _o.set(_j, "LoadStmt.filename", _p?.filename);
    return _j;
  },
  createdbStmt(_p?: CreatedbStmt["CreatedbStmt"]): CreatedbStmt {
    const _j = ({
      CreatedbStmt: {}
    } as CreatedbStmt);
    _o.set(_j, "CreatedbStmt.dbname", _p?.dbname);
    _o.set(_j, "CreatedbStmt.options", _p?.options);
    return _j;
  },
  alterDatabaseStmt(_p?: AlterDatabaseStmt["AlterDatabaseStmt"]): AlterDatabaseStmt {
    const _j = ({
      AlterDatabaseStmt: {}
    } as AlterDatabaseStmt);
    _o.set(_j, "AlterDatabaseStmt.dbname", _p?.dbname);
    _o.set(_j, "AlterDatabaseStmt.options", _p?.options);
    return _j;
  },
  alterDatabaseRefreshCollStmt(_p?: AlterDatabaseRefreshCollStmt["AlterDatabaseRefreshCollStmt"]): AlterDatabaseRefreshCollStmt {
    const _j = ({
      AlterDatabaseRefreshCollStmt: {}
    } as AlterDatabaseRefreshCollStmt);
    _o.set(_j, "AlterDatabaseRefreshCollStmt.dbname", _p?.dbname);
    return _j;
  },
  alterDatabaseSetStmt(_p?: AlterDatabaseSetStmt["AlterDatabaseSetStmt"]): AlterDatabaseSetStmt {
    const _j = ({
      AlterDatabaseSetStmt: {}
    } as AlterDatabaseSetStmt);
    _o.set(_j, "AlterDatabaseSetStmt.dbname", _p?.dbname);
    _o.set(_j, "AlterDatabaseSetStmt.setstmt", _p?.setstmt);
    return _j;
  },
  dropdbStmt(_p?: DropdbStmt["DropdbStmt"]): DropdbStmt {
    const _j = ({
      DropdbStmt: {}
    } as DropdbStmt);
    _o.set(_j, "DropdbStmt.dbname", _p?.dbname);
    _o.set(_j, "DropdbStmt.missing_ok", _p?.missing_ok);
    _o.set(_j, "DropdbStmt.options", _p?.options);
    return _j;
  },
  alterSystemStmt(_p?: AlterSystemStmt["AlterSystemStmt"]): AlterSystemStmt {
    const _j = ({
      AlterSystemStmt: {}
    } as AlterSystemStmt);
    _o.set(_j, "AlterSystemStmt.setstmt", _p?.setstmt);
    return _j;
  },
  clusterStmt(_p?: ClusterStmt["ClusterStmt"]): ClusterStmt {
    const _j = ({
      ClusterStmt: {}
    } as ClusterStmt);
    _o.set(_j, "ClusterStmt.relation", _p?.relation);
    _o.set(_j, "ClusterStmt.indexname", _p?.indexname);
    _o.set(_j, "ClusterStmt.params", _p?.params);
    return _j;
  },
  vacuumStmt(_p?: VacuumStmt["VacuumStmt"]): VacuumStmt {
    const _j = ({
      VacuumStmt: {}
    } as VacuumStmt);
    _o.set(_j, "VacuumStmt.options", _p?.options);
    _o.set(_j, "VacuumStmt.rels", _p?.rels);
    _o.set(_j, "VacuumStmt.is_vacuumcmd", _p?.is_vacuumcmd);
    return _j;
  },
  vacuumRelation(_p?: VacuumRelation["VacuumRelation"]): VacuumRelation {
    const _j = ({
      VacuumRelation: {}
    } as VacuumRelation);
    _o.set(_j, "VacuumRelation.relation", _p?.relation);
    _o.set(_j, "VacuumRelation.oid", _p?.oid);
    _o.set(_j, "VacuumRelation.va_cols", _p?.va_cols);
    return _j;
  },
  explainStmt(_p?: ExplainStmt["ExplainStmt"]): ExplainStmt {
    const _j = ({
      ExplainStmt: {}
    } as ExplainStmt);
    _o.set(_j, "ExplainStmt.query", _p?.query);
    _o.set(_j, "ExplainStmt.options", _p?.options);
    return _j;
  },
  createTableAsStmt(_p?: CreateTableAsStmt["CreateTableAsStmt"]): CreateTableAsStmt {
    const _j = ({
      CreateTableAsStmt: {}
    } as CreateTableAsStmt);
    _o.set(_j, "CreateTableAsStmt.query", _p?.query);
    _o.set(_j, "CreateTableAsStmt.into", _p?.into);
    _o.set(_j, "CreateTableAsStmt.objtype", _p?.objtype);
    _o.set(_j, "CreateTableAsStmt.is_select_into", _p?.is_select_into);
    _o.set(_j, "CreateTableAsStmt.if_not_exists", _p?.if_not_exists);
    return _j;
  },
  refreshMatViewStmt(_p?: RefreshMatViewStmt["RefreshMatViewStmt"]): RefreshMatViewStmt {
    const _j = ({
      RefreshMatViewStmt: {}
    } as RefreshMatViewStmt);
    _o.set(_j, "RefreshMatViewStmt.concurrent", _p?.concurrent);
    _o.set(_j, "RefreshMatViewStmt.skipData", _p?.skipData);
    _o.set(_j, "RefreshMatViewStmt.relation", _p?.relation);
    return _j;
  },
  checkPointStmt(_p?: CheckPointStmt["CheckPointStmt"]): CheckPointStmt {
    const _j = ({
      CheckPointStmt: {}
    } as CheckPointStmt);
    return _j;
  },
  discardStmt(_p?: DiscardStmt["DiscardStmt"]): DiscardStmt {
    const _j = ({
      DiscardStmt: {}
    } as DiscardStmt);
    _o.set(_j, "DiscardStmt.target", _p?.target);
    return _j;
  },
  lockStmt(_p?: LockStmt["LockStmt"]): LockStmt {
    const _j = ({
      LockStmt: {}
    } as LockStmt);
    _o.set(_j, "LockStmt.relations", _p?.relations);
    _o.set(_j, "LockStmt.mode", _p?.mode);
    _o.set(_j, "LockStmt.nowait", _p?.nowait);
    return _j;
  },
  constraintsSetStmt(_p?: ConstraintsSetStmt["ConstraintsSetStmt"]): ConstraintsSetStmt {
    const _j = ({
      ConstraintsSetStmt: {}
    } as ConstraintsSetStmt);
    _o.set(_j, "ConstraintsSetStmt.constraints", _p?.constraints);
    _o.set(_j, "ConstraintsSetStmt.deferred", _p?.deferred);
    return _j;
  },
  reindexStmt(_p?: ReindexStmt["ReindexStmt"]): ReindexStmt {
    const _j = ({
      ReindexStmt: {}
    } as ReindexStmt);
    _o.set(_j, "ReindexStmt.kind", _p?.kind);
    _o.set(_j, "ReindexStmt.relation", _p?.relation);
    _o.set(_j, "ReindexStmt.name", _p?.name);
    _o.set(_j, "ReindexStmt.params", _p?.params);
    return _j;
  },
  createConversionStmt(_p?: CreateConversionStmt["CreateConversionStmt"]): CreateConversionStmt {
    const _j = ({
      CreateConversionStmt: {}
    } as CreateConversionStmt);
    _o.set(_j, "CreateConversionStmt.conversion_name", _p?.conversion_name);
    _o.set(_j, "CreateConversionStmt.for_encoding_name", _p?.for_encoding_name);
    _o.set(_j, "CreateConversionStmt.to_encoding_name", _p?.to_encoding_name);
    _o.set(_j, "CreateConversionStmt.func_name", _p?.func_name);
    _o.set(_j, "CreateConversionStmt.def", _p?.def);
    return _j;
  },
  createCastStmt(_p?: CreateCastStmt["CreateCastStmt"]): CreateCastStmt {
    const _j = ({
      CreateCastStmt: {}
    } as CreateCastStmt);
    _o.set(_j, "CreateCastStmt.sourcetype", _p?.sourcetype);
    _o.set(_j, "CreateCastStmt.targettype", _p?.targettype);
    _o.set(_j, "CreateCastStmt.func", _p?.func);
    _o.set(_j, "CreateCastStmt.context", _p?.context);
    _o.set(_j, "CreateCastStmt.inout", _p?.inout);
    return _j;
  },
  createTransformStmt(_p?: CreateTransformStmt["CreateTransformStmt"]): CreateTransformStmt {
    const _j = ({
      CreateTransformStmt: {}
    } as CreateTransformStmt);
    _o.set(_j, "CreateTransformStmt.replace", _p?.replace);
    _o.set(_j, "CreateTransformStmt.type_name", _p?.type_name);
    _o.set(_j, "CreateTransformStmt.lang", _p?.lang);
    _o.set(_j, "CreateTransformStmt.fromsql", _p?.fromsql);
    _o.set(_j, "CreateTransformStmt.tosql", _p?.tosql);
    return _j;
  },
  prepareStmt(_p?: PrepareStmt["PrepareStmt"]): PrepareStmt {
    const _j = ({
      PrepareStmt: {}
    } as PrepareStmt);
    _o.set(_j, "PrepareStmt.name", _p?.name);
    _o.set(_j, "PrepareStmt.argtypes", _p?.argtypes);
    _o.set(_j, "PrepareStmt.query", _p?.query);
    return _j;
  },
  executeStmt(_p?: ExecuteStmt["ExecuteStmt"]): ExecuteStmt {
    const _j = ({
      ExecuteStmt: {}
    } as ExecuteStmt);
    _o.set(_j, "ExecuteStmt.name", _p?.name);
    _o.set(_j, "ExecuteStmt.params", _p?.params);
    return _j;
  },
  deallocateStmt(_p?: DeallocateStmt["DeallocateStmt"]): DeallocateStmt {
    const _j = ({
      DeallocateStmt: {}
    } as DeallocateStmt);
    _o.set(_j, "DeallocateStmt.name", _p?.name);
    return _j;
  },
  dropOwnedStmt(_p?: DropOwnedStmt["DropOwnedStmt"]): DropOwnedStmt {
    const _j = ({
      DropOwnedStmt: {}
    } as DropOwnedStmt);
    _o.set(_j, "DropOwnedStmt.roles", _p?.roles);
    _o.set(_j, "DropOwnedStmt.behavior", _p?.behavior);
    return _j;
  },
  reassignOwnedStmt(_p?: ReassignOwnedStmt["ReassignOwnedStmt"]): ReassignOwnedStmt {
    const _j = ({
      ReassignOwnedStmt: {}
    } as ReassignOwnedStmt);
    _o.set(_j, "ReassignOwnedStmt.roles", _p?.roles);
    _o.set(_j, "ReassignOwnedStmt.newrole", _p?.newrole);
    return _j;
  },
  altertsDictionaryStmt(_p?: AlterTSDictionaryStmt["AlterTSDictionaryStmt"]): AlterTSDictionaryStmt {
    const _j = ({
      AlterTSDictionaryStmt: {}
    } as AlterTSDictionaryStmt);
    _o.set(_j, "AlterTSDictionaryStmt.dictname", _p?.dictname);
    _o.set(_j, "AlterTSDictionaryStmt.options", _p?.options);
    return _j;
  },
  altertsConfigurationStmt(_p?: AlterTSConfigurationStmt["AlterTSConfigurationStmt"]): AlterTSConfigurationStmt {
    const _j = ({
      AlterTSConfigurationStmt: {}
    } as AlterTSConfigurationStmt);
    _o.set(_j, "AlterTSConfigurationStmt.kind", _p?.kind);
    _o.set(_j, "AlterTSConfigurationStmt.cfgname", _p?.cfgname);
    _o.set(_j, "AlterTSConfigurationStmt.tokentype", _p?.tokentype);
    _o.set(_j, "AlterTSConfigurationStmt.dicts", _p?.dicts);
    _o.set(_j, "AlterTSConfigurationStmt.override", _p?.override);
    _o.set(_j, "AlterTSConfigurationStmt.replace", _p?.replace);
    _o.set(_j, "AlterTSConfigurationStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  publicationTable(_p?: PublicationTable["PublicationTable"]): PublicationTable {
    const _j = ({
      PublicationTable: {}
    } as PublicationTable);
    _o.set(_j, "PublicationTable.relation", _p?.relation);
    _o.set(_j, "PublicationTable.whereClause", _p?.whereClause);
    _o.set(_j, "PublicationTable.columns", _p?.columns);
    return _j;
  },
  publicationObjSpec(_p?: PublicationObjSpec["PublicationObjSpec"]): PublicationObjSpec {
    const _j = ({
      PublicationObjSpec: {}
    } as PublicationObjSpec);
    _o.set(_j, "PublicationObjSpec.pubobjtype", _p?.pubobjtype);
    _o.set(_j, "PublicationObjSpec.name", _p?.name);
    _o.set(_j, "PublicationObjSpec.pubtable", _p?.pubtable);
    _o.set(_j, "PublicationObjSpec.location", _p?.location);
    return _j;
  },
  createPublicationStmt(_p?: CreatePublicationStmt["CreatePublicationStmt"]): CreatePublicationStmt {
    const _j = ({
      CreatePublicationStmt: {}
    } as CreatePublicationStmt);
    _o.set(_j, "CreatePublicationStmt.pubname", _p?.pubname);
    _o.set(_j, "CreatePublicationStmt.options", _p?.options);
    _o.set(_j, "CreatePublicationStmt.pubobjects", _p?.pubobjects);
    _o.set(_j, "CreatePublicationStmt.for_all_tables", _p?.for_all_tables);
    return _j;
  },
  alterPublicationStmt(_p?: AlterPublicationStmt["AlterPublicationStmt"]): AlterPublicationStmt {
    const _j = ({
      AlterPublicationStmt: {}
    } as AlterPublicationStmt);
    _o.set(_j, "AlterPublicationStmt.pubname", _p?.pubname);
    _o.set(_j, "AlterPublicationStmt.options", _p?.options);
    _o.set(_j, "AlterPublicationStmt.pubobjects", _p?.pubobjects);
    _o.set(_j, "AlterPublicationStmt.for_all_tables", _p?.for_all_tables);
    _o.set(_j, "AlterPublicationStmt.action", _p?.action);
    return _j;
  },
  createSubscriptionStmt(_p?: CreateSubscriptionStmt["CreateSubscriptionStmt"]): CreateSubscriptionStmt {
    const _j = ({
      CreateSubscriptionStmt: {}
    } as CreateSubscriptionStmt);
    _o.set(_j, "CreateSubscriptionStmt.subname", _p?.subname);
    _o.set(_j, "CreateSubscriptionStmt.conninfo", _p?.conninfo);
    _o.set(_j, "CreateSubscriptionStmt.publication", _p?.publication);
    _o.set(_j, "CreateSubscriptionStmt.options", _p?.options);
    return _j;
  },
  alterSubscriptionStmt(_p?: AlterSubscriptionStmt["AlterSubscriptionStmt"]): AlterSubscriptionStmt {
    const _j = ({
      AlterSubscriptionStmt: {}
    } as AlterSubscriptionStmt);
    _o.set(_j, "AlterSubscriptionStmt.kind", _p?.kind);
    _o.set(_j, "AlterSubscriptionStmt.subname", _p?.subname);
    _o.set(_j, "AlterSubscriptionStmt.conninfo", _p?.conninfo);
    _o.set(_j, "AlterSubscriptionStmt.publication", _p?.publication);
    _o.set(_j, "AlterSubscriptionStmt.options", _p?.options);
    return _j;
  },
  dropSubscriptionStmt(_p?: DropSubscriptionStmt["DropSubscriptionStmt"]): DropSubscriptionStmt {
    const _j = ({
      DropSubscriptionStmt: {}
    } as DropSubscriptionStmt);
    _o.set(_j, "DropSubscriptionStmt.subname", _p?.subname);
    _o.set(_j, "DropSubscriptionStmt.missing_ok", _p?.missing_ok);
    _o.set(_j, "DropSubscriptionStmt.behavior", _p?.behavior);
    return _j;
  },
  scanToken(_p?: ScanToken["ScanToken"]): ScanToken {
    const _j = ({
      ScanToken: {}
    } as ScanToken);
    _o.set(_j, "ScanToken.start", _p?.start);
    _o.set(_j, "ScanToken.end", _p?.end);
    _o.set(_j, "ScanToken.token", _p?.token);
    _o.set(_j, "ScanToken.keywordKind", _p?.keywordKind);
    return _j;
  }
};",
    "file": "asts.ts",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
export type EnumType = "OverridingKind" | "QuerySource" | "SortByDir" | "SortByNulls" | "SetQuantifier" | "A_Expr_Kind" | "RoleSpecType" | "TableLikeOption" | "DefElemAction" | "PartitionStrategy" | "PartitionRangeDatumKind" | "RTEKind" | "WCOKind" | "GroupingSetKind" | "CTEMaterialize" | "SetOperation" | "ObjectType" | "DropBehavior" | "AlterTableType" | "GrantTargetType" | "VariableSetKind" | "ConstrType" | "ImportForeignSchemaType" | "RoleStmtType" | "FetchDirection" | "FunctionParameterMode" | "TransactionStmtKind" | "ViewCheckOption" | "DiscardMode" | "ReindexObjectType" | "AlterTSConfigType" | "PublicationObjSpecType" | "AlterPublicationAction" | "AlterSubscriptionType" | "OnCommitAction" | "ParamKind" | "CoercionContext" | "CoercionForm" | "BoolExprType" | "SubLinkType" | "RowCompareType" | "MinMaxOp" | "SQLValueFunctionOp" | "XmlExprOp" | "XmlOptionType" | "JsonEncoding" | "JsonFormatType" | "JsonConstructorType" | "JsonValueType" | "NullTestType" | "BoolTestType" | "CmdType" | "JoinType" | "AggStrategy" | "AggSplit" | "SetOpCmd" | "SetOpStrategy" | "OnConflictAction" | "LimitOption" | "LockClauseStrength" | "LockWaitPolicy" | "LockTupleMode" | "KeywordKind" | "Token";
export const getEnumValue = (enumType: EnumType, key: string | number) => {
  switch (enumType) {
    case "OverridingKind":
      {
        switch (key) {
          case "OVERRIDING_NOT_SET":
            return 0;
          case "OVERRIDING_USER_VALUE":
            return 1;
          case "OVERRIDING_SYSTEM_VALUE":
            return 2;
          case 0:
            return "OVERRIDING_NOT_SET";
          case 1:
            return "OVERRIDING_USER_VALUE";
          case 2:
            return "OVERRIDING_SYSTEM_VALUE";
          default:
            throw new Error("Key not recognized in enum OverridingKind");
        }
      }
    case "QuerySource":
      {
        switch (key) {
          case "QSRC_ORIGINAL":
            return 0;
          case "QSRC_PARSER":
            return 1;
          case "QSRC_INSTEAD_RULE":
            return 2;
          case "QSRC_QUAL_INSTEAD_RULE":
            return 3;
          case "QSRC_NON_INSTEAD_RULE":
            return 4;
          case 0:
            return "QSRC_ORIGINAL";
          case 1:
            return "QSRC_PARSER";
          case 2:
            return "QSRC_INSTEAD_RULE";
          case 3:
            return "QSRC_QUAL_INSTEAD_RULE";
          case 4:
            return "QSRC_NON_INSTEAD_RULE";
          default:
            throw new Error("Key not recognized in enum QuerySource");
        }
      }
    case "SortByDir":
      {
        switch (key) {
          case "SORTBY_DEFAULT":
            return 0;
          case "SORTBY_ASC":
            return 1;
          case "SORTBY_DESC":
            return 2;
          case "SORTBY_USING":
            return 3;
          case 0:
            return "SORTBY_DEFAULT";
          case 1:
            return "SORTBY_ASC";
          case 2:
            return "SORTBY_DESC";
          case 3:
            return "SORTBY_USING";
          default:
            throw new Error("Key not recognized in enum SortByDir");
        }
      }
    case "SortByNulls":
      {
        switch (key) {
          case "SORTBY_NULLS_DEFAULT":
            return 0;
          case "SORTBY_NULLS_FIRST":
            return 1;
          case "SORTBY_NULLS_LAST":
            return 2;
          case 0:
            return "SORTBY_NULLS_DEFAULT";
          case 1:
            return "SORTBY_NULLS_FIRST";
          case 2:
            return "SORTBY_NULLS_LAST";
          default:
            throw new Error("Key not recognized in enum SortByNulls");
        }
      }
    case "SetQuantifier":
      {
        switch (key) {
          case "SET_QUANTIFIER_DEFAULT":
            return 0;
          case "SET_QUANTIFIER_ALL":
            return 1;
          case "SET_QUANTIFIER_DISTINCT":
            return 2;
          case 0:
            return "SET_QUANTIFIER_DEFAULT";
          case 1:
            return "SET_QUANTIFIER_ALL";
          case 2:
            return "SET_QUANTIFIER_DISTINCT";
          default:
            throw new Error("Key not recognized in enum SetQuantifier");
        }
      }
    case "A_Expr_Kind":
      {
        switch (key) {
          case "AEXPR_OP":
            return 0;
          case "AEXPR_OP_ANY":
            return 1;
          case "AEXPR_OP_ALL":
            return 2;
          case "AEXPR_DISTINCT":
            return 3;
          case "AEXPR_NOT_DISTINCT":
            return 4;
          case "AEXPR_NULLIF":
            return 5;
          case "AEXPR_IN":
            return 6;
          case "AEXPR_LIKE":
            return 7;
          case "AEXPR_ILIKE":
            return 8;
          case "AEXPR_SIMILAR":
            return 9;
          case "AEXPR_BETWEEN":
            return 10;
          case "AEXPR_NOT_BETWEEN":
            return 11;
          case "AEXPR_BETWEEN_SYM":
            return 12;
          case "AEXPR_NOT_BETWEEN_SYM":
            return 13;
          case 0:
            return "AEXPR_OP";
          case 1:
            return "AEXPR_OP_ANY";
          case 2:
            return "AEXPR_OP_ALL";
          case 3:
            return "AEXPR_DISTINCT";
          case 4:
            return "AEXPR_NOT_DISTINCT";
          case 5:
            return "AEXPR_NULLIF";
          case 6:
            return "AEXPR_IN";
          case 7:
            return "AEXPR_LIKE";
          case 8:
            return "AEXPR_ILIKE";
          case 9:
            return "AEXPR_SIMILAR";
          case 10:
            return "AEXPR_BETWEEN";
          case 11:
            return "AEXPR_NOT_BETWEEN";
          case 12:
            return "AEXPR_BETWEEN_SYM";
          case 13:
            return "AEXPR_NOT_BETWEEN_SYM";
          default:
            throw new Error("Key not recognized in enum A_Expr_Kind");
        }
      }
    case "RoleSpecType":
      {
        switch (key) {
          case "ROLESPEC_CSTRING":
            return 0;
          case "ROLESPEC_CURRENT_ROLE":
            return 1;
          case "ROLESPEC_CURRENT_USER":
            return 2;
          case "ROLESPEC_SESSION_USER":
            return 3;
          case "ROLESPEC_PUBLIC":
            return 4;
          case 0:
            return "ROLESPEC_CSTRING";
          case 1:
            return "ROLESPEC_CURRENT_ROLE";
          case 2:
            return "ROLESPEC_CURRENT_USER";
          case 3:
            return "ROLESPEC_SESSION_USER";
          case 4:
            return "ROLESPEC_PUBLIC";
          default:
            throw new Error("Key not recognized in enum RoleSpecType");
        }
      }
    case "TableLikeOption":
      {
        switch (key) {
          case "CREATE_TABLE_LIKE_COMMENTS":
            return 0;
          case "CREATE_TABLE_LIKE_COMPRESSION":
            return 1;
          case "CREATE_TABLE_LIKE_CONSTRAINTS":
            return 2;
          case "CREATE_TABLE_LIKE_DEFAULTS":
            return 3;
          case "CREATE_TABLE_LIKE_GENERATED":
            return 4;
          case "CREATE_TABLE_LIKE_IDENTITY":
            return 5;
          case "CREATE_TABLE_LIKE_INDEXES":
            return 6;
          case "CREATE_TABLE_LIKE_STATISTICS":
            return 7;
          case "CREATE_TABLE_LIKE_STORAGE":
            return 8;
          case "CREATE_TABLE_LIKE_ALL":
            return 9;
          case 0:
            return "CREATE_TABLE_LIKE_COMMENTS";
          case 1:
            return "CREATE_TABLE_LIKE_COMPRESSION";
          case 2:
            return "CREATE_TABLE_LIKE_CONSTRAINTS";
          case 3:
            return "CREATE_TABLE_LIKE_DEFAULTS";
          case 4:
            return "CREATE_TABLE_LIKE_GENERATED";
          case 5:
            return "CREATE_TABLE_LIKE_IDENTITY";
          case 6:
            return "CREATE_TABLE_LIKE_INDEXES";
          case 7:
            return "CREATE_TABLE_LIKE_STATISTICS";
          case 8:
            return "CREATE_TABLE_LIKE_STORAGE";
          case 9:
            return "CREATE_TABLE_LIKE_ALL";
          default:
            throw new Error("Key not recognized in enum TableLikeOption");
        }
      }
    case "DefElemAction":
      {
        switch (key) {
          case "DEFELEM_UNSPEC":
            return 0;
          case "DEFELEM_SET":
            return 1;
          case "DEFELEM_ADD":
            return 2;
          case "DEFELEM_DROP":
            return 3;
          case 0:
            return "DEFELEM_UNSPEC";
          case 1:
            return "DEFELEM_SET";
          case 2:
            return "DEFELEM_ADD";
          case 3:
            return "DEFELEM_DROP";
          default:
            throw new Error("Key not recognized in enum DefElemAction");
        }
      }
    case "PartitionStrategy":
      {
        switch (key) {
          case "PARTITION_STRATEGY_LIST":
            return 0;
          case "PARTITION_STRATEGY_RANGE":
            return 1;
          case "PARTITION_STRATEGY_HASH":
            return 2;
          case 0:
            return "PARTITION_STRATEGY_LIST";
          case 1:
            return "PARTITION_STRATEGY_RANGE";
          case 2:
            return "PARTITION_STRATEGY_HASH";
          default:
            throw new Error("Key not recognized in enum PartitionStrategy");
        }
      }
    case "PartitionRangeDatumKind":
      {
        switch (key) {
          case "PARTITION_RANGE_DATUM_MINVALUE":
            return 0;
          case "PARTITION_RANGE_DATUM_VALUE":
            return 1;
          case "PARTITION_RANGE_DATUM_MAXVALUE":
            return 2;
          case 0:
            return "PARTITION_RANGE_DATUM_MINVALUE";
          case 1:
            return "PARTITION_RANGE_DATUM_VALUE";
          case 2:
            return "PARTITION_RANGE_DATUM_MAXVALUE";
          default:
            throw new Error("Key not recognized in enum PartitionRangeDatumKind");
        }
      }
    case "RTEKind":
      {
        switch (key) {
          case "RTE_RELATION":
            return 0;
          case "RTE_SUBQUERY":
            return 1;
          case "RTE_JOIN":
            return 2;
          case "RTE_FUNCTION":
            return 3;
          case "RTE_TABLEFUNC":
            return 4;
          case "RTE_VALUES":
            return 5;
          case "RTE_CTE":
            return 6;
          case "RTE_NAMEDTUPLESTORE":
            return 7;
          case "RTE_RESULT":
            return 8;
          case 0:
            return "RTE_RELATION";
          case 1:
            return "RTE_SUBQUERY";
          case 2:
            return "RTE_JOIN";
          case 3:
            return "RTE_FUNCTION";
          case 4:
            return "RTE_TABLEFUNC";
          case 5:
            return "RTE_VALUES";
          case 6:
            return "RTE_CTE";
          case 7:
            return "RTE_NAMEDTUPLESTORE";
          case 8:
            return "RTE_RESULT";
          default:
            throw new Error("Key not recognized in enum RTEKind");
        }
      }
    case "WCOKind":
      {
        switch (key) {
          case "WCO_VIEW_CHECK":
            return 0;
          case "WCO_RLS_INSERT_CHECK":
            return 1;
          case "WCO_RLS_UPDATE_CHECK":
            return 2;
          case "WCO_RLS_CONFLICT_CHECK":
            return 3;
          case "WCO_RLS_MERGE_UPDATE_CHECK":
            return 4;
          case "WCO_RLS_MERGE_DELETE_CHECK":
            return 5;
          case 0:
            return "WCO_VIEW_CHECK";
          case 1:
            return "WCO_RLS_INSERT_CHECK";
          case 2:
            return "WCO_RLS_UPDATE_CHECK";
          case 3:
            return "WCO_RLS_CONFLICT_CHECK";
          case 4:
            return "WCO_RLS_MERGE_UPDATE_CHECK";
          case 5:
            return "WCO_RLS_MERGE_DELETE_CHECK";
          default:
            throw new Error("Key not recognized in enum WCOKind");
        }
      }
    case "GroupingSetKind":
      {
        switch (key) {
          case "GROUPING_SET_EMPTY":
            return 0;
          case "GROUPING_SET_SIMPLE":
            return 1;
          case "GROUPING_SET_ROLLUP":
            return 2;
          case "GROUPING_SET_CUBE":
            return 3;
          case "GROUPING_SET_SETS":
            return 4;
          case 0:
            return "GROUPING_SET_EMPTY";
          case 1:
            return "GROUPING_SET_SIMPLE";
          case 2:
            return "GROUPING_SET_ROLLUP";
          case 3:
            return "GROUPING_SET_CUBE";
          case 4:
            return "GROUPING_SET_SETS";
          default:
            throw new Error("Key not recognized in enum GroupingSetKind");
        }
      }
    case "CTEMaterialize":
      {
        switch (key) {
          case "CTEMaterializeDefault":
            return 0;
          case "CTEMaterializeAlways":
            return 1;
          case "CTEMaterializeNever":
            return 2;
          case 0:
            return "CTEMaterializeDefault";
          case 1:
            return "CTEMaterializeAlways";
          case 2:
            return "CTEMaterializeNever";
          default:
            throw new Error("Key not recognized in enum CTEMaterialize");
        }
      }
    case "SetOperation":
      {
        switch (key) {
          case "SETOP_NONE":
            return 0;
          case "SETOP_UNION":
            return 1;
          case "SETOP_INTERSECT":
            return 2;
          case "SETOP_EXCEPT":
            return 3;
          case 0:
            return "SETOP_NONE";
          case 1:
            return "SETOP_UNION";
          case 2:
            return "SETOP_INTERSECT";
          case 3:
            return "SETOP_EXCEPT";
          default:
            throw new Error("Key not recognized in enum SetOperation");
        }
      }
    case "ObjectType":
      {
        switch (key) {
          case "OBJECT_ACCESS_METHOD":
            return 0;
          case "OBJECT_AGGREGATE":
            return 1;
          case "OBJECT_AMOP":
            return 2;
          case "OBJECT_AMPROC":
            return 3;
          case "OBJECT_ATTRIBUTE":
            return 4;
          case "OBJECT_CAST":
            return 5;
          case "OBJECT_COLUMN":
            return 6;
          case "OBJECT_COLLATION":
            return 7;
          case "OBJECT_CONVERSION":
            return 8;
          case "OBJECT_DATABASE":
            return 9;
          case "OBJECT_DEFAULT":
            return 10;
          case "OBJECT_DEFACL":
            return 11;
          case "OBJECT_DOMAIN":
            return 12;
          case "OBJECT_DOMCONSTRAINT":
            return 13;
          case "OBJECT_EVENT_TRIGGER":
            return 14;
          case "OBJECT_EXTENSION":
            return 15;
          case "OBJECT_FDW":
            return 16;
          case "OBJECT_FOREIGN_SERVER":
            return 17;
          case "OBJECT_FOREIGN_TABLE":
            return 18;
          case "OBJECT_FUNCTION":
            return 19;
          case "OBJECT_INDEX":
            return 20;
          case "OBJECT_LANGUAGE":
            return 21;
          case "OBJECT_LARGEOBJECT":
            return 22;
          case "OBJECT_MATVIEW":
            return 23;
          case "OBJECT_OPCLASS":
            return 24;
          case "OBJECT_OPERATOR":
            return 25;
          case "OBJECT_OPFAMILY":
            return 26;
          case "OBJECT_PARAMETER_ACL":
            return 27;
          case "OBJECT_POLICY":
            return 28;
          case "OBJECT_PROCEDURE":
            return 29;
          case "OBJECT_PUBLICATION":
            return 30;
          case "OBJECT_PUBLICATION_NAMESPACE":
            return 31;
          case "OBJECT_PUBLICATION_REL":
            return 32;
          case "OBJECT_ROLE":
            return 33;
          case "OBJECT_ROUTINE":
            return 34;
          case "OBJECT_RULE":
            return 35;
          case "OBJECT_SCHEMA":
            return 36;
          case "OBJECT_SEQUENCE":
            return 37;
          case "OBJECT_SUBSCRIPTION":
            return 38;
          case "OBJECT_STATISTIC_EXT":
            return 39;
          case "OBJECT_TABCONSTRAINT":
            return 40;
          case "OBJECT_TABLE":
            return 41;
          case "OBJECT_TABLESPACE":
            return 42;
          case "OBJECT_TRANSFORM":
            return 43;
          case "OBJECT_TRIGGER":
            return 44;
          case "OBJECT_TSCONFIGURATION":
            return 45;
          case "OBJECT_TSDICTIONARY":
            return 46;
          case "OBJECT_TSPARSER":
            return 47;
          case "OBJECT_TSTEMPLATE":
            return 48;
          case "OBJECT_TYPE":
            return 49;
          case "OBJECT_USER_MAPPING":
            return 50;
          case "OBJECT_VIEW":
            return 51;
          case 0:
            return "OBJECT_ACCESS_METHOD";
          case 1:
            return "OBJECT_AGGREGATE";
          case 2:
            return "OBJECT_AMOP";
          case 3:
            return "OBJECT_AMPROC";
          case 4:
            return "OBJECT_ATTRIBUTE";
          case 5:
            return "OBJECT_CAST";
          case 6:
            return "OBJECT_COLUMN";
          case 7:
            return "OBJECT_COLLATION";
          case 8:
            return "OBJECT_CONVERSION";
          case 9:
            return "OBJECT_DATABASE";
          case 10:
            return "OBJECT_DEFAULT";
          case 11:
            return "OBJECT_DEFACL";
          case 12:
            return "OBJECT_DOMAIN";
          case 13:
            return "OBJECT_DOMCONSTRAINT";
          case 14:
            return "OBJECT_EVENT_TRIGGER";
          case 15:
            return "OBJECT_EXTENSION";
          case 16:
            return "OBJECT_FDW";
          case 17:
            return "OBJECT_FOREIGN_SERVER";
          case 18:
            return "OBJECT_FOREIGN_TABLE";
          case 19:
            return "OBJECT_FUNCTION";
          case 20:
            return "OBJECT_INDEX";
          case 21:
            return "OBJECT_LANGUAGE";
          case 22:
            return "OBJECT_LARGEOBJECT";
          case 23:
            return "OBJECT_MATVIEW";
          case 24:
            return "OBJECT_OPCLASS";
          case 25:
            return "OBJECT_OPERATOR";
          case 26:
            return "OBJECT_OPFAMILY";
          case 27:
            return "OBJECT_PARAMETER_ACL";
          case 28:
            return "OBJECT_POLICY";
          case 29:
            return "OBJECT_PROCEDURE";
          case 30:
            return "OBJECT_PUBLICATION";
          case 31:
            return "OBJECT_PUBLICATION_NAMESPACE";
          case 32:
            return "OBJECT_PUBLICATION_REL";
          case 33:
            return "OBJECT_ROLE";
          case 34:
            return "OBJECT_ROUTINE";
          case 35:
            return "OBJECT_RULE";
          case 36:
            return "OBJECT_SCHEMA";
          case 37:
            return "OBJECT_SEQUENCE";
          case 38:
            return "OBJECT_SUBSCRIPTION";
          case 39:
            return "OBJECT_STATISTIC_EXT";
          case 40:
            return "OBJECT_TABCONSTRAINT";
          case 41:
            return "OBJECT_TABLE";
          case 42:
            return "OBJECT_TABLESPACE";
          case 43:
            return "OBJECT_TRANSFORM";
          case 44:
            return "OBJECT_TRIGGER";
          case 45:
            return "OBJECT_TSCONFIGURATION";
          case 46:
            return "OBJECT_TSDICTIONARY";
          case 47:
            return "OBJECT_TSPARSER";
          case 48:
            return "OBJECT_TSTEMPLATE";
          case 49:
            return "OBJECT_TYPE";
          case 50:
            return "OBJECT_USER_MAPPING";
          case 51:
            return "OBJECT_VIEW";
          default:
            throw new Error("Key not recognized in enum ObjectType");
        }
      }
    case "DropBehavior":
      {
        switch (key) {
          case "DROP_RESTRICT":
            return 0;
          case "DROP_CASCADE":
            return 1;
          case 0:
            return "DROP_RESTRICT";
          case 1:
            return "DROP_CASCADE";
          default:
            throw new Error("Key not recognized in enum DropBehavior");
        }
      }
    case "AlterTableType":
      {
        switch (key) {
          case "AT_AddColumn":
            return 0;
          case "AT_AddColumnToView":
            return 1;
          case "AT_ColumnDefault":
            return 2;
          case "AT_CookedColumnDefault":
            return 3;
          case "AT_DropNotNull":
            return 4;
          case "AT_SetNotNull":
            return 5;
          case "AT_DropExpression":
            return 6;
          case "AT_CheckNotNull":
            return 7;
          case "AT_SetStatistics":
            return 8;
          case "AT_SetOptions":
            return 9;
          case "AT_ResetOptions":
            return 10;
          case "AT_SetStorage":
            return 11;
          case "AT_SetCompression":
            return 12;
          case "AT_DropColumn":
            return 13;
          case "AT_AddIndex":
            return 14;
          case "AT_ReAddIndex":
            return 15;
          case "AT_AddConstraint":
            return 16;
          case "AT_ReAddConstraint":
            return 17;
          case "AT_ReAddDomainConstraint":
            return 18;
          case "AT_AlterConstraint":
            return 19;
          case "AT_ValidateConstraint":
            return 20;
          case "AT_AddIndexConstraint":
            return 21;
          case "AT_DropConstraint":
            return 22;
          case "AT_ReAddComment":
            return 23;
          case "AT_AlterColumnType":
            return 24;
          case "AT_AlterColumnGenericOptions":
            return 25;
          case "AT_ChangeOwner":
            return 26;
          case "AT_ClusterOn":
            return 27;
          case "AT_DropCluster":
            return 28;
          case "AT_SetLogged":
            return 29;
          case "AT_SetUnLogged":
            return 30;
          case "AT_DropOids":
            return 31;
          case "AT_SetAccessMethod":
            return 32;
          case "AT_SetTableSpace":
            return 33;
          case "AT_SetRelOptions":
            return 34;
          case "AT_ResetRelOptions":
            return 35;
          case "AT_ReplaceRelOptions":
            return 36;
          case "AT_EnableTrig":
            return 37;
          case "AT_EnableAlwaysTrig":
            return 38;
          case "AT_EnableReplicaTrig":
            return 39;
          case "AT_DisableTrig":
            return 40;
          case "AT_EnableTrigAll":
            return 41;
          case "AT_DisableTrigAll":
            return 42;
          case "AT_EnableTrigUser":
            return 43;
          case "AT_DisableTrigUser":
            return 44;
          case "AT_EnableRule":
            return 45;
          case "AT_EnableAlwaysRule":
            return 46;
          case "AT_EnableReplicaRule":
            return 47;
          case "AT_DisableRule":
            return 48;
          case "AT_AddInherit":
            return 49;
          case "AT_DropInherit":
            return 50;
          case "AT_AddOf":
            return 51;
          case "AT_DropOf":
            return 52;
          case "AT_ReplicaIdentity":
            return 53;
          case "AT_EnableRowSecurity":
            return 54;
          case "AT_DisableRowSecurity":
            return 55;
          case "AT_ForceRowSecurity":
            return 56;
          case "AT_NoForceRowSecurity":
            return 57;
          case "AT_GenericOptions":
            return 58;
          case "AT_AttachPartition":
            return 59;
          case "AT_DetachPartition":
            return 60;
          case "AT_DetachPartitionFinalize":
            return 61;
          case "AT_AddIdentity":
            return 62;
          case "AT_SetIdentity":
            return 63;
          case "AT_DropIdentity":
            return 64;
          case "AT_ReAddStatistics":
            return 65;
          case 0:
            return "AT_AddColumn";
          case 1:
            return "AT_AddColumnToView";
          case 2:
            return "AT_ColumnDefault";
          case 3:
            return "AT_CookedColumnDefault";
          case 4:
            return "AT_DropNotNull";
          case 5:
            return "AT_SetNotNull";
          case 6:
            return "AT_DropExpression";
          case 7:
            return "AT_CheckNotNull";
          case 8:
            return "AT_SetStatistics";
          case 9:
            return "AT_SetOptions";
          case 10:
            return "AT_ResetOptions";
          case 11:
            return "AT_SetStorage";
          case 12:
            return "AT_SetCompression";
          case 13:
            return "AT_DropColumn";
          case 14:
            return "AT_AddIndex";
          case 15:
            return "AT_ReAddIndex";
          case 16:
            return "AT_AddConstraint";
          case 17:
            return "AT_ReAddConstraint";
          case 18:
            return "AT_ReAddDomainConstraint";
          case 19:
            return "AT_AlterConstraint";
          case 20:
            return "AT_ValidateConstraint";
          case 21:
            return "AT_AddIndexConstraint";
          case 22:
            return "AT_DropConstraint";
          case 23:
            return "AT_ReAddComment";
          case 24:
            return "AT_AlterColumnType";
          case 25:
            return "AT_AlterColumnGenericOptions";
          case 26:
            return "AT_ChangeOwner";
          case 27:
            return "AT_ClusterOn";
          case 28:
            return "AT_DropCluster";
          case 29:
            return "AT_SetLogged";
          case 30:
            return "AT_SetUnLogged";
          case 31:
            return "AT_DropOids";
          case 32:
            return "AT_SetAccessMethod";
          case 33:
            return "AT_SetTableSpace";
          case 34:
            return "AT_SetRelOptions";
          case 35:
            return "AT_ResetRelOptions";
          case 36:
            return "AT_ReplaceRelOptions";
          case 37:
            return "AT_EnableTrig";
          case 38:
            return "AT_EnableAlwaysTrig";
          case 39:
            return "AT_EnableReplicaTrig";
          case 40:
            return "AT_DisableTrig";
          case 41:
            return "AT_EnableTrigAll";
          case 42:
            return "AT_DisableTrigAll";
          case 43:
            return "AT_EnableTrigUser";
          case 44:
            return "AT_DisableTrigUser";
          case 45:
            return "AT_EnableRule";
          case 46:
            return "AT_EnableAlwaysRule";
          case 47:
            return "AT_EnableReplicaRule";
          case 48:
            return "AT_DisableRule";
          case 49:
            return "AT_AddInherit";
          case 50:
            return "AT_DropInherit";
          case 51:
            return "AT_AddOf";
          case 52:
            return "AT_DropOf";
          case 53:
            return "AT_ReplicaIdentity";
          case 54:
            return "AT_EnableRowSecurity";
          case 55:
            return "AT_DisableRowSecurity";
          case 56:
            return "AT_ForceRowSecurity";
          case 57:
            return "AT_NoForceRowSecurity";
          case 58:
            return "AT_GenericOptions";
          case 59:
            return "AT_AttachPartition";
          case 60:
            return "AT_DetachPartition";
          case 61:
            return "AT_DetachPartitionFinalize";
          case 62:
            return "AT_AddIdentity";
          case 63:
            return "AT_SetIdentity";
          case 64:
            return "AT_DropIdentity";
          case 65:
            return "AT_ReAddStatistics";
          default:
            throw new Error("Key not recognized in enum AlterTableType");
        }
      }
    case "GrantTargetType":
      {
        switch (key) {
          case "ACL_TARGET_OBJECT":
            return 0;
          case "ACL_TARGET_ALL_IN_SCHEMA":
            return 1;
          case "ACL_TARGET_DEFAULTS":
            return 2;
          case 0:
            return "ACL_TARGET_OBJECT";
          case 1:
            return "ACL_TARGET_ALL_IN_SCHEMA";
          case 2:
            return "ACL_TARGET_DEFAULTS";
          default:
            throw new Error("Key not recognized in enum GrantTargetType");
        }
      }
    case "VariableSetKind":
      {
        switch (key) {
          case "VAR_SET_VALUE":
            return 0;
          case "VAR_SET_DEFAULT":
            return 1;
          case "VAR_SET_CURRENT":
            return 2;
          case "VAR_SET_MULTI":
            return 3;
          case "VAR_RESET":
            return 4;
          case "VAR_RESET_ALL":
            return 5;
          case 0:
            return "VAR_SET_VALUE";
          case 1:
            return "VAR_SET_DEFAULT";
          case 2:
            return "VAR_SET_CURRENT";
          case 3:
            return "VAR_SET_MULTI";
          case 4:
            return "VAR_RESET";
          case 5:
            return "VAR_RESET_ALL";
          default:
            throw new Error("Key not recognized in enum VariableSetKind");
        }
      }
    case "ConstrType":
      {
        switch (key) {
          case "CONSTR_NULL":
            return 0;
          case "CONSTR_NOTNULL":
            return 1;
          case "CONSTR_DEFAULT":
            return 2;
          case "CONSTR_IDENTITY":
            return 3;
          case "CONSTR_GENERATED":
            return 4;
          case "CONSTR_CHECK":
            return 5;
          case "CONSTR_PRIMARY":
            return 6;
          case "CONSTR_UNIQUE":
            return 7;
          case "CONSTR_EXCLUSION":
            return 8;
          case "CONSTR_FOREIGN":
            return 9;
          case "CONSTR_ATTR_DEFERRABLE":
            return 10;
          case "CONSTR_ATTR_NOT_DEFERRABLE":
            return 11;
          case "CONSTR_ATTR_DEFERRED":
            return 12;
          case "CONSTR_ATTR_IMMEDIATE":
            return 13;
          case 0:
            return "CONSTR_NULL";
          case 1:
            return "CONSTR_NOTNULL";
          case 2:
            return "CONSTR_DEFAULT";
          case 3:
            return "CONSTR_IDENTITY";
          case 4:
            return "CONSTR_GENERATED";
          case 5:
            return "CONSTR_CHECK";
          case 6:
            return "CONSTR_PRIMARY";
          case 7:
            return "CONSTR_UNIQUE";
          case 8:
            return "CONSTR_EXCLUSION";
          case 9:
            return "CONSTR_FOREIGN";
          case 10:
            return "CONSTR_ATTR_DEFERRABLE";
          case 11:
            return "CONSTR_ATTR_NOT_DEFERRABLE";
          case 12:
            return "CONSTR_ATTR_DEFERRED";
          case 13:
            return "CONSTR_ATTR_IMMEDIATE";
          default:
            throw new Error("Key not recognized in enum ConstrType");
        }
      }
    case "ImportForeignSchemaType":
      {
        switch (key) {
          case "FDW_IMPORT_SCHEMA_ALL":
            return 0;
          case "FDW_IMPORT_SCHEMA_LIMIT_TO":
            return 1;
          case "FDW_IMPORT_SCHEMA_EXCEPT":
            return 2;
          case 0:
            return "FDW_IMPORT_SCHEMA_ALL";
          case 1:
            return "FDW_IMPORT_SCHEMA_LIMIT_TO";
          case 2:
            return "FDW_IMPORT_SCHEMA_EXCEPT";
          default:
            throw new Error("Key not recognized in enum ImportForeignSchemaType");
        }
      }
    case "RoleStmtType":
      {
        switch (key) {
          case "ROLESTMT_ROLE":
            return 0;
          case "ROLESTMT_USER":
            return 1;
          case "ROLESTMT_GROUP":
            return 2;
          case 0:
            return "ROLESTMT_ROLE";
          case 1:
            return "ROLESTMT_USER";
          case 2:
            return "ROLESTMT_GROUP";
          default:
            throw new Error("Key not recognized in enum RoleStmtType");
        }
      }
    case "FetchDirection":
      {
        switch (key) {
          case "FETCH_FORWARD":
            return 0;
          case "FETCH_BACKWARD":
            return 1;
          case "FETCH_ABSOLUTE":
            return 2;
          case "FETCH_RELATIVE":
            return 3;
          case 0:
            return "FETCH_FORWARD";
          case 1:
            return "FETCH_BACKWARD";
          case 2:
            return "FETCH_ABSOLUTE";
          case 3:
            return "FETCH_RELATIVE";
          default:
            throw new Error("Key not recognized in enum FetchDirection");
        }
      }
    case "FunctionParameterMode":
      {
        switch (key) {
          case "FUNC_PARAM_IN":
            return 0;
          case "FUNC_PARAM_OUT":
            return 1;
          case "FUNC_PARAM_INOUT":
            return 2;
          case "FUNC_PARAM_VARIADIC":
            return 3;
          case "FUNC_PARAM_TABLE":
            return 4;
          case "FUNC_PARAM_DEFAULT":
            return 5;
          case 0:
            return "FUNC_PARAM_IN";
          case 1:
            return "FUNC_PARAM_OUT";
          case 2:
            return "FUNC_PARAM_INOUT";
          case 3:
            return "FUNC_PARAM_VARIADIC";
          case 4:
            return "FUNC_PARAM_TABLE";
          case 5:
            return "FUNC_PARAM_DEFAULT";
          default:
            throw new Error("Key not recognized in enum FunctionParameterMode");
        }
      }
    case "TransactionStmtKind":
      {
        switch (key) {
          case "TRANS_STMT_BEGIN":
            return 0;
          case "TRANS_STMT_START":
            return 1;
          case "TRANS_STMT_COMMIT":
            return 2;
          case "TRANS_STMT_ROLLBACK":
            return 3;
          case "TRANS_STMT_SAVEPOINT":
            return 4;
          case "TRANS_STMT_RELEASE":
            return 5;
          case "TRANS_STMT_ROLLBACK_TO":
            return 6;
          case "TRANS_STMT_PREPARE":
            return 7;
          case "TRANS_STMT_COMMIT_PREPARED":
            return 8;
          case "TRANS_STMT_ROLLBACK_PREPARED":
            return 9;
          case 0:
            return "TRANS_STMT_BEGIN";
          case 1:
            return "TRANS_STMT_START";
          case 2:
            return "TRANS_STMT_COMMIT";
          case 3:
            return "TRANS_STMT_ROLLBACK";
          case 4:
            return "TRANS_STMT_SAVEPOINT";
          case 5:
            return "TRANS_STMT_RELEASE";
          case 6:
            return "TRANS_STMT_ROLLBACK_TO";
          case 7:
            return "TRANS_STMT_PREPARE";
          case 8:
            return "TRANS_STMT_COMMIT_PREPARED";
          case 9:
            return "TRANS_STMT_ROLLBACK_PREPARED";
          default:
            throw new Error("Key not recognized in enum TransactionStmtKind");
        }
      }
    case "ViewCheckOption":
      {
        switch (key) {
          case "NO_CHECK_OPTION":
            return 0;
          case "LOCAL_CHECK_OPTION":
            return 1;
          case "CASCADED_CHECK_OPTION":
            return 2;
          case 0:
            return "NO_CHECK_OPTION";
          case 1:
            return "LOCAL_CHECK_OPTION";
          case 2:
            return "CASCADED_CHECK_OPTION";
          default:
            throw new Error("Key not recognized in enum ViewCheckOption");
        }
      }
    case "DiscardMode":
      {
        switch (key) {
          case "DISCARD_ALL":
            return 0;
          case "DISCARD_PLANS":
            return 1;
          case "DISCARD_SEQUENCES":
            return 2;
          case "DISCARD_TEMP":
            return 3;
          case 0:
            return "DISCARD_ALL";
          case 1:
            return "DISCARD_PLANS";
          case 2:
            return "DISCARD_SEQUENCES";
          case 3:
            return "DISCARD_TEMP";
          default:
            throw new Error("Key not recognized in enum DiscardMode");
        }
      }
    case "ReindexObjectType":
      {
        switch (key) {
          case "REINDEX_OBJECT_INDEX":
            return 0;
          case "REINDEX_OBJECT_TABLE":
            return 1;
          case "REINDEX_OBJECT_SCHEMA":
            return 2;
          case "REINDEX_OBJECT_SYSTEM":
            return 3;
          case "REINDEX_OBJECT_DATABASE":
            return 4;
          case 0:
            return "REINDEX_OBJECT_INDEX";
          case 1:
            return "REINDEX_OBJECT_TABLE";
          case 2:
            return "REINDEX_OBJECT_SCHEMA";
          case 3:
            return "REINDEX_OBJECT_SYSTEM";
          case 4:
            return "REINDEX_OBJECT_DATABASE";
          default:
            throw new Error("Key not recognized in enum ReindexObjectType");
        }
      }
    case "AlterTSConfigType":
      {
        switch (key) {
          case "ALTER_TSCONFIG_ADD_MAPPING":
            return 0;
          case "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN":
            return 1;
          case "ALTER_TSCONFIG_REPLACE_DICT":
            return 2;
          case "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN":
            return 3;
          case "ALTER_TSCONFIG_DROP_MAPPING":
            return 4;
          case 0:
            return "ALTER_TSCONFIG_ADD_MAPPING";
          case 1:
            return "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN";
          case 2:
            return "ALTER_TSCONFIG_REPLACE_DICT";
          case 3:
            return "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN";
          case 4:
            return "ALTER_TSCONFIG_DROP_MAPPING";
          default:
            throw new Error("Key not recognized in enum AlterTSConfigType");
        }
      }
    case "PublicationObjSpecType":
      {
        switch (key) {
          case "PUBLICATIONOBJ_TABLE":
            return 0;
          case "PUBLICATIONOBJ_TABLES_IN_SCHEMA":
            return 1;
          case "PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA":
            return 2;
          case "PUBLICATIONOBJ_CONTINUATION":
            return 3;
          case 0:
            return "PUBLICATIONOBJ_TABLE";
          case 1:
            return "PUBLICATIONOBJ_TABLES_IN_SCHEMA";
          case 2:
            return "PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA";
          case 3:
            return "PUBLICATIONOBJ_CONTINUATION";
          default:
            throw new Error("Key not recognized in enum PublicationObjSpecType");
        }
      }
    case "AlterPublicationAction":
      {
        switch (key) {
          case "AP_AddObjects":
            return 0;
          case "AP_DropObjects":
            return 1;
          case "AP_SetObjects":
            return 2;
          case 0:
            return "AP_AddObjects";
          case 1:
            return "AP_DropObjects";
          case 2:
            return "AP_SetObjects";
          default:
            throw new Error("Key not recognized in enum AlterPublicationAction");
        }
      }
    case "AlterSubscriptionType":
      {
        switch (key) {
          case "ALTER_SUBSCRIPTION_OPTIONS":
            return 0;
          case "ALTER_SUBSCRIPTION_CONNECTION":
            return 1;
          case "ALTER_SUBSCRIPTION_SET_PUBLICATION":
            return 2;
          case "ALTER_SUBSCRIPTION_ADD_PUBLICATION":
            return 3;
          case "ALTER_SUBSCRIPTION_DROP_PUBLICATION":
            return 4;
          case "ALTER_SUBSCRIPTION_REFRESH":
            return 5;
          case "ALTER_SUBSCRIPTION_ENABLED":
            return 6;
          case "ALTER_SUBSCRIPTION_SKIP":
            return 7;
          case 0:
            return "ALTER_SUBSCRIPTION_OPTIONS";
          case 1:
            return "ALTER_SUBSCRIPTION_CONNECTION";
          case 2:
            return "ALTER_SUBSCRIPTION_SET_PUBLICATION";
          case 3:
            return "ALTER_SUBSCRIPTION_ADD_PUBLICATION";
          case 4:
            return "ALTER_SUBSCRIPTION_DROP_PUBLICATION";
          case 5:
            return "ALTER_SUBSCRIPTION_REFRESH";
          case 6:
            return "ALTER_SUBSCRIPTION_ENABLED";
          case 7:
            return "ALTER_SUBSCRIPTION_SKIP";
          default:
            throw new Error("Key not recognized in enum AlterSubscriptionType");
        }
      }
    case "OnCommitAction":
      {
        switch (key) {
          case "ONCOMMIT_NOOP":
            return 0;
          case "ONCOMMIT_PRESERVE_ROWS":
            return 1;
          case "ONCOMMIT_DELETE_ROWS":
            return 2;
          case "ONCOMMIT_DROP":
            return 3;
          case 0:
            return "ONCOMMIT_NOOP";
          case 1:
            return "ONCOMMIT_PRESERVE_ROWS";
          case 2:
            return "ONCOMMIT_DELETE_ROWS";
          case 3:
            return "ONCOMMIT_DROP";
          default:
            throw new Error("Key not recognized in enum OnCommitAction");
        }
      }
    case "ParamKind":
      {
        switch (key) {
          case "PARAM_EXTERN":
            return 0;
          case "PARAM_EXEC":
            return 1;
          case "PARAM_SUBLINK":
            return 2;
          case "PARAM_MULTIEXPR":
            return 3;
          case 0:
            return "PARAM_EXTERN";
          case 1:
            return "PARAM_EXEC";
          case 2:
            return "PARAM_SUBLINK";
          case 3:
            return "PARAM_MULTIEXPR";
          default:
            throw new Error("Key not recognized in enum ParamKind");
        }
      }
    case "CoercionContext":
      {
        switch (key) {
          case "COERCION_IMPLICIT":
            return 0;
          case "COERCION_ASSIGNMENT":
            return 1;
          case "COERCION_PLPGSQL":
            return 2;
          case "COERCION_EXPLICIT":
            return 3;
          case 0:
            return "COERCION_IMPLICIT";
          case 1:
            return "COERCION_ASSIGNMENT";
          case 2:
            return "COERCION_PLPGSQL";
          case 3:
            return "COERCION_EXPLICIT";
          default:
            throw new Error("Key not recognized in enum CoercionContext");
        }
      }
    case "CoercionForm":
      {
        switch (key) {
          case "COERCE_EXPLICIT_CALL":
            return 0;
          case "COERCE_EXPLICIT_CAST":
            return 1;
          case "COERCE_IMPLICIT_CAST":
            return 2;
          case "COERCE_SQL_SYNTAX":
            return 3;
          case 0:
            return "COERCE_EXPLICIT_CALL";
          case 1:
            return "COERCE_EXPLICIT_CAST";
          case 2:
            return "COERCE_IMPLICIT_CAST";
          case 3:
            return "COERCE_SQL_SYNTAX";
          default:
            throw new Error("Key not recognized in enum CoercionForm");
        }
      }
    case "BoolExprType":
      {
        switch (key) {
          case "AND_EXPR":
            return 0;
          case "OR_EXPR":
            return 1;
          case "NOT_EXPR":
            return 2;
          case 0:
            return "AND_EXPR";
          case 1:
            return "OR_EXPR";
          case 2:
            return "NOT_EXPR";
          default:
            throw new Error("Key not recognized in enum BoolExprType");
        }
      }
    case "SubLinkType":
      {
        switch (key) {
          case "EXISTS_SUBLINK":
            return 0;
          case "ALL_SUBLINK":
            return 1;
          case "ANY_SUBLINK":
            return 2;
          case "ROWCOMPARE_SUBLINK":
            return 3;
          case "EXPR_SUBLINK":
            return 4;
          case "MULTIEXPR_SUBLINK":
            return 5;
          case "ARRAY_SUBLINK":
            return 6;
          case "CTE_SUBLINK":
            return 7;
          case 0:
            return "EXISTS_SUBLINK";
          case 1:
            return "ALL_SUBLINK";
          case 2:
            return "ANY_SUBLINK";
          case 3:
            return "ROWCOMPARE_SUBLINK";
          case 4:
            return "EXPR_SUBLINK";
          case 5:
            return "MULTIEXPR_SUBLINK";
          case 6:
            return "ARRAY_SUBLINK";
          case 7:
            return "CTE_SUBLINK";
          default:
            throw new Error("Key not recognized in enum SubLinkType");
        }
      }
    case "RowCompareType":
      {
        switch (key) {
          case "ROWCOMPARE_LT":
            return 0;
          case "ROWCOMPARE_LE":
            return 1;
          case "ROWCOMPARE_EQ":
            return 2;
          case "ROWCOMPARE_GE":
            return 3;
          case "ROWCOMPARE_GT":
            return 4;
          case "ROWCOMPARE_NE":
            return 5;
          case 0:
            return "ROWCOMPARE_LT";
          case 1:
            return "ROWCOMPARE_LE";
          case 2:
            return "ROWCOMPARE_EQ";
          case 3:
            return "ROWCOMPARE_GE";
          case 4:
            return "ROWCOMPARE_GT";
          case 5:
            return "ROWCOMPARE_NE";
          default:
            throw new Error("Key not recognized in enum RowCompareType");
        }
      }
    case "MinMaxOp":
      {
        switch (key) {
          case "IS_GREATEST":
            return 0;
          case "IS_LEAST":
            return 1;
          case 0:
            return "IS_GREATEST";
          case 1:
            return "IS_LEAST";
          default:
            throw new Error("Key not recognized in enum MinMaxOp");
        }
      }
    case "SQLValueFunctionOp":
      {
        switch (key) {
          case "SVFOP_CURRENT_DATE":
            return 0;
          case "SVFOP_CURRENT_TIME":
            return 1;
          case "SVFOP_CURRENT_TIME_N":
            return 2;
          case "SVFOP_CURRENT_TIMESTAMP":
            return 3;
          case "SVFOP_CURRENT_TIMESTAMP_N":
            return 4;
          case "SVFOP_LOCALTIME":
            return 5;
          case "SVFOP_LOCALTIME_N":
            return 6;
          case "SVFOP_LOCALTIMESTAMP":
            return 7;
          case "SVFOP_LOCALTIMESTAMP_N":
            return 8;
          case "SVFOP_CURRENT_ROLE":
            return 9;
          case "SVFOP_CURRENT_USER":
            return 10;
          case "SVFOP_USER":
            return 11;
          case "SVFOP_SESSION_USER":
            return 12;
          case "SVFOP_CURRENT_CATALOG":
            return 13;
          case "SVFOP_CURRENT_SCHEMA":
            return 14;
          case 0:
            return "SVFOP_CURRENT_DATE";
          case 1:
            return "SVFOP_CURRENT_TIME";
          case 2:
            return "SVFOP_CURRENT_TIME_N";
          case 3:
            return "SVFOP_CURRENT_TIMESTAMP";
          case 4:
            return "SVFOP_CURRENT_TIMESTAMP_N";
          case 5:
            return "SVFOP_LOCALTIME";
          case 6:
            return "SVFOP_LOCALTIME_N";
          case 7:
            return "SVFOP_LOCALTIMESTAMP";
          case 8:
            return "SVFOP_LOCALTIMESTAMP_N";
          case 9:
            return "SVFOP_CURRENT_ROLE";
          case 10:
            return "SVFOP_CURRENT_USER";
          case 11:
            return "SVFOP_USER";
          case 12:
            return "SVFOP_SESSION_USER";
          case 13:
            return "SVFOP_CURRENT_CATALOG";
          case 14:
            return "SVFOP_CURRENT_SCHEMA";
          default:
            throw new Error("Key not recognized in enum SQLValueFunctionOp");
        }
      }
    case "XmlExprOp":
      {
        switch (key) {
          case "IS_XMLCONCAT":
            return 0;
          case "IS_XMLELEMENT":
            return 1;
          case "IS_XMLFOREST":
            return 2;
          case "IS_XMLPARSE":
            return 3;
          case "IS_XMLPI":
            return 4;
          case "IS_XMLROOT":
            return 5;
          case "IS_XMLSERIALIZE":
            return 6;
          case "IS_DOCUMENT":
            return 7;
          case 0:
            return "IS_XMLCONCAT";
          case 1:
            return "IS_XMLELEMENT";
          case 2:
            return "IS_XMLFOREST";
          case 3:
            return "IS_XMLPARSE";
          case 4:
            return "IS_XMLPI";
          case 5:
            return "IS_XMLROOT";
          case 6:
            return "IS_XMLSERIALIZE";
          case 7:
            return "IS_DOCUMENT";
          default:
            throw new Error("Key not recognized in enum XmlExprOp");
        }
      }
    case "XmlOptionType":
      {
        switch (key) {
          case "XMLOPTION_DOCUMENT":
            return 0;
          case "XMLOPTION_CONTENT":
            return 1;
          case 0:
            return "XMLOPTION_DOCUMENT";
          case 1:
            return "XMLOPTION_CONTENT";
          default:
            throw new Error("Key not recognized in enum XmlOptionType");
        }
      }
    case "JsonEncoding":
      {
        switch (key) {
          case "JS_ENC_DEFAULT":
            return 0;
          case "JS_ENC_UTF8":
            return 1;
          case "JS_ENC_UTF16":
            return 2;
          case "JS_ENC_UTF32":
            return 3;
          case 0:
            return "JS_ENC_DEFAULT";
          case 1:
            return "JS_ENC_UTF8";
          case 2:
            return "JS_ENC_UTF16";
          case 3:
            return "JS_ENC_UTF32";
          default:
            throw new Error("Key not recognized in enum JsonEncoding");
        }
      }
    case "JsonFormatType":
      {
        switch (key) {
          case "JS_FORMAT_DEFAULT":
            return 0;
          case "JS_FORMAT_JSON":
            return 1;
          case "JS_FORMAT_JSONB":
            return 2;
          case 0:
            return "JS_FORMAT_DEFAULT";
          case 1:
            return "JS_FORMAT_JSON";
          case 2:
            return "JS_FORMAT_JSONB";
          default:
            throw new Error("Key not recognized in enum JsonFormatType");
        }
      }
    case "JsonConstructorType":
      {
        switch (key) {
          case "JSCTOR_JSON_OBJECT":
            return 0;
          case "JSCTOR_JSON_ARRAY":
            return 1;
          case "JSCTOR_JSON_OBJECTAGG":
            return 2;
          case "JSCTOR_JSON_ARRAYAGG":
            return 3;
          case 0:
            return "JSCTOR_JSON_OBJECT";
          case 1:
            return "JSCTOR_JSON_ARRAY";
          case 2:
            return "JSCTOR_JSON_OBJECTAGG";
          case 3:
            return "JSCTOR_JSON_ARRAYAGG";
          default:
            throw new Error("Key not recognized in enum JsonConstructorType");
        }
      }
    case "JsonValueType":
      {
        switch (key) {
          case "JS_TYPE_ANY":
            return 0;
          case "JS_TYPE_OBJECT":
            return 1;
          case "JS_TYPE_ARRAY":
            return 2;
          case "JS_TYPE_SCALAR":
            return 3;
          case 0:
            return "JS_TYPE_ANY";
          case 1:
            return "JS_TYPE_OBJECT";
          case 2:
            return "JS_TYPE_ARRAY";
          case 3:
            return "JS_TYPE_SCALAR";
          default:
            throw new Error("Key not recognized in enum JsonValueType");
        }
      }
    case "NullTestType":
      {
        switch (key) {
          case "IS_NULL":
            return 0;
          case "IS_NOT_NULL":
            return 1;
          case 0:
            return "IS_NULL";
          case 1:
            return "IS_NOT_NULL";
          default:
            throw new Error("Key not recognized in enum NullTestType");
        }
      }
    case "BoolTestType":
      {
        switch (key) {
          case "IS_TRUE":
            return 0;
          case "IS_NOT_TRUE":
            return 1;
          case "IS_FALSE":
            return 2;
          case "IS_NOT_FALSE":
            return 3;
          case "IS_UNKNOWN":
            return 4;
          case "IS_NOT_UNKNOWN":
            return 5;
          case 0:
            return "IS_TRUE";
          case 1:
            return "IS_NOT_TRUE";
          case 2:
            return "IS_FALSE";
          case 3:
            return "IS_NOT_FALSE";
          case 4:
            return "IS_UNKNOWN";
          case 5:
            return "IS_NOT_UNKNOWN";
          default:
            throw new Error("Key not recognized in enum BoolTestType");
        }
      }
    case "CmdType":
      {
        switch (key) {
          case "CMD_UNKNOWN":
            return 0;
          case "CMD_SELECT":
            return 1;
          case "CMD_UPDATE":
            return 2;
          case "CMD_INSERT":
            return 3;
          case "CMD_DELETE":
            return 4;
          case "CMD_MERGE":
            return 5;
          case "CMD_UTILITY":
            return 6;
          case "CMD_NOTHING":
            return 7;
          case 0:
            return "CMD_UNKNOWN";
          case 1:
            return "CMD_SELECT";
          case 2:
            return "CMD_UPDATE";
          case 3:
            return "CMD_INSERT";
          case 4:
            return "CMD_DELETE";
          case 5:
            return "CMD_MERGE";
          case 6:
            return "CMD_UTILITY";
          case 7:
            return "CMD_NOTHING";
          default:
            throw new Error("Key not recognized in enum CmdType");
        }
      }
    case "JoinType":
      {
        switch (key) {
          case "JOIN_INNER":
            return 0;
          case "JOIN_LEFT":
            return 1;
          case "JOIN_FULL":
            return 2;
          case "JOIN_RIGHT":
            return 3;
          case "JOIN_SEMI":
            return 4;
          case "JOIN_ANTI":
            return 5;
          case "JOIN_RIGHT_ANTI":
            return 6;
          case "JOIN_UNIQUE_OUTER":
            return 7;
          case "JOIN_UNIQUE_INNER":
            return 8;
          case 0:
            return "JOIN_INNER";
          case 1:
            return "JOIN_LEFT";
          case 2:
            return "JOIN_FULL";
          case 3:
            return "JOIN_RIGHT";
          case 4:
            return "JOIN_SEMI";
          case 5:
            return "JOIN_ANTI";
          case 6:
            return "JOIN_RIGHT_ANTI";
          case 7:
            return "JOIN_UNIQUE_OUTER";
          case 8:
            return "JOIN_UNIQUE_INNER";
          default:
            throw new Error("Key not recognized in enum JoinType");
        }
      }
    case "AggStrategy":
      {
        switch (key) {
          case "AGG_PLAIN":
            return 0;
          case "AGG_SORTED":
            return 1;
          case "AGG_HASHED":
            return 2;
          case "AGG_MIXED":
            return 3;
          case 0:
            return "AGG_PLAIN";
          case 1:
            return "AGG_SORTED";
          case 2:
            return "AGG_HASHED";
          case 3:
            return "AGG_MIXED";
          default:
            throw new Error("Key not recognized in enum AggStrategy");
        }
      }
    case "AggSplit":
      {
        switch (key) {
          case "AGGSPLIT_SIMPLE":
            return 0;
          case "AGGSPLIT_INITIAL_SERIAL":
            return 1;
          case "AGGSPLIT_FINAL_DESERIAL":
            return 2;
          case 0:
            return "AGGSPLIT_SIMPLE";
          case 1:
            return "AGGSPLIT_INITIAL_SERIAL";
          case 2:
            return "AGGSPLIT_FINAL_DESERIAL";
          default:
            throw new Error("Key not recognized in enum AggSplit");
        }
      }
    case "SetOpCmd":
      {
        switch (key) {
          case "SETOPCMD_INTERSECT":
            return 0;
          case "SETOPCMD_INTERSECT_ALL":
            return 1;
          case "SETOPCMD_EXCEPT":
            return 2;
          case "SETOPCMD_EXCEPT_ALL":
            return 3;
          case 0:
            return "SETOPCMD_INTERSECT";
          case 1:
            return "SETOPCMD_INTERSECT_ALL";
          case 2:
            return "SETOPCMD_EXCEPT";
          case 3:
            return "SETOPCMD_EXCEPT_ALL";
          default:
            throw new Error("Key not recognized in enum SetOpCmd");
        }
      }
    case "SetOpStrategy":
      {
        switch (key) {
          case "SETOP_SORTED":
            return 0;
          case "SETOP_HASHED":
            return 1;
          case 0:
            return "SETOP_SORTED";
          case 1:
            return "SETOP_HASHED";
          default:
            throw new Error("Key not recognized in enum SetOpStrategy");
        }
      }
    case "OnConflictAction":
      {
        switch (key) {
          case "ONCONFLICT_NONE":
            return 0;
          case "ONCONFLICT_NOTHING":
            return 1;
          case "ONCONFLICT_UPDATE":
            return 2;
          case 0:
            return "ONCONFLICT_NONE";
          case 1:
            return "ONCONFLICT_NOTHING";
          case 2:
            return "ONCONFLICT_UPDATE";
          default:
            throw new Error("Key not recognized in enum OnConflictAction");
        }
      }
    case "LimitOption":
      {
        switch (key) {
          case "LIMIT_OPTION_DEFAULT":
            return 0;
          case "LIMIT_OPTION_COUNT":
            return 1;
          case "LIMIT_OPTION_WITH_TIES":
            return 2;
          case 0:
            return "LIMIT_OPTION_DEFAULT";
          case 1:
            return "LIMIT_OPTION_COUNT";
          case 2:
            return "LIMIT_OPTION_WITH_TIES";
          default:
            throw new Error("Key not recognized in enum LimitOption");
        }
      }
    case "LockClauseStrength":
      {
        switch (key) {
          case "LCS_NONE":
            return 0;
          case "LCS_FORKEYSHARE":
            return 1;
          case "LCS_FORSHARE":
            return 2;
          case "LCS_FORNOKEYUPDATE":
            return 3;
          case "LCS_FORUPDATE":
            return 4;
          case 0:
            return "LCS_NONE";
          case 1:
            return "LCS_FORKEYSHARE";
          case 2:
            return "LCS_FORSHARE";
          case 3:
            return "LCS_FORNOKEYUPDATE";
          case 4:
            return "LCS_FORUPDATE";
          default:
            throw new Error("Key not recognized in enum LockClauseStrength");
        }
      }
    case "LockWaitPolicy":
      {
        switch (key) {
          case "LockWaitBlock":
            return 0;
          case "LockWaitSkip":
            return 1;
          case "LockWaitError":
            return 2;
          case 0:
            return "LockWaitBlock";
          case 1:
            return "LockWaitSkip";
          case 2:
            return "LockWaitError";
          default:
            throw new Error("Key not recognized in enum LockWaitPolicy");
        }
      }
    case "LockTupleMode":
      {
        switch (key) {
          case "LockTupleKeyShare":
            return 0;
          case "LockTupleShare":
            return 1;
          case "LockTupleNoKeyExclusive":
            return 2;
          case "LockTupleExclusive":
            return 3;
          case 0:
            return "LockTupleKeyShare";
          case 1:
            return "LockTupleShare";
          case 2:
            return "LockTupleNoKeyExclusive";
          case 3:
            return "LockTupleExclusive";
          default:
            throw new Error("Key not recognized in enum LockTupleMode");
        }
      }
    case "KeywordKind":
      {
        switch (key) {
          case "NO_KEYWORD":
            return 0;
          case "UNRESERVED_KEYWORD":
            return 1;
          case "COL_NAME_KEYWORD":
            return 2;
          case "TYPE_FUNC_NAME_KEYWORD":
            return 3;
          case "RESERVED_KEYWORD":
            return 4;
          case 0:
            return "NO_KEYWORD";
          case 1:
            return "UNRESERVED_KEYWORD";
          case 2:
            return "COL_NAME_KEYWORD";
          case 3:
            return "TYPE_FUNC_NAME_KEYWORD";
          case 4:
            return "RESERVED_KEYWORD";
          default:
            throw new Error("Key not recognized in enum KeywordKind");
        }
      }
    case "Token":
      {
        switch (key) {
          case "NUL":
            return 0;
          case "ASCII_36":
            return 36;
          case "ASCII_37":
            return 37;
          case "ASCII_40":
            return 40;
          case "ASCII_41":
            return 41;
          case "ASCII_42":
            return 42;
          case "ASCII_43":
            return 43;
          case "ASCII_44":
            return 44;
          case "ASCII_45":
            return 45;
          case "ASCII_46":
            return 46;
          case "ASCII_47":
            return 47;
          case "ASCII_58":
            return 58;
          case "ASCII_59":
            return 59;
          case "ASCII_60":
            return 60;
          case "ASCII_61":
            return 61;
          case "ASCII_62":
            return 62;
          case "ASCII_63":
            return 63;
          case "ASCII_91":
            return 91;
          case "ASCII_92":
            return 92;
          case "ASCII_93":
            return 93;
          case "ASCII_94":
            return 94;
          case "IDENT":
            return 258;
          case "UIDENT":
            return 259;
          case "FCONST":
            return 260;
          case "SCONST":
            return 261;
          case "USCONST":
            return 262;
          case "BCONST":
            return 263;
          case "XCONST":
            return 264;
          case "Op":
            return 265;
          case "ICONST":
            return 266;
          case "PARAM":
            return 267;
          case "TYPECAST":
            return 268;
          case "DOT_DOT":
            return 269;
          case "COLON_EQUALS":
            return 270;
          case "EQUALS_GREATER":
            return 271;
          case "LESS_EQUALS":
            return 272;
          case "GREATER_EQUALS":
            return 273;
          case "NOT_EQUALS":
            return 274;
          case "SQL_COMMENT":
            return 275;
          case "C_COMMENT":
            return 276;
          case "ABORT_P":
            return 277;
          case "ABSENT":
            return 278;
          case "ABSOLUTE_P":
            return 279;
          case "ACCESS":
            return 280;
          case "ACTION":
            return 281;
          case "ADD_P":
            return 282;
          case "ADMIN":
            return 283;
          case "AFTER":
            return 284;
          case "AGGREGATE":
            return 285;
          case "ALL":
            return 286;
          case "ALSO":
            return 287;
          case "ALTER":
            return 288;
          case "ALWAYS":
            return 289;
          case "ANALYSE":
            return 290;
          case "ANALYZE":
            return 291;
          case "AND":
            return 292;
          case "ANY":
            return 293;
          case "ARRAY":
            return 294;
          case "AS":
            return 295;
          case "ASC":
            return 296;
          case "ASENSITIVE":
            return 297;
          case "ASSERTION":
            return 298;
          case "ASSIGNMENT":
            return 299;
          case "ASYMMETRIC":
            return 300;
          case "ATOMIC":
            return 301;
          case "AT":
            return 302;
          case "ATTACH":
            return 303;
          case "ATTRIBUTE":
            return 304;
          case "AUTHORIZATION":
            return 305;
          case "BACKWARD":
            return 306;
          case "BEFORE":
            return 307;
          case "BEGIN_P":
            return 308;
          case "BETWEEN":
            return 309;
          case "BIGINT":
            return 310;
          case "BINARY":
            return 311;
          case "BIT":
            return 312;
          case "BOOLEAN_P":
            return 313;
          case "BOTH":
            return 314;
          case "BREADTH":
            return 315;
          case "BY":
            return 316;
          case "CACHE":
            return 317;
          case "CALL":
            return 318;
          case "CALLED":
            return 319;
          case "CASCADE":
            return 320;
          case "CASCADED":
            return 321;
          case "CASE":
            return 322;
          case "CAST":
            return 323;
          case "CATALOG_P":
            return 324;
          case "CHAIN":
            return 325;
          case "CHAR_P":
            return 326;
          case "CHARACTER":
            return 327;
          case "CHARACTERISTICS":
            return 328;
          case "CHECK":
            return 329;
          case "CHECKPOINT":
            return 330;
          case "CLASS":
            return 331;
          case "CLOSE":
            return 332;
          case "CLUSTER":
            return 333;
          case "COALESCE":
            return 334;
          case "COLLATE":
            return 335;
          case "COLLATION":
            return 336;
          case "COLUMN":
            return 337;
          case "COLUMNS":
            return 338;
          case "COMMENT":
            return 339;
          case "COMMENTS":
            return 340;
          case "COMMIT":
            return 341;
          case "COMMITTED":
            return 342;
          case "COMPRESSION":
            return 343;
          case "CONCURRENTLY":
            return 344;
          case "CONFIGURATION":
            return 345;
          case "CONFLICT":
            return 346;
          case "CONNECTION":
            return 347;
          case "CONSTRAINT":
            return 348;
          case "CONSTRAINTS":
            return 349;
          case "CONTENT_P":
            return 350;
          case "CONTINUE_P":
            return 351;
          case "CONVERSION_P":
            return 352;
          case "COPY":
            return 353;
          case "COST":
            return 354;
          case "CREATE":
            return 355;
          case "CROSS":
            return 356;
          case "CSV":
            return 357;
          case "CUBE":
            return 358;
          case "CURRENT_P":
            return 359;
          case "CURRENT_CATALOG":
            return 360;
          case "CURRENT_DATE":
            return 361;
          case "CURRENT_ROLE":
            return 362;
          case "CURRENT_SCHEMA":
            return 363;
          case "CURRENT_TIME":
            return 364;
          case "CURRENT_TIMESTAMP":
            return 365;
          case "CURRENT_USER":
            return 366;
          case "CURSOR":
            return 367;
          case "CYCLE":
            return 368;
          case "DATA_P":
            return 369;
          case "DATABASE":
            return 370;
          case "DAY_P":
            return 371;
          case "DEALLOCATE":
            return 372;
          case "DEC":
            return 373;
          case "DECIMAL_P":
            return 374;
          case "DECLARE":
            return 375;
          case "DEFAULT":
            return 376;
          case "DEFAULTS":
            return 377;
          case "DEFERRABLE":
            return 378;
          case "DEFERRED":
            return 379;
          case "DEFINER":
            return 380;
          case "DELETE_P":
            return 381;
          case "DELIMITER":
            return 382;
          case "DELIMITERS":
            return 383;
          case "DEPENDS":
            return 384;
          case "DEPTH":
            return 385;
          case "DESC":
            return 386;
          case "DETACH":
            return 387;
          case "DICTIONARY":
            return 388;
          case "DISABLE_P":
            return 389;
          case "DISCARD":
            return 390;
          case "DISTINCT":
            return 391;
          case "DO":
            return 392;
          case "DOCUMENT_P":
            return 393;
          case "DOMAIN_P":
            return 394;
          case "DOUBLE_P":
            return 395;
          case "DROP":
            return 396;
          case "EACH":
            return 397;
          case "ELSE":
            return 398;
          case "ENABLE_P":
            return 399;
          case "ENCODING":
            return 400;
          case "ENCRYPTED":
            return 401;
          case "END_P":
            return 402;
          case "ENUM_P":
            return 403;
          case "ESCAPE":
            return 404;
          case "EVENT":
            return 405;
          case "EXCEPT":
            return 406;
          case "EXCLUDE":
            return 407;
          case "EXCLUDING":
            return 408;
          case "EXCLUSIVE":
            return 409;
          case "EXECUTE":
            return 410;
          case "EXISTS":
            return 411;
          case "EXPLAIN":
            return 412;
          case "EXPRESSION":
            return 413;
          case "EXTENSION":
            return 414;
          case "EXTERNAL":
            return 415;
          case "EXTRACT":
            return 416;
          case "FALSE_P":
            return 417;
          case "FAMILY":
            return 418;
          case "FETCH":
            return 419;
          case "FILTER":
            return 420;
          case "FINALIZE":
            return 421;
          case "FIRST_P":
            return 422;
          case "FLOAT_P":
            return 423;
          case "FOLLOWING":
            return 424;
          case "FOR":
            return 425;
          case "FORCE":
            return 426;
          case "FOREIGN":
            return 427;
          case "FORMAT":
            return 428;
          case "FORWARD":
            return 429;
          case "FREEZE":
            return 430;
          case "FROM":
            return 431;
          case "FULL":
            return 432;
          case "FUNCTION":
            return 433;
          case "FUNCTIONS":
            return 434;
          case "GENERATED":
            return 435;
          case "GLOBAL":
            return 436;
          case "GRANT":
            return 437;
          case "GRANTED":
            return 438;
          case "GREATEST":
            return 439;
          case "GROUP_P":
            return 440;
          case "GROUPING":
            return 441;
          case "GROUPS":
            return 442;
          case "HANDLER":
            return 443;
          case "HAVING":
            return 444;
          case "HEADER_P":
            return 445;
          case "HOLD":
            return 446;
          case "HOUR_P":
            return 447;
          case "IDENTITY_P":
            return 448;
          case "IF_P":
            return 449;
          case "ILIKE":
            return 450;
          case "IMMEDIATE":
            return 451;
          case "IMMUTABLE":
            return 452;
          case "IMPLICIT_P":
            return 453;
          case "IMPORT_P":
            return 454;
          case "IN_P":
            return 455;
          case "INCLUDE":
            return 456;
          case "INCLUDING":
            return 457;
          case "INCREMENT":
            return 458;
          case "INDENT":
            return 459;
          case "INDEX":
            return 460;
          case "INDEXES":
            return 461;
          case "INHERIT":
            return 462;
          case "INHERITS":
            return 463;
          case "INITIALLY":
            return 464;
          case "INLINE_P":
            return 465;
          case "INNER_P":
            return 466;
          case "INOUT":
            return 467;
          case "INPUT_P":
            return 468;
          case "INSENSITIVE":
            return 469;
          case "INSERT":
            return 470;
          case "INSTEAD":
            return 471;
          case "INT_P":
            return 472;
          case "INTEGER":
            return 473;
          case "INTERSECT":
            return 474;
          case "INTERVAL":
            return 475;
          case "INTO":
            return 476;
          case "INVOKER":
            return 477;
          case "IS":
            return 478;
          case "ISNULL":
            return 479;
          case "ISOLATION":
            return 480;
          case "JOIN":
            return 481;
          case "JSON":
            return 482;
          case "JSON_ARRAY":
            return 483;
          case "JSON_ARRAYAGG":
            return 484;
          case "JSON_OBJECT":
            return 485;
          case "JSON_OBJECTAGG":
            return 486;
          case "KEY":
            return 487;
          case "KEYS":
            return 488;
          case "LABEL":
            return 489;
          case "LANGUAGE":
            return 490;
          case "LARGE_P":
            return 491;
          case "LAST_P":
            return 492;
          case "LATERAL_P":
            return 493;
          case "LEADING":
            return 494;
          case "LEAKPROOF":
            return 495;
          case "LEAST":
            return 496;
          case "LEFT":
            return 497;
          case "LEVEL":
            return 498;
          case "LIKE":
            return 499;
          case "LIMIT":
            return 500;
          case "LISTEN":
            return 501;
          case "LOAD":
            return 502;
          case "LOCAL":
            return 503;
          case "LOCALTIME":
            return 504;
          case "LOCALTIMESTAMP":
            return 505;
          case "LOCATION":
            return 506;
          case "LOCK_P":
            return 507;
          case "LOCKED":
            return 508;
          case "LOGGED":
            return 509;
          case "MAPPING":
            return 510;
          case "MATCH":
            return 511;
          case "MATCHED":
            return 512;
          case "MATERIALIZED":
            return 513;
          case "MAXVALUE":
            return 514;
          case "MERGE":
            return 515;
          case "METHOD":
            return 516;
          case "MINUTE_P":
            return 517;
          case "MINVALUE":
            return 518;
          case "MODE":
            return 519;
          case "MONTH_P":
            return 520;
          case "MOVE":
            return 521;
          case "NAME_P":
            return 522;
          case "NAMES":
            return 523;
          case "NATIONAL":
            return 524;
          case "NATURAL":
            return 525;
          case "NCHAR":
            return 526;
          case "NEW":
            return 527;
          case "NEXT":
            return 528;
          case "NFC":
            return 529;
          case "NFD":
            return 530;
          case "NFKC":
            return 531;
          case "NFKD":
            return 532;
          case "NO":
            return 533;
          case "NONE":
            return 534;
          case "NORMALIZE":
            return 535;
          case "NORMALIZED":
            return 536;
          case "NOT":
            return 537;
          case "NOTHING":
            return 538;
          case "NOTIFY":
            return 539;
          case "NOTNULL":
            return 540;
          case "NOWAIT":
            return 541;
          case "NULL_P":
            return 542;
          case "NULLIF":
            return 543;
          case "NULLS_P":
            return 544;
          case "NUMERIC":
            return 545;
          case "OBJECT_P":
            return 546;
          case "OF":
            return 547;
          case "OFF":
            return 548;
          case "OFFSET":
            return 549;
          case "OIDS":
            return 550;
          case "OLD":
            return 551;
          case "ON":
            return 552;
          case "ONLY":
            return 553;
          case "OPERATOR":
            return 554;
          case "OPTION":
            return 555;
          case "OPTIONS":
            return 556;
          case "OR":
            return 557;
          case "ORDER":
            return 558;
          case "ORDINALITY":
            return 559;
          case "OTHERS":
            return 560;
          case "OUT_P":
            return 561;
          case "OUTER_P":
            return 562;
          case "OVER":
            return 563;
          case "OVERLAPS":
            return 564;
          case "OVERLAY":
            return 565;
          case "OVERRIDING":
            return 566;
          case "OWNED":
            return 567;
          case "OWNER":
            return 568;
          case "PARALLEL":
            return 569;
          case "PARAMETER":
            return 570;
          case "PARSER":
            return 571;
          case "PARTIAL":
            return 572;
          case "PARTITION":
            return 573;
          case "PASSING":
            return 574;
          case "PASSWORD":
            return 575;
          case "PLACING":
            return 576;
          case "PLANS":
            return 577;
          case "POLICY":
            return 578;
          case "POSITION":
            return 579;
          case "PRECEDING":
            return 580;
          case "PRECISION":
            return 581;
          case "PRESERVE":
            return 582;
          case "PREPARE":
            return 583;
          case "PREPARED":
            return 584;
          case "PRIMARY":
            return 585;
          case "PRIOR":
            return 586;
          case "PRIVILEGES":
            return 587;
          case "PROCEDURAL":
            return 588;
          case "PROCEDURE":
            return 589;
          case "PROCEDURES":
            return 590;
          case "PROGRAM":
            return 591;
          case "PUBLICATION":
            return 592;
          case "QUOTE":
            return 593;
          case "RANGE":
            return 594;
          case "READ":
            return 595;
          case "REAL":
            return 596;
          case "REASSIGN":
            return 597;
          case "RECHECK":
            return 598;
          case "RECURSIVE":
            return 599;
          case "REF_P":
            return 600;
          case "REFERENCES":
            return 601;
          case "REFERENCING":
            return 602;
          case "REFRESH":
            return 603;
          case "REINDEX":
            return 604;
          case "RELATIVE_P":
            return 605;
          case "RELEASE":
            return 606;
          case "RENAME":
            return 607;
          case "REPEATABLE":
            return 608;
          case "REPLACE":
            return 609;
          case "REPLICA":
            return 610;
          case "RESET":
            return 611;
          case "RESTART":
            return 612;
          case "RESTRICT":
            return 613;
          case "RETURN":
            return 614;
          case "RETURNING":
            return 615;
          case "RETURNS":
            return 616;
          case "REVOKE":
            return 617;
          case "RIGHT":
            return 618;
          case "ROLE":
            return 619;
          case "ROLLBACK":
            return 620;
          case "ROLLUP":
            return 621;
          case "ROUTINE":
            return 622;
          case "ROUTINES":
            return 623;
          case "ROW":
            return 624;
          case "ROWS":
            return 625;
          case "RULE":
            return 626;
          case "SAVEPOINT":
            return 627;
          case "SCALAR":
            return 628;
          case "SCHEMA":
            return 629;
          case "SCHEMAS":
            return 630;
          case "SCROLL":
            return 631;
          case "SEARCH":
            return 632;
          case "SECOND_P":
            return 633;
          case "SECURITY":
            return 634;
          case "SELECT":
            return 635;
          case "SEQUENCE":
            return 636;
          case "SEQUENCES":
            return 637;
          case "SERIALIZABLE":
            return 638;
          case "SERVER":
            return 639;
          case "SESSION":
            return 640;
          case "SESSION_USER":
            return 641;
          case "SET":
            return 642;
          case "SETS":
            return 643;
          case "SETOF":
            return 644;
          case "SHARE":
            return 645;
          case "SHOW":
            return 646;
          case "SIMILAR":
            return 647;
          case "SIMPLE":
            return 648;
          case "SKIP":
            return 649;
          case "SMALLINT":
            return 650;
          case "SNAPSHOT":
            return 651;
          case "SOME":
            return 652;
          case "SQL_P":
            return 653;
          case "STABLE":
            return 654;
          case "STANDALONE_P":
            return 655;
          case "START":
            return 656;
          case "STATEMENT":
            return 657;
          case "STATISTICS":
            return 658;
          case "STDIN":
            return 659;
          case "STDOUT":
            return 660;
          case "STORAGE":
            return 661;
          case "STORED":
            return 662;
          case "STRICT_P":
            return 663;
          case "STRIP_P":
            return 664;
          case "SUBSCRIPTION":
            return 665;
          case "SUBSTRING":
            return 666;
          case "SUPPORT":
            return 667;
          case "SYMMETRIC":
            return 668;
          case "SYSID":
            return 669;
          case "SYSTEM_P":
            return 670;
          case "SYSTEM_USER":
            return 671;
          case "TABLE":
            return 672;
          case "TABLES":
            return 673;
          case "TABLESAMPLE":
            return 674;
          case "TABLESPACE":
            return 675;
          case "TEMP":
            return 676;
          case "TEMPLATE":
            return 677;
          case "TEMPORARY":
            return 678;
          case "TEXT_P":
            return 679;
          case "THEN":
            return 680;
          case "TIES":
            return 681;
          case "TIME":
            return 682;
          case "TIMESTAMP":
            return 683;
          case "TO":
            return 684;
          case "TRAILING":
            return 685;
          case "TRANSACTION":
            return 686;
          case "TRANSFORM":
            return 687;
          case "TREAT":
            return 688;
          case "TRIGGER":
            return 689;
          case "TRIM":
            return 690;
          case "TRUE_P":
            return 691;
          case "TRUNCATE":
            return 692;
          case "TRUSTED":
            return 693;
          case "TYPE_P":
            return 694;
          case "TYPES_P":
            return 695;
          case "UESCAPE":
            return 696;
          case "UNBOUNDED":
            return 697;
          case "UNCOMMITTED":
            return 698;
          case "UNENCRYPTED":
            return 699;
          case "UNION":
            return 700;
          case "UNIQUE":
            return 701;
          case "UNKNOWN":
            return 702;
          case "UNLISTEN":
            return 703;
          case "UNLOGGED":
            return 704;
          case "UNTIL":
            return 705;
          case "UPDATE":
            return 706;
          case "USER":
            return 707;
          case "USING":
            return 708;
          case "VACUUM":
            return 709;
          case "VALID":
            return 710;
          case "VALIDATE":
            return 711;
          case "VALIDATOR":
            return 712;
          case "VALUE_P":
            return 713;
          case "VALUES":
            return 714;
          case "VARCHAR":
            return 715;
          case "VARIADIC":
            return 716;
          case "VARYING":
            return 717;
          case "VERBOSE":
            return 718;
          case "VERSION_P":
            return 719;
          case "VIEW":
            return 720;
          case "VIEWS":
            return 721;
          case "VOLATILE":
            return 722;
          case "WHEN":
            return 723;
          case "WHERE":
            return 724;
          case "WHITESPACE_P":
            return 725;
          case "WINDOW":
            return 726;
          case "WITH":
            return 727;
          case "WITHIN":
            return 728;
          case "WITHOUT":
            return 729;
          case "WORK":
            return 730;
          case "WRAPPER":
            return 731;
          case "WRITE":
            return 732;
          case "XML_P":
            return 733;
          case "XMLATTRIBUTES":
            return 734;
          case "XMLCONCAT":
            return 735;
          case "XMLELEMENT":
            return 736;
          case "XMLEXISTS":
            return 737;
          case "XMLFOREST":
            return 738;
          case "XMLNAMESPACES":
            return 739;
          case "XMLPARSE":
            return 740;
          case "XMLPI":
            return 741;
          case "XMLROOT":
            return 742;
          case "XMLSERIALIZE":
            return 743;
          case "XMLTABLE":
            return 744;
          case "YEAR_P":
            return 745;
          case "YES_P":
            return 746;
          case "ZONE":
            return 747;
          case "FORMAT_LA":
            return 748;
          case "NOT_LA":
            return 749;
          case "NULLS_LA":
            return 750;
          case "WITH_LA":
            return 751;
          case "WITHOUT_LA":
            return 752;
          case "MODE_TYPE_NAME":
            return 753;
          case "MODE_PLPGSQL_EXPR":
            return 754;
          case "MODE_PLPGSQL_ASSIGN1":
            return 755;
          case "MODE_PLPGSQL_ASSIGN2":
            return 756;
          case "MODE_PLPGSQL_ASSIGN3":
            return 757;
          case "UMINUS":
            return 758;
          case 0:
            return "NUL";
          case 36:
            return "ASCII_36";
          case 37:
            return "ASCII_37";
          case 40:
            return "ASCII_40";
          case 41:
            return "ASCII_41";
          case 42:
            return "ASCII_42";
          case 43:
            return "ASCII_43";
          case 44:
            return "ASCII_44";
          case 45:
            return "ASCII_45";
          case 46:
            return "ASCII_46";
          case 47:
            return "ASCII_47";
          case 58:
            return "ASCII_58";
          case 59:
            return "ASCII_59";
          case 60:
            return "ASCII_60";
          case 61:
            return "ASCII_61";
          case 62:
            return "ASCII_62";
          case 63:
            return "ASCII_63";
          case 91:
            return "ASCII_91";
          case 92:
            return "ASCII_92";
          case 93:
            return "ASCII_93";
          case 94:
            return "ASCII_94";
          case 258:
            return "IDENT";
          case 259:
            return "UIDENT";
          case 260:
            return "FCONST";
          case 261:
            return "SCONST";
          case 262:
            return "USCONST";
          case 263:
            return "BCONST";
          case 264:
            return "XCONST";
          case 265:
            return "Op";
          case 266:
            return "ICONST";
          case 267:
            return "PARAM";
          case 268:
            return "TYPECAST";
          case 269:
            return "DOT_DOT";
          case 270:
            return "COLON_EQUALS";
          case 271:
            return "EQUALS_GREATER";
          case 272:
            return "LESS_EQUALS";
          case 273:
            return "GREATER_EQUALS";
          case 274:
            return "NOT_EQUALS";
          case 275:
            return "SQL_COMMENT";
          case 276:
            return "C_COMMENT";
          case 277:
            return "ABORT_P";
          case 278:
            return "ABSENT";
          case 279:
            return "ABSOLUTE_P";
          case 280:
            return "ACCESS";
          case 281:
            return "ACTION";
          case 282:
            return "ADD_P";
          case 283:
            return "ADMIN";
          case 284:
            return "AFTER";
          case 285:
            return "AGGREGATE";
          case 286:
            return "ALL";
          case 287:
            return "ALSO";
          case 288:
            return "ALTER";
          case 289:
            return "ALWAYS";
          case 290:
            return "ANALYSE";
          case 291:
            return "ANALYZE";
          case 292:
            return "AND";
          case 293:
            return "ANY";
          case 294:
            return "ARRAY";
          case 295:
            return "AS";
          case 296:
            return "ASC";
          case 297:
            return "ASENSITIVE";
          case 298:
            return "ASSERTION";
          case 299:
            return "ASSIGNMENT";
          case 300:
            return "ASYMMETRIC";
          case 301:
            return "ATOMIC";
          case 302:
            return "AT";
          case 303:
            return "ATTACH";
          case 304:
            return "ATTRIBUTE";
          case 305:
            return "AUTHORIZATION";
          case 306:
            return "BACKWARD";
          case 307:
            return "BEFORE";
          case 308:
            return "BEGIN_P";
          case 309:
            return "BETWEEN";
          case 310:
            return "BIGINT";
          case 311:
            return "BINARY";
          case 312:
            return "BIT";
          case 313:
            return "BOOLEAN_P";
          case 314:
            return "BOTH";
          case 315:
            return "BREADTH";
          case 316:
            return "BY";
          case 317:
            return "CACHE";
          case 318:
            return "CALL";
          case 319:
            return "CALLED";
          case 320:
            return "CASCADE";
          case 321:
            return "CASCADED";
          case 322:
            return "CASE";
          case 323:
            return "CAST";
          case 324:
            return "CATALOG_P";
          case 325:
            return "CHAIN";
          case 326:
            return "CHAR_P";
          case 327:
            return "CHARACTER";
          case 328:
            return "CHARACTERISTICS";
          case 329:
            return "CHECK";
          case 330:
            return "CHECKPOINT";
          case 331:
            return "CLASS";
          case 332:
            return "CLOSE";
          case 333:
            return "CLUSTER";
          case 334:
            return "COALESCE";
          case 335:
            return "COLLATE";
          case 336:
            return "COLLATION";
          case 337:
            return "COLUMN";
          case 338:
            return "COLUMNS";
          case 339:
            return "COMMENT";
          case 340:
            return "COMMENTS";
          case 341:
            return "COMMIT";
          case 342:
            return "COMMITTED";
          case 343:
            return "COMPRESSION";
          case 344:
            return "CONCURRENTLY";
          case 345:
            return "CONFIGURATION";
          case 346:
            return "CONFLICT";
          case 347:
            return "CONNECTION";
          case 348:
            return "CONSTRAINT";
          case 349:
            return "CONSTRAINTS";
          case 350:
            return "CONTENT_P";
          case 351:
            return "CONTINUE_P";
          case 352:
            return "CONVERSION_P";
          case 353:
            return "COPY";
          case 354:
            return "COST";
          case 355:
            return "CREATE";
          case 356:
            return "CROSS";
          case 357:
            return "CSV";
          case 358:
            return "CUBE";
          case 359:
            return "CURRENT_P";
          case 360:
            return "CURRENT_CATALOG";
          case 361:
            return "CURRENT_DATE";
          case 362:
            return "CURRENT_ROLE";
          case 363:
            return "CURRENT_SCHEMA";
          case 364:
            return "CURRENT_TIME";
          case 365:
            return "CURRENT_TIMESTAMP";
          case 366:
            return "CURRENT_USER";
          case 367:
            return "CURSOR";
          case 368:
            return "CYCLE";
          case 369:
            return "DATA_P";
          case 370:
            return "DATABASE";
          case 371:
            return "DAY_P";
          case 372:
            return "DEALLOCATE";
          case 373:
            return "DEC";
          case 374:
            return "DECIMAL_P";
          case 375:
            return "DECLARE";
          case 376:
            return "DEFAULT";
          case 377:
            return "DEFAULTS";
          case 378:
            return "DEFERRABLE";
          case 379:
            return "DEFERRED";
          case 380:
            return "DEFINER";
          case 381:
            return "DELETE_P";
          case 382:
            return "DELIMITER";
          case 383:
            return "DELIMITERS";
          case 384:
            return "DEPENDS";
          case 385:
            return "DEPTH";
          case 386:
            return "DESC";
          case 387:
            return "DETACH";
          case 388:
            return "DICTIONARY";
          case 389:
            return "DISABLE_P";
          case 390:
            return "DISCARD";
          case 391:
            return "DISTINCT";
          case 392:
            return "DO";
          case 393:
            return "DOCUMENT_P";
          case 394:
            return "DOMAIN_P";
          case 395:
            return "DOUBLE_P";
          case 396:
            return "DROP";
          case 397:
            return "EACH";
          case 398:
            return "ELSE";
          case 399:
            return "ENABLE_P";
          case 400:
            return "ENCODING";
          case 401:
            return "ENCRYPTED";
          case 402:
            return "END_P";
          case 403:
            return "ENUM_P";
          case 404:
            return "ESCAPE";
          case 405:
            return "EVENT";
          case 406:
            return "EXCEPT";
          case 407:
            return "EXCLUDE";
          case 408:
            return "EXCLUDING";
          case 409:
            return "EXCLUSIVE";
          case 410:
            return "EXECUTE";
          case 411:
            return "EXISTS";
          case 412:
            return "EXPLAIN";
          case 413:
            return "EXPRESSION";
          case 414:
            return "EXTENSION";
          case 415:
            return "EXTERNAL";
          case 416:
            return "EXTRACT";
          case 417:
            return "FALSE_P";
          case 418:
            return "FAMILY";
          case 419:
            return "FETCH";
          case 420:
            return "FILTER";
          case 421:
            return "FINALIZE";
          case 422:
            return "FIRST_P";
          case 423:
            return "FLOAT_P";
          case 424:
            return "FOLLOWING";
          case 425:
            return "FOR";
          case 426:
            return "FORCE";
          case 427:
            return "FOREIGN";
          case 428:
            return "FORMAT";
          case 429:
            return "FORWARD";
          case 430:
            return "FREEZE";
          case 431:
            return "FROM";
          case 432:
            return "FULL";
          case 433:
            return "FUNCTION";
          case 434:
            return "FUNCTIONS";
          case 435:
            return "GENERATED";
          case 436:
            return "GLOBAL";
          case 437:
            return "GRANT";
          case 438:
            return "GRANTED";
          case 439:
            return "GREATEST";
          case 440:
            return "GROUP_P";
          case 441:
            return "GROUPING";
          case 442:
            return "GROUPS";
          case 443:
            return "HANDLER";
          case 444:
            return "HAVING";
          case 445:
            return "HEADER_P";
          case 446:
            return "HOLD";
          case 447:
            return "HOUR_P";
          case 448:
            return "IDENTITY_P";
          case 449:
            return "IF_P";
          case 450:
            return "ILIKE";
          case 451:
            return "IMMEDIATE";
          case 452:
            return "IMMUTABLE";
          case 453:
            return "IMPLICIT_P";
          case 454:
            return "IMPORT_P";
          case 455:
            return "IN_P";
          case 456:
            return "INCLUDE";
          case 457:
            return "INCLUDING";
          case 458:
            return "INCREMENT";
          case 459:
            return "INDENT";
          case 460:
            return "INDEX";
          case 461:
            return "INDEXES";
          case 462:
            return "INHERIT";
          case 463:
            return "INHERITS";
          case 464:
            return "INITIALLY";
          case 465:
            return "INLINE_P";
          case 466:
            return "INNER_P";
          case 467:
            return "INOUT";
          case 468:
            return "INPUT_P";
          case 469:
            return "INSENSITIVE";
          case 470:
            return "INSERT";
          case 471:
            return "INSTEAD";
          case 472:
            return "INT_P";
          case 473:
            return "INTEGER";
          case 474:
            return "INTERSECT";
          case 475:
            return "INTERVAL";
          case 476:
            return "INTO";
          case 477:
            return "INVOKER";
          case 478:
            return "IS";
          case 479:
            return "ISNULL";
          case 480:
            return "ISOLATION";
          case 481:
            return "JOIN";
          case 482:
            return "JSON";
          case 483:
            return "JSON_ARRAY";
          case 484:
            return "JSON_ARRAYAGG";
          case 485:
            return "JSON_OBJECT";
          case 486:
            return "JSON_OBJECTAGG";
          case 487:
            return "KEY";
          case 488:
            return "KEYS";
          case 489:
            return "LABEL";
          case 490:
            return "LANGUAGE";
          case 491:
            return "LARGE_P";
          case 492:
            return "LAST_P";
          case 493:
            return "LATERAL_P";
          case 494:
            return "LEADING";
          case 495:
            return "LEAKPROOF";
          case 496:
            return "LEAST";
          case 497:
            return "LEFT";
          case 498:
            return "LEVEL";
          case 499:
            return "LIKE";
          case 500:
            return "LIMIT";
          case 501:
            return "LISTEN";
          case 502:
            return "LOAD";
          case 503:
            return "LOCAL";
          case 504:
            return "LOCALTIME";
          case 505:
            return "LOCALTIMESTAMP";
          case 506:
            return "LOCATION";
          case 507:
            return "LOCK_P";
          case 508:
            return "LOCKED";
          case 509:
            return "LOGGED";
          case 510:
            return "MAPPING";
          case 511:
            return "MATCH";
          case 512:
            return "MATCHED";
          case 513:
            return "MATERIALIZED";
          case 514:
            return "MAXVALUE";
          case 515:
            return "MERGE";
          case 516:
            return "METHOD";
          case 517:
            return "MINUTE_P";
          case 518:
            return "MINVALUE";
          case 519:
            return "MODE";
          case 520:
            return "MONTH_P";
          case 521:
            return "MOVE";
          case 522:
            return "NAME_P";
          case 523:
            return "NAMES";
          case 524:
            return "NATIONAL";
          case 525:
            return "NATURAL";
          case 526:
            return "NCHAR";
          case 527:
            return "NEW";
          case 528:
            return "NEXT";
          case 529:
            return "NFC";
          case 530:
            return "NFD";
          case 531:
            return "NFKC";
          case 532:
            return "NFKD";
          case 533:
            return "NO";
          case 534:
            return "NONE";
          case 535:
            return "NORMALIZE";
          case 536:
            return "NORMALIZED";
          case 537:
            return "NOT";
          case 538:
            return "NOTHING";
          case 539:
            return "NOTIFY";
          case 540:
            return "NOTNULL";
          case 541:
            return "NOWAIT";
          case 542:
            return "NULL_P";
          case 543:
            return "NULLIF";
          case 544:
            return "NULLS_P";
          case 545:
            return "NUMERIC";
          case 546:
            return "OBJECT_P";
          case 547:
            return "OF";
          case 548:
            return "OFF";
          case 549:
            return "OFFSET";
          case 550:
            return "OIDS";
          case 551:
            return "OLD";
          case 552:
            return "ON";
          case 553:
            return "ONLY";
          case 554:
            return "OPERATOR";
          case 555:
            return "OPTION";
          case 556:
            return "OPTIONS";
          case 557:
            return "OR";
          case 558:
            return "ORDER";
          case 559:
            return "ORDINALITY";
          case 560:
            return "OTHERS";
          case 561:
            return "OUT_P";
          case 562:
            return "OUTER_P";
          case 563:
            return "OVER";
          case 564:
            return "OVERLAPS";
          case 565:
            return "OVERLAY";
          case 566:
            return "OVERRIDING";
          case 567:
            return "OWNED";
          case 568:
            return "OWNER";
          case 569:
            return "PARALLEL";
          case 570:
            return "PARAMETER";
          case 571:
            return "PARSER";
          case 572:
            return "PARTIAL";
          case 573:
            return "PARTITION";
          case 574:
            return "PASSING";
          case 575:
            return "PASSWORD";
          case 576:
            return "PLACING";
          case 577:
            return "PLANS";
          case 578:
            return "POLICY";
          case 579:
            return "POSITION";
          case 580:
            return "PRECEDING";
          case 581:
            return "PRECISION";
          case 582:
            return "PRESERVE";
          case 583:
            return "PREPARE";
          case 584:
            return "PREPARED";
          case 585:
            return "PRIMARY";
          case 586:
            return "PRIOR";
          case 587:
            return "PRIVILEGES";
          case 588:
            return "PROCEDURAL";
          case 589:
            return "PROCEDURE";
          case 590:
            return "PROCEDURES";
          case 591:
            return "PROGRAM";
          case 592:
            return "PUBLICATION";
          case 593:
            return "QUOTE";
          case 594:
            return "RANGE";
          case 595:
            return "READ";
          case 596:
            return "REAL";
          case 597:
            return "REASSIGN";
          case 598:
            return "RECHECK";
          case 599:
            return "RECURSIVE";
          case 600:
            return "REF_P";
          case 601:
            return "REFERENCES";
          case 602:
            return "REFERENCING";
          case 603:
            return "REFRESH";
          case 604:
            return "REINDEX";
          case 605:
            return "RELATIVE_P";
          case 606:
            return "RELEASE";
          case 607:
            return "RENAME";
          case 608:
            return "REPEATABLE";
          case 609:
            return "REPLACE";
          case 610:
            return "REPLICA";
          case 611:
            return "RESET";
          case 612:
            return "RESTART";
          case 613:
            return "RESTRICT";
          case 614:
            return "RETURN";
          case 615:
            return "RETURNING";
          case 616:
            return "RETURNS";
          case 617:
            return "REVOKE";
          case 618:
            return "RIGHT";
          case 619:
            return "ROLE";
          case 620:
            return "ROLLBACK";
          case 621:
            return "ROLLUP";
          case 622:
            return "ROUTINE";
          case 623:
            return "ROUTINES";
          case 624:
            return "ROW";
          case 625:
            return "ROWS";
          case 626:
            return "RULE";
          case 627:
            return "SAVEPOINT";
          case 628:
            return "SCALAR";
          case 629:
            return "SCHEMA";
          case 630:
            return "SCHEMAS";
          case 631:
            return "SCROLL";
          case 632:
            return "SEARCH";
          case 633:
            return "SECOND_P";
          case 634:
            return "SECURITY";
          case 635:
            return "SELECT";
          case 636:
            return "SEQUENCE";
          case 637:
            return "SEQUENCES";
          case 638:
            return "SERIALIZABLE";
          case 639:
            return "SERVER";
          case 640:
            return "SESSION";
          case 641:
            return "SESSION_USER";
          case 642:
            return "SET";
          case 643:
            return "SETS";
          case 644:
            return "SETOF";
          case 645:
            return "SHARE";
          case 646:
            return "SHOW";
          case 647:
            return "SIMILAR";
          case 648:
            return "SIMPLE";
          case 649:
            return "SKIP";
          case 650:
            return "SMALLINT";
          case 651:
            return "SNAPSHOT";
          case 652:
            return "SOME";
          case 653:
            return "SQL_P";
          case 654:
            return "STABLE";
          case 655:
            return "STANDALONE_P";
          case 656:
            return "START";
          case 657:
            return "STATEMENT";
          case 658:
            return "STATISTICS";
          case 659:
            return "STDIN";
          case 660:
            return "STDOUT";
          case 661:
            return "STORAGE";
          case 662:
            return "STORED";
          case 663:
            return "STRICT_P";
          case 664:
            return "STRIP_P";
          case 665:
            return "SUBSCRIPTION";
          case 666:
            return "SUBSTRING";
          case 667:
            return "SUPPORT";
          case 668:
            return "SYMMETRIC";
          case 669:
            return "SYSID";
          case 670:
            return "SYSTEM_P";
          case 671:
            return "SYSTEM_USER";
          case 672:
            return "TABLE";
          case 673:
            return "TABLES";
          case 674:
            return "TABLESAMPLE";
          case 675:
            return "TABLESPACE";
          case 676:
            return "TEMP";
          case 677:
            return "TEMPLATE";
          case 678:
            return "TEMPORARY";
          case 679:
            return "TEXT_P";
          case 680:
            return "THEN";
          case 681:
            return "TIES";
          case 682:
            return "TIME";
          case 683:
            return "TIMESTAMP";
          case 684:
            return "TO";
          case 685:
            return "TRAILING";
          case 686:
            return "TRANSACTION";
          case 687:
            return "TRANSFORM";
          case 688:
            return "TREAT";
          case 689:
            return "TRIGGER";
          case 690:
            return "TRIM";
          case 691:
            return "TRUE_P";
          case 692:
            return "TRUNCATE";
          case 693:
            return "TRUSTED";
          case 694:
            return "TYPE_P";
          case 695:
            return "TYPES_P";
          case 696:
            return "UESCAPE";
          case 697:
            return "UNBOUNDED";
          case 698:
            return "UNCOMMITTED";
          case 699:
            return "UNENCRYPTED";
          case 700:
            return "UNION";
          case 701:
            return "UNIQUE";
          case 702:
            return "UNKNOWN";
          case 703:
            return "UNLISTEN";
          case 704:
            return "UNLOGGED";
          case 705:
            return "UNTIL";
          case 706:
            return "UPDATE";
          case 707:
            return "USER";
          case 708:
            return "USING";
          case 709:
            return "VACUUM";
          case 710:
            return "VALID";
          case 711:
            return "VALIDATE";
          case 712:
            return "VALIDATOR";
          case 713:
            return "VALUE_P";
          case 714:
            return "VALUES";
          case 715:
            return "VARCHAR";
          case 716:
            return "VARIADIC";
          case 717:
            return "VARYING";
          case 718:
            return "VERBOSE";
          case 719:
            return "VERSION_P";
          case 720:
            return "VIEW";
          case 721:
            return "VIEWS";
          case 722:
            return "VOLATILE";
          case 723:
            return "WHEN";
          case 724:
            return "WHERE";
          case 725:
            return "WHITESPACE_P";
          case 726:
            return "WINDOW";
          case 727:
            return "WITH";
          case 728:
            return "WITHIN";
          case 729:
            return "WITHOUT";
          case 730:
            return "WORK";
          case 731:
            return "WRAPPER";
          case 732:
            return "WRITE";
          case 733:
            return "XML_P";
          case 734:
            return "XMLATTRIBUTES";
          case 735:
            return "XMLCONCAT";
          case 736:
            return "XMLELEMENT";
          case 737:
            return "XMLEXISTS";
          case 738:
            return "XMLFOREST";
          case 739:
            return "XMLNAMESPACES";
          case 740:
            return "XMLPARSE";
          case 741:
            return "XMLPI";
          case 742:
            return "XMLROOT";
          case 743:
            return "XMLSERIALIZE";
          case 744:
            return "XMLTABLE";
          case 745:
            return "YEAR_P";
          case 746:
            return "YES_P";
          case 747:
            return "ZONE";
          case 748:
            return "FORMAT_LA";
          case 749:
            return "NOT_LA";
          case 750:
            return "NULLS_LA";
          case 751:
            return "WITH_LA";
          case 752:
            return "WITHOUT_LA";
          case 753:
            return "MODE_TYPE_NAME";
          case 754:
            return "MODE_PLPGSQL_EXPR";
          case 755:
            return "MODE_PLPGSQL_ASSIGN1";
          case 756:
            return "MODE_PLPGSQL_ASSIGN2";
          case 757:
            return "MODE_PLPGSQL_ASSIGN3";
          case 758:
            return "UMINUS";
          default:
            throw new Error("Key not recognized in enum Token");
        }
      }
    default:
      throw new Error("Enum type not recognized");
  }
};",
    "file": "utils.ts",
  },
]
`;

exports[`utils astHelpers with inlineNestedObj 1`] = `
[
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
import _o from "./path-obj";
import { ParseResult, ScanResult, Node, Integer, Float, Boolean, String, BitString, List, OidList, IntList, A_Const, Alias, RangeVar, TableFunc, IntoClause, Var, Param, Aggref, GroupingFunc, WindowFunc, SubscriptingRef, FuncExpr, NamedArgExpr, OpExpr, DistinctExpr, NullIfExpr, ScalarArrayOpExpr, BoolExpr, SubLink, SubPlan, AlternativeSubPlan, FieldSelect, FieldStore, RelabelType, CoerceViaIO, ArrayCoerceExpr, ConvertRowtypeExpr, CollateExpr, CaseExpr, CaseWhen, CaseTestExpr, ArrayExpr, RowExpr, RowCompareExpr, CoalesceExpr, MinMaxExpr, SQLValueFunction, XmlExpr, JsonFormat, JsonReturning, JsonValueExpr, JsonConstructorExpr, JsonIsPredicate, NullTest, BooleanTest, CoerceToDomain, CoerceToDomainValue, SetToDefault, CurrentOfExpr, NextValueExpr, InferenceElem, TargetEntry, RangeTblRef, JoinExpr, FromExpr, OnConflictExpr, Query, TypeName, ColumnRef, ParamRef, A_Expr, TypeCast, CollateClause, RoleSpec, FuncCall, A_Star, A_Indices, A_Indirection, A_ArrayExpr, ResTarget, MultiAssignRef, SortBy, WindowDef, RangeSubselect, RangeFunction, RangeTableFunc, RangeTableFuncCol, RangeTableSample, ColumnDef, TableLikeClause, IndexElem, DefElem, LockingClause, XmlSerialize, PartitionElem, PartitionSpec, PartitionBoundSpec, PartitionRangeDatum, PartitionCmd, RangeTblEntry, RTEPermissionInfo, RangeTblFunction, TableSampleClause, WithCheckOption, SortGroupClause, GroupingSet, WindowClause, RowMarkClause, WithClause, InferClause, OnConflictClause, CTESearchClause, CTECycleClause, CommonTableExpr, MergeWhenClause, MergeAction, TriggerTransition, JsonOutput, JsonKeyValue, JsonObjectConstructor, JsonArrayConstructor, JsonArrayQueryConstructor, JsonAggConstructor, JsonObjectAgg, JsonArrayAgg, RawStmt, InsertStmt, DeleteStmt, UpdateStmt, MergeStmt, SelectStmt, SetOperationStmt, ReturnStmt, PLAssignStmt, CreateSchemaStmt, AlterTableStmt, ReplicaIdentityStmt, AlterTableCmd, AlterCollationStmt, AlterDomainStmt, GrantStmt, ObjectWithArgs, AccessPriv, GrantRoleStmt, AlterDefaultPrivilegesStmt, CopyStmt, VariableSetStmt, VariableShowStmt, CreateStmt, Constraint, CreateTableSpaceStmt, DropTableSpaceStmt, AlterTableSpaceOptionsStmt, AlterTableMoveAllStmt, CreateExtensionStmt, AlterExtensionStmt, AlterExtensionContentsStmt, CreateFdwStmt, AlterFdwStmt, CreateForeignServerStmt, AlterForeignServerStmt, CreateForeignTableStmt, CreateUserMappingStmt, AlterUserMappingStmt, DropUserMappingStmt, ImportForeignSchemaStmt, CreatePolicyStmt, AlterPolicyStmt, CreateAmStmt, CreateTrigStmt, CreateEventTrigStmt, AlterEventTrigStmt, CreatePLangStmt, CreateRoleStmt, AlterRoleStmt, AlterRoleSetStmt, DropRoleStmt, CreateSeqStmt, AlterSeqStmt, DefineStmt, CreateDomainStmt, CreateOpClassStmt, CreateOpClassItem, CreateOpFamilyStmt, AlterOpFamilyStmt, DropStmt, TruncateStmt, CommentStmt, SecLabelStmt, DeclareCursorStmt, ClosePortalStmt, FetchStmt, IndexStmt, CreateStatsStmt, StatsElem, AlterStatsStmt, CreateFunctionStmt, FunctionParameter, AlterFunctionStmt, DoStmt, InlineCodeBlock, CallStmt, CallContext, RenameStmt, AlterObjectDependsStmt, AlterObjectSchemaStmt, AlterOwnerStmt, AlterOperatorStmt, AlterTypeStmt, RuleStmt, NotifyStmt, ListenStmt, UnlistenStmt, TransactionStmt, CompositeTypeStmt, CreateEnumStmt, CreateRangeStmt, AlterEnumStmt, ViewStmt, LoadStmt, CreatedbStmt, AlterDatabaseStmt, AlterDatabaseRefreshCollStmt, AlterDatabaseSetStmt, DropdbStmt, AlterSystemStmt, ClusterStmt, VacuumStmt, VacuumRelation, ExplainStmt, CreateTableAsStmt, RefreshMatViewStmt, CheckPointStmt, DiscardStmt, LockStmt, ConstraintsSetStmt, ReindexStmt, CreateConversionStmt, CreateCastStmt, CreateTransformStmt, PrepareStmt, ExecuteStmt, DeallocateStmt, DropOwnedStmt, ReassignOwnedStmt, AlterTSDictionaryStmt, AlterTSConfigurationStmt, PublicationTable, PublicationObjSpec, CreatePublicationStmt, AlterPublicationStmt, CreateSubscriptionStmt, AlterSubscriptionStmt, DropSubscriptionStmt, ScanToken } from "./types";
export default {
  parseResult(_p?: ParseResult["ParseResult"]): ParseResult {
    const _j = ({
      ParseResult: {}
    } as ParseResult);
    _o.set(_j, "ParseResult.version", _p?.version);
    _o.set(_j, "ParseResult.stmts", _p?.stmts);
    return _j;
  },
  scanResult(_p?: ScanResult["ScanResult"]): ScanResult {
    const _j = ({
      ScanResult: {}
    } as ScanResult);
    _o.set(_j, "ScanResult.version", _p?.version);
    _o.set(_j, "ScanResult.tokens", _p?.tokens);
    return _j;
  },
  integer(_p?: Integer["Integer"]): Integer {
    const _j = ({
      Integer: {}
    } as Integer);
    _o.set(_j, "Integer.ival", _p?.ival);
    return _j;
  },
  float(_p?: Float["Float"]): Float {
    const _j = ({
      Float: {}
    } as Float);
    _o.set(_j, "Float.fval", _p?.fval);
    return _j;
  },
  boolean(_p?: Boolean["Boolean"]): Boolean {
    const _j = ({
      Boolean: {}
    } as Boolean);
    _o.set(_j, "Boolean.boolval", _p?.boolval);
    return _j;
  },
  string(_p?: String["String"]): String {
    const _j = ({
      String: {}
    } as String);
    _o.set(_j, "String.sval", _p?.sval);
    return _j;
  },
  bitString(_p?: BitString["BitString"]): BitString {
    const _j = ({
      BitString: {}
    } as BitString);
    _o.set(_j, "BitString.bsval", _p?.bsval);
    return _j;
  },
  list(_p?: List["List"]): List {
    const _j = ({
      List: {}
    } as List);
    _o.set(_j, "List.items", _p?.items);
    return _j;
  },
  oidList(_p?: OidList["OidList"]): OidList {
    const _j = ({
      OidList: {}
    } as OidList);
    _o.set(_j, "OidList.items", _p?.items);
    return _j;
  },
  intList(_p?: IntList["IntList"]): IntList {
    const _j = ({
      IntList: {}
    } as IntList);
    _o.set(_j, "IntList.items", _p?.items);
    return _j;
  },
  aConst(_p?: A_Const["A_Const"]): A_Const {
    const _j = ({
      A_Const: {}
    } as A_Const);
    _o.set(_j, "A_Const.ival", _p?.ival);
    _o.set(_j, "A_Const.fval", _p?.fval);
    _o.set(_j, "A_Const.boolval", _p?.boolval);
    _o.set(_j, "A_Const.sval", _p?.sval);
    _o.set(_j, "A_Const.bsval", _p?.bsval);
    _o.set(_j, "A_Const.isnull", _p?.isnull);
    _o.set(_j, "A_Const.location", _p?.location);
    return _j;
  },
  alias(_p?: Alias["Alias"]): Alias {
    const _j = ({
      Alias: {}
    } as Alias);
    _o.set(_j, "Alias.aliasname", _p?.aliasname);
    _o.set(_j, "Alias.colnames", _p?.colnames);
    return _j;
  },
  rangeVar(_p?: RangeVar["RangeVar"]): RangeVar {
    const _j = ({
      RangeVar: {}
    } as RangeVar);
    _o.set(_j, "RangeVar.catalogname", _p?.catalogname);
    _o.set(_j, "RangeVar.schemaname", _p?.schemaname);
    _o.set(_j, "RangeVar.relname", _p?.relname);
    _o.set(_j, "RangeVar.inh", _p?.inh);
    _o.set(_j, "RangeVar.relpersistence", _p?.relpersistence);
    _o.set(_j, "RangeVar.alias", _p?.alias);
    _o.set(_j, "RangeVar.location", _p?.location);
    return _j;
  },
  tableFunc(_p?: TableFunc["TableFunc"]): TableFunc {
    const _j = ({
      TableFunc: {}
    } as TableFunc);
    _o.set(_j, "TableFunc.ns_uris", _p?.ns_uris);
    _o.set(_j, "TableFunc.ns_names", _p?.ns_names);
    _o.set(_j, "TableFunc.docexpr", _p?.docexpr);
    _o.set(_j, "TableFunc.rowexpr", _p?.rowexpr);
    _o.set(_j, "TableFunc.colnames", _p?.colnames);
    _o.set(_j, "TableFunc.coltypes", _p?.coltypes);
    _o.set(_j, "TableFunc.coltypmods", _p?.coltypmods);
    _o.set(_j, "TableFunc.colcollations", _p?.colcollations);
    _o.set(_j, "TableFunc.colexprs", _p?.colexprs);
    _o.set(_j, "TableFunc.coldefexprs", _p?.coldefexprs);
    _o.set(_j, "TableFunc.notnulls", _p?.notnulls);
    _o.set(_j, "TableFunc.ordinalitycol", _p?.ordinalitycol);
    _o.set(_j, "TableFunc.location", _p?.location);
    return _j;
  },
  intoClause(_p?: IntoClause["IntoClause"]): IntoClause {
    const _j = ({
      IntoClause: {}
    } as IntoClause);
    _o.set(_j, "IntoClause.rel", _p?.rel);
    _o.set(_j, "IntoClause.colNames", _p?.colNames);
    _o.set(_j, "IntoClause.accessMethod", _p?.accessMethod);
    _o.set(_j, "IntoClause.options", _p?.options);
    _o.set(_j, "IntoClause.onCommit", _p?.onCommit);
    _o.set(_j, "IntoClause.tableSpaceName", _p?.tableSpaceName);
    _o.set(_j, "IntoClause.viewQuery", _p?.viewQuery);
    _o.set(_j, "IntoClause.skipData", _p?.skipData);
    return _j;
  },
  var(_p?: Var["Var"]): Var {
    const _j = ({
      Var: {}
    } as Var);
    _o.set(_j, "Var.xpr", _p?.xpr);
    _o.set(_j, "Var.varno", _p?.varno);
    _o.set(_j, "Var.varattno", _p?.varattno);
    _o.set(_j, "Var.vartype", _p?.vartype);
    _o.set(_j, "Var.vartypmod", _p?.vartypmod);
    _o.set(_j, "Var.varcollid", _p?.varcollid);
    _o.set(_j, "Var.varnullingrels", _p?.varnullingrels);
    _o.set(_j, "Var.varlevelsup", _p?.varlevelsup);
    _o.set(_j, "Var.location", _p?.location);
    return _j;
  },
  param(_p?: Param["Param"]): Param {
    const _j = ({
      Param: {}
    } as Param);
    _o.set(_j, "Param.xpr", _p?.xpr);
    _o.set(_j, "Param.paramkind", _p?.paramkind);
    _o.set(_j, "Param.paramid", _p?.paramid);
    _o.set(_j, "Param.paramtype", _p?.paramtype);
    _o.set(_j, "Param.paramtypmod", _p?.paramtypmod);
    _o.set(_j, "Param.paramcollid", _p?.paramcollid);
    _o.set(_j, "Param.location", _p?.location);
    return _j;
  },
  aggref(_p?: Aggref["Aggref"]): Aggref {
    const _j = ({
      Aggref: {}
    } as Aggref);
    _o.set(_j, "Aggref.xpr", _p?.xpr);
    _o.set(_j, "Aggref.aggfnoid", _p?.aggfnoid);
    _o.set(_j, "Aggref.aggtype", _p?.aggtype);
    _o.set(_j, "Aggref.aggcollid", _p?.aggcollid);
    _o.set(_j, "Aggref.inputcollid", _p?.inputcollid);
    _o.set(_j, "Aggref.aggargtypes", _p?.aggargtypes);
    _o.set(_j, "Aggref.aggdirectargs", _p?.aggdirectargs);
    _o.set(_j, "Aggref.args", _p?.args);
    _o.set(_j, "Aggref.aggorder", _p?.aggorder);
    _o.set(_j, "Aggref.aggdistinct", _p?.aggdistinct);
    _o.set(_j, "Aggref.aggfilter", _p?.aggfilter);
    _o.set(_j, "Aggref.aggstar", _p?.aggstar);
    _o.set(_j, "Aggref.aggvariadic", _p?.aggvariadic);
    _o.set(_j, "Aggref.aggkind", _p?.aggkind);
    _o.set(_j, "Aggref.agglevelsup", _p?.agglevelsup);
    _o.set(_j, "Aggref.aggsplit", _p?.aggsplit);
    _o.set(_j, "Aggref.aggno", _p?.aggno);
    _o.set(_j, "Aggref.aggtransno", _p?.aggtransno);
    _o.set(_j, "Aggref.location", _p?.location);
    return _j;
  },
  groupingFunc(_p?: GroupingFunc["GroupingFunc"]): GroupingFunc {
    const _j = ({
      GroupingFunc: {}
    } as GroupingFunc);
    _o.set(_j, "GroupingFunc.xpr", _p?.xpr);
    _o.set(_j, "GroupingFunc.args", _p?.args);
    _o.set(_j, "GroupingFunc.refs", _p?.refs);
    _o.set(_j, "GroupingFunc.agglevelsup", _p?.agglevelsup);
    _o.set(_j, "GroupingFunc.location", _p?.location);
    return _j;
  },
  windowFunc(_p?: WindowFunc["WindowFunc"]): WindowFunc {
    const _j = ({
      WindowFunc: {}
    } as WindowFunc);
    _o.set(_j, "WindowFunc.xpr", _p?.xpr);
    _o.set(_j, "WindowFunc.winfnoid", _p?.winfnoid);
    _o.set(_j, "WindowFunc.wintype", _p?.wintype);
    _o.set(_j, "WindowFunc.wincollid", _p?.wincollid);
    _o.set(_j, "WindowFunc.inputcollid", _p?.inputcollid);
    _o.set(_j, "WindowFunc.args", _p?.args);
    _o.set(_j, "WindowFunc.aggfilter", _p?.aggfilter);
    _o.set(_j, "WindowFunc.winref", _p?.winref);
    _o.set(_j, "WindowFunc.winstar", _p?.winstar);
    _o.set(_j, "WindowFunc.winagg", _p?.winagg);
    _o.set(_j, "WindowFunc.location", _p?.location);
    return _j;
  },
  subscriptingRef(_p?: SubscriptingRef["SubscriptingRef"]): SubscriptingRef {
    const _j = ({
      SubscriptingRef: {}
    } as SubscriptingRef);
    _o.set(_j, "SubscriptingRef.xpr", _p?.xpr);
    _o.set(_j, "SubscriptingRef.refcontainertype", _p?.refcontainertype);
    _o.set(_j, "SubscriptingRef.refelemtype", _p?.refelemtype);
    _o.set(_j, "SubscriptingRef.refrestype", _p?.refrestype);
    _o.set(_j, "SubscriptingRef.reftypmod", _p?.reftypmod);
    _o.set(_j, "SubscriptingRef.refcollid", _p?.refcollid);
    _o.set(_j, "SubscriptingRef.refupperindexpr", _p?.refupperindexpr);
    _o.set(_j, "SubscriptingRef.reflowerindexpr", _p?.reflowerindexpr);
    _o.set(_j, "SubscriptingRef.refexpr", _p?.refexpr);
    _o.set(_j, "SubscriptingRef.refassgnexpr", _p?.refassgnexpr);
    return _j;
  },
  funcExpr(_p?: FuncExpr["FuncExpr"]): FuncExpr {
    const _j = ({
      FuncExpr: {}
    } as FuncExpr);
    _o.set(_j, "FuncExpr.xpr", _p?.xpr);
    _o.set(_j, "FuncExpr.funcid", _p?.funcid);
    _o.set(_j, "FuncExpr.funcresulttype", _p?.funcresulttype);
    _o.set(_j, "FuncExpr.funcretset", _p?.funcretset);
    _o.set(_j, "FuncExpr.funcvariadic", _p?.funcvariadic);
    _o.set(_j, "FuncExpr.funcformat", _p?.funcformat);
    _o.set(_j, "FuncExpr.funccollid", _p?.funccollid);
    _o.set(_j, "FuncExpr.inputcollid", _p?.inputcollid);
    _o.set(_j, "FuncExpr.args", _p?.args);
    _o.set(_j, "FuncExpr.location", _p?.location);
    return _j;
  },
  namedArgExpr(_p?: NamedArgExpr["NamedArgExpr"]): NamedArgExpr {
    const _j = ({
      NamedArgExpr: {}
    } as NamedArgExpr);
    _o.set(_j, "NamedArgExpr.xpr", _p?.xpr);
    _o.set(_j, "NamedArgExpr.arg", _p?.arg);
    _o.set(_j, "NamedArgExpr.name", _p?.name);
    _o.set(_j, "NamedArgExpr.argnumber", _p?.argnumber);
    _o.set(_j, "NamedArgExpr.location", _p?.location);
    return _j;
  },
  opExpr(_p?: OpExpr["OpExpr"]): OpExpr {
    const _j = ({
      OpExpr: {}
    } as OpExpr);
    _o.set(_j, "OpExpr.xpr", _p?.xpr);
    _o.set(_j, "OpExpr.opno", _p?.opno);
    _o.set(_j, "OpExpr.opresulttype", _p?.opresulttype);
    _o.set(_j, "OpExpr.opretset", _p?.opretset);
    _o.set(_j, "OpExpr.opcollid", _p?.opcollid);
    _o.set(_j, "OpExpr.inputcollid", _p?.inputcollid);
    _o.set(_j, "OpExpr.args", _p?.args);
    _o.set(_j, "OpExpr.location", _p?.location);
    return _j;
  },
  distinctExpr(_p?: DistinctExpr["DistinctExpr"]): DistinctExpr {
    const _j = ({
      DistinctExpr: {}
    } as DistinctExpr);
    _o.set(_j, "DistinctExpr.xpr", _p?.xpr);
    _o.set(_j, "DistinctExpr.opno", _p?.opno);
    _o.set(_j, "DistinctExpr.opresulttype", _p?.opresulttype);
    _o.set(_j, "DistinctExpr.opretset", _p?.opretset);
    _o.set(_j, "DistinctExpr.opcollid", _p?.opcollid);
    _o.set(_j, "DistinctExpr.inputcollid", _p?.inputcollid);
    _o.set(_j, "DistinctExpr.args", _p?.args);
    _o.set(_j, "DistinctExpr.location", _p?.location);
    return _j;
  },
  nullIfExpr(_p?: NullIfExpr["NullIfExpr"]): NullIfExpr {
    const _j = ({
      NullIfExpr: {}
    } as NullIfExpr);
    _o.set(_j, "NullIfExpr.xpr", _p?.xpr);
    _o.set(_j, "NullIfExpr.opno", _p?.opno);
    _o.set(_j, "NullIfExpr.opresulttype", _p?.opresulttype);
    _o.set(_j, "NullIfExpr.opretset", _p?.opretset);
    _o.set(_j, "NullIfExpr.opcollid", _p?.opcollid);
    _o.set(_j, "NullIfExpr.inputcollid", _p?.inputcollid);
    _o.set(_j, "NullIfExpr.args", _p?.args);
    _o.set(_j, "NullIfExpr.location", _p?.location);
    return _j;
  },
  scalarArrayOpExpr(_p?: ScalarArrayOpExpr["ScalarArrayOpExpr"]): ScalarArrayOpExpr {
    const _j = ({
      ScalarArrayOpExpr: {}
    } as ScalarArrayOpExpr);
    _o.set(_j, "ScalarArrayOpExpr.xpr", _p?.xpr);
    _o.set(_j, "ScalarArrayOpExpr.opno", _p?.opno);
    _o.set(_j, "ScalarArrayOpExpr.useOr", _p?.useOr);
    _o.set(_j, "ScalarArrayOpExpr.inputcollid", _p?.inputcollid);
    _o.set(_j, "ScalarArrayOpExpr.args", _p?.args);
    _o.set(_j, "ScalarArrayOpExpr.location", _p?.location);
    return _j;
  },
  boolExpr(_p?: BoolExpr["BoolExpr"]): BoolExpr {
    const _j = ({
      BoolExpr: {}
    } as BoolExpr);
    _o.set(_j, "BoolExpr.xpr", _p?.xpr);
    _o.set(_j, "BoolExpr.boolop", _p?.boolop);
    _o.set(_j, "BoolExpr.args", _p?.args);
    _o.set(_j, "BoolExpr.location", _p?.location);
    return _j;
  },
  subLink(_p?: SubLink["SubLink"]): SubLink {
    const _j = ({
      SubLink: {}
    } as SubLink);
    _o.set(_j, "SubLink.xpr", _p?.xpr);
    _o.set(_j, "SubLink.subLinkType", _p?.subLinkType);
    _o.set(_j, "SubLink.subLinkId", _p?.subLinkId);
    _o.set(_j, "SubLink.testexpr", _p?.testexpr);
    _o.set(_j, "SubLink.operName", _p?.operName);
    _o.set(_j, "SubLink.subselect", _p?.subselect);
    _o.set(_j, "SubLink.location", _p?.location);
    return _j;
  },
  subPlan(_p?: SubPlan["SubPlan"]): SubPlan {
    const _j = ({
      SubPlan: {}
    } as SubPlan);
    _o.set(_j, "SubPlan.xpr", _p?.xpr);
    _o.set(_j, "SubPlan.subLinkType", _p?.subLinkType);
    _o.set(_j, "SubPlan.testexpr", _p?.testexpr);
    _o.set(_j, "SubPlan.paramIds", _p?.paramIds);
    _o.set(_j, "SubPlan.plan_id", _p?.plan_id);
    _o.set(_j, "SubPlan.plan_name", _p?.plan_name);
    _o.set(_j, "SubPlan.firstColType", _p?.firstColType);
    _o.set(_j, "SubPlan.firstColTypmod", _p?.firstColTypmod);
    _o.set(_j, "SubPlan.firstColCollation", _p?.firstColCollation);
    _o.set(_j, "SubPlan.useHashTable", _p?.useHashTable);
    _o.set(_j, "SubPlan.unknownEqFalse", _p?.unknownEqFalse);
    _o.set(_j, "SubPlan.parallel_safe", _p?.parallel_safe);
    _o.set(_j, "SubPlan.setParam", _p?.setParam);
    _o.set(_j, "SubPlan.parParam", _p?.parParam);
    _o.set(_j, "SubPlan.args", _p?.args);
    _o.set(_j, "SubPlan.startup_cost", _p?.startup_cost);
    _o.set(_j, "SubPlan.per_call_cost", _p?.per_call_cost);
    return _j;
  },
  alternativeSubPlan(_p?: AlternativeSubPlan["AlternativeSubPlan"]): AlternativeSubPlan {
    const _j = ({
      AlternativeSubPlan: {}
    } as AlternativeSubPlan);
    _o.set(_j, "AlternativeSubPlan.xpr", _p?.xpr);
    _o.set(_j, "AlternativeSubPlan.subplans", _p?.subplans);
    return _j;
  },
  fieldSelect(_p?: FieldSelect["FieldSelect"]): FieldSelect {
    const _j = ({
      FieldSelect: {}
    } as FieldSelect);
    _o.set(_j, "FieldSelect.xpr", _p?.xpr);
    _o.set(_j, "FieldSelect.arg", _p?.arg);
    _o.set(_j, "FieldSelect.fieldnum", _p?.fieldnum);
    _o.set(_j, "FieldSelect.resulttype", _p?.resulttype);
    _o.set(_j, "FieldSelect.resulttypmod", _p?.resulttypmod);
    _o.set(_j, "FieldSelect.resultcollid", _p?.resultcollid);
    return _j;
  },
  fieldStore(_p?: FieldStore["FieldStore"]): FieldStore {
    const _j = ({
      FieldStore: {}
    } as FieldStore);
    _o.set(_j, "FieldStore.xpr", _p?.xpr);
    _o.set(_j, "FieldStore.arg", _p?.arg);
    _o.set(_j, "FieldStore.newvals", _p?.newvals);
    _o.set(_j, "FieldStore.fieldnums", _p?.fieldnums);
    _o.set(_j, "FieldStore.resulttype", _p?.resulttype);
    return _j;
  },
  relabelType(_p?: RelabelType["RelabelType"]): RelabelType {
    const _j = ({
      RelabelType: {}
    } as RelabelType);
    _o.set(_j, "RelabelType.xpr", _p?.xpr);
    _o.set(_j, "RelabelType.arg", _p?.arg);
    _o.set(_j, "RelabelType.resulttype", _p?.resulttype);
    _o.set(_j, "RelabelType.resulttypmod", _p?.resulttypmod);
    _o.set(_j, "RelabelType.resultcollid", _p?.resultcollid);
    _o.set(_j, "RelabelType.relabelformat", _p?.relabelformat);
    _o.set(_j, "RelabelType.location", _p?.location);
    return _j;
  },
  coerceViaio(_p?: CoerceViaIO["CoerceViaIO"]): CoerceViaIO {
    const _j = ({
      CoerceViaIO: {}
    } as CoerceViaIO);
    _o.set(_j, "CoerceViaIO.xpr", _p?.xpr);
    _o.set(_j, "CoerceViaIO.arg", _p?.arg);
    _o.set(_j, "CoerceViaIO.resulttype", _p?.resulttype);
    _o.set(_j, "CoerceViaIO.resultcollid", _p?.resultcollid);
    _o.set(_j, "CoerceViaIO.coerceformat", _p?.coerceformat);
    _o.set(_j, "CoerceViaIO.location", _p?.location);
    return _j;
  },
  arrayCoerceExpr(_p?: ArrayCoerceExpr["ArrayCoerceExpr"]): ArrayCoerceExpr {
    const _j = ({
      ArrayCoerceExpr: {}
    } as ArrayCoerceExpr);
    _o.set(_j, "ArrayCoerceExpr.xpr", _p?.xpr);
    _o.set(_j, "ArrayCoerceExpr.arg", _p?.arg);
    _o.set(_j, "ArrayCoerceExpr.elemexpr", _p?.elemexpr);
    _o.set(_j, "ArrayCoerceExpr.resulttype", _p?.resulttype);
    _o.set(_j, "ArrayCoerceExpr.resulttypmod", _p?.resulttypmod);
    _o.set(_j, "ArrayCoerceExpr.resultcollid", _p?.resultcollid);
    _o.set(_j, "ArrayCoerceExpr.coerceformat", _p?.coerceformat);
    _o.set(_j, "ArrayCoerceExpr.location", _p?.location);
    return _j;
  },
  convertRowtypeExpr(_p?: ConvertRowtypeExpr["ConvertRowtypeExpr"]): ConvertRowtypeExpr {
    const _j = ({
      ConvertRowtypeExpr: {}
    } as ConvertRowtypeExpr);
    _o.set(_j, "ConvertRowtypeExpr.xpr", _p?.xpr);
    _o.set(_j, "ConvertRowtypeExpr.arg", _p?.arg);
    _o.set(_j, "ConvertRowtypeExpr.resulttype", _p?.resulttype);
    _o.set(_j, "ConvertRowtypeExpr.convertformat", _p?.convertformat);
    _o.set(_j, "ConvertRowtypeExpr.location", _p?.location);
    return _j;
  },
  collateExpr(_p?: CollateExpr["CollateExpr"]): CollateExpr {
    const _j = ({
      CollateExpr: {}
    } as CollateExpr);
    _o.set(_j, "CollateExpr.xpr", _p?.xpr);
    _o.set(_j, "CollateExpr.arg", _p?.arg);
    _o.set(_j, "CollateExpr.collOid", _p?.collOid);
    _o.set(_j, "CollateExpr.location", _p?.location);
    return _j;
  },
  caseExpr(_p?: CaseExpr["CaseExpr"]): CaseExpr {
    const _j = ({
      CaseExpr: {}
    } as CaseExpr);
    _o.set(_j, "CaseExpr.xpr", _p?.xpr);
    _o.set(_j, "CaseExpr.casetype", _p?.casetype);
    _o.set(_j, "CaseExpr.casecollid", _p?.casecollid);
    _o.set(_j, "CaseExpr.arg", _p?.arg);
    _o.set(_j, "CaseExpr.args", _p?.args);
    _o.set(_j, "CaseExpr.defresult", _p?.defresult);
    _o.set(_j, "CaseExpr.location", _p?.location);
    return _j;
  },
  caseWhen(_p?: CaseWhen["CaseWhen"]): CaseWhen {
    const _j = ({
      CaseWhen: {}
    } as CaseWhen);
    _o.set(_j, "CaseWhen.xpr", _p?.xpr);
    _o.set(_j, "CaseWhen.expr", _p?.expr);
    _o.set(_j, "CaseWhen.result", _p?.result);
    _o.set(_j, "CaseWhen.location", _p?.location);
    return _j;
  },
  caseTestExpr(_p?: CaseTestExpr["CaseTestExpr"]): CaseTestExpr {
    const _j = ({
      CaseTestExpr: {}
    } as CaseTestExpr);
    _o.set(_j, "CaseTestExpr.xpr", _p?.xpr);
    _o.set(_j, "CaseTestExpr.typeId", _p?.typeId);
    _o.set(_j, "CaseTestExpr.typeMod", _p?.typeMod);
    _o.set(_j, "CaseTestExpr.collation", _p?.collation);
    return _j;
  },
  arrayExpr(_p?: ArrayExpr["ArrayExpr"]): ArrayExpr {
    const _j = ({
      ArrayExpr: {}
    } as ArrayExpr);
    _o.set(_j, "ArrayExpr.xpr", _p?.xpr);
    _o.set(_j, "ArrayExpr.array_typeid", _p?.array_typeid);
    _o.set(_j, "ArrayExpr.array_collid", _p?.array_collid);
    _o.set(_j, "ArrayExpr.element_typeid", _p?.element_typeid);
    _o.set(_j, "ArrayExpr.elements", _p?.elements);
    _o.set(_j, "ArrayExpr.multidims", _p?.multidims);
    _o.set(_j, "ArrayExpr.location", _p?.location);
    return _j;
  },
  rowExpr(_p?: RowExpr["RowExpr"]): RowExpr {
    const _j = ({
      RowExpr: {}
    } as RowExpr);
    _o.set(_j, "RowExpr.xpr", _p?.xpr);
    _o.set(_j, "RowExpr.args", _p?.args);
    _o.set(_j, "RowExpr.row_typeid", _p?.row_typeid);
    _o.set(_j, "RowExpr.row_format", _p?.row_format);
    _o.set(_j, "RowExpr.colnames", _p?.colnames);
    _o.set(_j, "RowExpr.location", _p?.location);
    return _j;
  },
  rowCompareExpr(_p?: RowCompareExpr["RowCompareExpr"]): RowCompareExpr {
    const _j = ({
      RowCompareExpr: {}
    } as RowCompareExpr);
    _o.set(_j, "RowCompareExpr.xpr", _p?.xpr);
    _o.set(_j, "RowCompareExpr.rctype", _p?.rctype);
    _o.set(_j, "RowCompareExpr.opnos", _p?.opnos);
    _o.set(_j, "RowCompareExpr.opfamilies", _p?.opfamilies);
    _o.set(_j, "RowCompareExpr.inputcollids", _p?.inputcollids);
    _o.set(_j, "RowCompareExpr.largs", _p?.largs);
    _o.set(_j, "RowCompareExpr.rargs", _p?.rargs);
    return _j;
  },
  coalesceExpr(_p?: CoalesceExpr["CoalesceExpr"]): CoalesceExpr {
    const _j = ({
      CoalesceExpr: {}
    } as CoalesceExpr);
    _o.set(_j, "CoalesceExpr.xpr", _p?.xpr);
    _o.set(_j, "CoalesceExpr.coalescetype", _p?.coalescetype);
    _o.set(_j, "CoalesceExpr.coalescecollid", _p?.coalescecollid);
    _o.set(_j, "CoalesceExpr.args", _p?.args);
    _o.set(_j, "CoalesceExpr.location", _p?.location);
    return _j;
  },
  minMaxExpr(_p?: MinMaxExpr["MinMaxExpr"]): MinMaxExpr {
    const _j = ({
      MinMaxExpr: {}
    } as MinMaxExpr);
    _o.set(_j, "MinMaxExpr.xpr", _p?.xpr);
    _o.set(_j, "MinMaxExpr.minmaxtype", _p?.minmaxtype);
    _o.set(_j, "MinMaxExpr.minmaxcollid", _p?.minmaxcollid);
    _o.set(_j, "MinMaxExpr.inputcollid", _p?.inputcollid);
    _o.set(_j, "MinMaxExpr.op", _p?.op);
    _o.set(_j, "MinMaxExpr.args", _p?.args);
    _o.set(_j, "MinMaxExpr.location", _p?.location);
    return _j;
  },
  sqlValueFunction(_p?: SQLValueFunction["SQLValueFunction"]): SQLValueFunction {
    const _j = ({
      SQLValueFunction: {}
    } as SQLValueFunction);
    _o.set(_j, "SQLValueFunction.xpr", _p?.xpr);
    _o.set(_j, "SQLValueFunction.op", _p?.op);
    _o.set(_j, "SQLValueFunction.type", _p?.type);
    _o.set(_j, "SQLValueFunction.typmod", _p?.typmod);
    _o.set(_j, "SQLValueFunction.location", _p?.location);
    return _j;
  },
  xmlExpr(_p?: XmlExpr["XmlExpr"]): XmlExpr {
    const _j = ({
      XmlExpr: {}
    } as XmlExpr);
    _o.set(_j, "XmlExpr.xpr", _p?.xpr);
    _o.set(_j, "XmlExpr.op", _p?.op);
    _o.set(_j, "XmlExpr.name", _p?.name);
    _o.set(_j, "XmlExpr.named_args", _p?.named_args);
    _o.set(_j, "XmlExpr.arg_names", _p?.arg_names);
    _o.set(_j, "XmlExpr.args", _p?.args);
    _o.set(_j, "XmlExpr.xmloption", _p?.xmloption);
    _o.set(_j, "XmlExpr.indent", _p?.indent);
    _o.set(_j, "XmlExpr.type", _p?.type);
    _o.set(_j, "XmlExpr.typmod", _p?.typmod);
    _o.set(_j, "XmlExpr.location", _p?.location);
    return _j;
  },
  jsonFormat(_p?: JsonFormat["JsonFormat"]): JsonFormat {
    const _j = ({
      JsonFormat: {}
    } as JsonFormat);
    _o.set(_j, "JsonFormat.format_type", _p?.format_type);
    _o.set(_j, "JsonFormat.encoding", _p?.encoding);
    _o.set(_j, "JsonFormat.location", _p?.location);
    return _j;
  },
  jsonReturning(_p?: JsonReturning["JsonReturning"]): JsonReturning {
    const _j = ({
      JsonReturning: {}
    } as JsonReturning);
    _o.set(_j, "JsonReturning.format", _p?.format);
    _o.set(_j, "JsonReturning.typid", _p?.typid);
    _o.set(_j, "JsonReturning.typmod", _p?.typmod);
    return _j;
  },
  jsonValueExpr(_p?: JsonValueExpr["JsonValueExpr"]): JsonValueExpr {
    const _j = ({
      JsonValueExpr: {}
    } as JsonValueExpr);
    _o.set(_j, "JsonValueExpr.raw_expr", _p?.raw_expr);
    _o.set(_j, "JsonValueExpr.formatted_expr", _p?.formatted_expr);
    _o.set(_j, "JsonValueExpr.format", _p?.format);
    return _j;
  },
  jsonConstructorExpr(_p?: JsonConstructorExpr["JsonConstructorExpr"]): JsonConstructorExpr {
    const _j = ({
      JsonConstructorExpr: {}
    } as JsonConstructorExpr);
    _o.set(_j, "JsonConstructorExpr.xpr", _p?.xpr);
    _o.set(_j, "JsonConstructorExpr.type", _p?.type);
    _o.set(_j, "JsonConstructorExpr.args", _p?.args);
    _o.set(_j, "JsonConstructorExpr.func", _p?.func);
    _o.set(_j, "JsonConstructorExpr.coercion", _p?.coercion);
    _o.set(_j, "JsonConstructorExpr.returning", _p?.returning);
    _o.set(_j, "JsonConstructorExpr.absent_on_null", _p?.absent_on_null);
    _o.set(_j, "JsonConstructorExpr.unique", _p?.unique);
    _o.set(_j, "JsonConstructorExpr.location", _p?.location);
    return _j;
  },
  jsonIsPredicate(_p?: JsonIsPredicate["JsonIsPredicate"]): JsonIsPredicate {
    const _j = ({
      JsonIsPredicate: {}
    } as JsonIsPredicate);
    _o.set(_j, "JsonIsPredicate.expr", _p?.expr);
    _o.set(_j, "JsonIsPredicate.format", _p?.format);
    _o.set(_j, "JsonIsPredicate.item_type", _p?.item_type);
    _o.set(_j, "JsonIsPredicate.unique_keys", _p?.unique_keys);
    _o.set(_j, "JsonIsPredicate.location", _p?.location);
    return _j;
  },
  nullTest(_p?: NullTest["NullTest"]): NullTest {
    const _j = ({
      NullTest: {}
    } as NullTest);
    _o.set(_j, "NullTest.xpr", _p?.xpr);
    _o.set(_j, "NullTest.arg", _p?.arg);
    _o.set(_j, "NullTest.nulltesttype", _p?.nulltesttype);
    _o.set(_j, "NullTest.argisrow", _p?.argisrow);
    _o.set(_j, "NullTest.location", _p?.location);
    return _j;
  },
  booleanTest(_p?: BooleanTest["BooleanTest"]): BooleanTest {
    const _j = ({
      BooleanTest: {}
    } as BooleanTest);
    _o.set(_j, "BooleanTest.xpr", _p?.xpr);
    _o.set(_j, "BooleanTest.arg", _p?.arg);
    _o.set(_j, "BooleanTest.booltesttype", _p?.booltesttype);
    _o.set(_j, "BooleanTest.location", _p?.location);
    return _j;
  },
  coerceToDomain(_p?: CoerceToDomain["CoerceToDomain"]): CoerceToDomain {
    const _j = ({
      CoerceToDomain: {}
    } as CoerceToDomain);
    _o.set(_j, "CoerceToDomain.xpr", _p?.xpr);
    _o.set(_j, "CoerceToDomain.arg", _p?.arg);
    _o.set(_j, "CoerceToDomain.resulttype", _p?.resulttype);
    _o.set(_j, "CoerceToDomain.resulttypmod", _p?.resulttypmod);
    _o.set(_j, "CoerceToDomain.resultcollid", _p?.resultcollid);
    _o.set(_j, "CoerceToDomain.coercionformat", _p?.coercionformat);
    _o.set(_j, "CoerceToDomain.location", _p?.location);
    return _j;
  },
  coerceToDomainValue(_p?: CoerceToDomainValue["CoerceToDomainValue"]): CoerceToDomainValue {
    const _j = ({
      CoerceToDomainValue: {}
    } as CoerceToDomainValue);
    _o.set(_j, "CoerceToDomainValue.xpr", _p?.xpr);
    _o.set(_j, "CoerceToDomainValue.typeId", _p?.typeId);
    _o.set(_j, "CoerceToDomainValue.typeMod", _p?.typeMod);
    _o.set(_j, "CoerceToDomainValue.collation", _p?.collation);
    _o.set(_j, "CoerceToDomainValue.location", _p?.location);
    return _j;
  },
  setToDefault(_p?: SetToDefault["SetToDefault"]): SetToDefault {
    const _j = ({
      SetToDefault: {}
    } as SetToDefault);
    _o.set(_j, "SetToDefault.xpr", _p?.xpr);
    _o.set(_j, "SetToDefault.typeId", _p?.typeId);
    _o.set(_j, "SetToDefault.typeMod", _p?.typeMod);
    _o.set(_j, "SetToDefault.collation", _p?.collation);
    _o.set(_j, "SetToDefault.location", _p?.location);
    return _j;
  },
  currentOfExpr(_p?: CurrentOfExpr["CurrentOfExpr"]): CurrentOfExpr {
    const _j = ({
      CurrentOfExpr: {}
    } as CurrentOfExpr);
    _o.set(_j, "CurrentOfExpr.xpr", _p?.xpr);
    _o.set(_j, "CurrentOfExpr.cvarno", _p?.cvarno);
    _o.set(_j, "CurrentOfExpr.cursor_name", _p?.cursor_name);
    _o.set(_j, "CurrentOfExpr.cursor_param", _p?.cursor_param);
    return _j;
  },
  nextValueExpr(_p?: NextValueExpr["NextValueExpr"]): NextValueExpr {
    const _j = ({
      NextValueExpr: {}
    } as NextValueExpr);
    _o.set(_j, "NextValueExpr.xpr", _p?.xpr);
    _o.set(_j, "NextValueExpr.seqid", _p?.seqid);
    _o.set(_j, "NextValueExpr.typeId", _p?.typeId);
    return _j;
  },
  inferenceElem(_p?: InferenceElem["InferenceElem"]): InferenceElem {
    const _j = ({
      InferenceElem: {}
    } as InferenceElem);
    _o.set(_j, "InferenceElem.xpr", _p?.xpr);
    _o.set(_j, "InferenceElem.expr", _p?.expr);
    _o.set(_j, "InferenceElem.infercollid", _p?.infercollid);
    _o.set(_j, "InferenceElem.inferopclass", _p?.inferopclass);
    return _j;
  },
  targetEntry(_p?: TargetEntry["TargetEntry"]): TargetEntry {
    const _j = ({
      TargetEntry: {}
    } as TargetEntry);
    _o.set(_j, "TargetEntry.xpr", _p?.xpr);
    _o.set(_j, "TargetEntry.expr", _p?.expr);
    _o.set(_j, "TargetEntry.resno", _p?.resno);
    _o.set(_j, "TargetEntry.resname", _p?.resname);
    _o.set(_j, "TargetEntry.ressortgroupref", _p?.ressortgroupref);
    _o.set(_j, "TargetEntry.resorigtbl", _p?.resorigtbl);
    _o.set(_j, "TargetEntry.resorigcol", _p?.resorigcol);
    _o.set(_j, "TargetEntry.resjunk", _p?.resjunk);
    return _j;
  },
  rangeTblRef(_p?: RangeTblRef["RangeTblRef"]): RangeTblRef {
    const _j = ({
      RangeTblRef: {}
    } as RangeTblRef);
    _o.set(_j, "RangeTblRef.rtindex", _p?.rtindex);
    return _j;
  },
  joinExpr(_p?: JoinExpr["JoinExpr"]): JoinExpr {
    const _j = ({
      JoinExpr: {}
    } as JoinExpr);
    _o.set(_j, "JoinExpr.jointype", _p?.jointype);
    _o.set(_j, "JoinExpr.isNatural", _p?.isNatural);
    _o.set(_j, "JoinExpr.larg", _p?.larg);
    _o.set(_j, "JoinExpr.rarg", _p?.rarg);
    _o.set(_j, "JoinExpr.usingClause", _p?.usingClause);
    _o.set(_j, "JoinExpr.join_using_alias", _p?.join_using_alias);
    _o.set(_j, "JoinExpr.quals", _p?.quals);
    _o.set(_j, "JoinExpr.alias", _p?.alias);
    _o.set(_j, "JoinExpr.rtindex", _p?.rtindex);
    return _j;
  },
  fromExpr(_p?: FromExpr["FromExpr"]): FromExpr {
    const _j = ({
      FromExpr: {}
    } as FromExpr);
    _o.set(_j, "FromExpr.fromlist", _p?.fromlist);
    _o.set(_j, "FromExpr.quals", _p?.quals);
    return _j;
  },
  onConflictExpr(_p?: OnConflictExpr["OnConflictExpr"]): OnConflictExpr {
    const _j = ({
      OnConflictExpr: {}
    } as OnConflictExpr);
    _o.set(_j, "OnConflictExpr.action", _p?.action);
    _o.set(_j, "OnConflictExpr.arbiterElems", _p?.arbiterElems);
    _o.set(_j, "OnConflictExpr.arbiterWhere", _p?.arbiterWhere);
    _o.set(_j, "OnConflictExpr.constraint", _p?.constraint);
    _o.set(_j, "OnConflictExpr.onConflictSet", _p?.onConflictSet);
    _o.set(_j, "OnConflictExpr.onConflictWhere", _p?.onConflictWhere);
    _o.set(_j, "OnConflictExpr.exclRelIndex", _p?.exclRelIndex);
    _o.set(_j, "OnConflictExpr.exclRelTlist", _p?.exclRelTlist);
    return _j;
  },
  query(_p?: Query["Query"]): Query {
    const _j = ({
      Query: {}
    } as Query);
    _o.set(_j, "Query.commandType", _p?.commandType);
    _o.set(_j, "Query.querySource", _p?.querySource);
    _o.set(_j, "Query.canSetTag", _p?.canSetTag);
    _o.set(_j, "Query.utilityStmt", _p?.utilityStmt);
    _o.set(_j, "Query.resultRelation", _p?.resultRelation);
    _o.set(_j, "Query.hasAggs", _p?.hasAggs);
    _o.set(_j, "Query.hasWindowFuncs", _p?.hasWindowFuncs);
    _o.set(_j, "Query.hasTargetSRFs", _p?.hasTargetSRFs);
    _o.set(_j, "Query.hasSubLinks", _p?.hasSubLinks);
    _o.set(_j, "Query.hasDistinctOn", _p?.hasDistinctOn);
    _o.set(_j, "Query.hasRecursive", _p?.hasRecursive);
    _o.set(_j, "Query.hasModifyingCTE", _p?.hasModifyingCTE);
    _o.set(_j, "Query.hasForUpdate", _p?.hasForUpdate);
    _o.set(_j, "Query.hasRowSecurity", _p?.hasRowSecurity);
    _o.set(_j, "Query.isReturn", _p?.isReturn);
    _o.set(_j, "Query.cteList", _p?.cteList);
    _o.set(_j, "Query.rtable", _p?.rtable);
    _o.set(_j, "Query.rteperminfos", _p?.rteperminfos);
    _o.set(_j, "Query.jointree", _p?.jointree);
    _o.set(_j, "Query.mergeActionList", _p?.mergeActionList);
    _o.set(_j, "Query.mergeUseOuterJoin", _p?.mergeUseOuterJoin);
    _o.set(_j, "Query.targetList", _p?.targetList);
    _o.set(_j, "Query.override", _p?.override);
    _o.set(_j, "Query.onConflict", _p?.onConflict);
    _o.set(_j, "Query.returningList", _p?.returningList);
    _o.set(_j, "Query.groupClause", _p?.groupClause);
    _o.set(_j, "Query.groupDistinct", _p?.groupDistinct);
    _o.set(_j, "Query.groupingSets", _p?.groupingSets);
    _o.set(_j, "Query.havingQual", _p?.havingQual);
    _o.set(_j, "Query.windowClause", _p?.windowClause);
    _o.set(_j, "Query.distinctClause", _p?.distinctClause);
    _o.set(_j, "Query.sortClause", _p?.sortClause);
    _o.set(_j, "Query.limitOffset", _p?.limitOffset);
    _o.set(_j, "Query.limitCount", _p?.limitCount);
    _o.set(_j, "Query.limitOption", _p?.limitOption);
    _o.set(_j, "Query.rowMarks", _p?.rowMarks);
    _o.set(_j, "Query.setOperations", _p?.setOperations);
    _o.set(_j, "Query.constraintDeps", _p?.constraintDeps);
    _o.set(_j, "Query.withCheckOptions", _p?.withCheckOptions);
    _o.set(_j, "Query.stmt_location", _p?.stmt_location);
    _o.set(_j, "Query.stmt_len", _p?.stmt_len);
    return _j;
  },
  typeName(_p?: TypeName): TypeName {
    const _j = ({} as TypeName);
    _o.set(_j, "names", _p?.names);
    _o.set(_j, "typeOid", _p?.typeOid);
    _o.set(_j, "setof", _p?.setof);
    _o.set(_j, "pct_type", _p?.pct_type);
    _o.set(_j, "typmods", _p?.typmods);
    _o.set(_j, "typemod", _p?.typemod);
    _o.set(_j, "arrayBounds", _p?.arrayBounds);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  columnRef(_p?: ColumnRef["ColumnRef"]): ColumnRef {
    const _j = ({
      ColumnRef: {}
    } as ColumnRef);
    _o.set(_j, "ColumnRef.fields", _p?.fields);
    _o.set(_j, "ColumnRef.location", _p?.location);
    return _j;
  },
  paramRef(_p?: ParamRef["ParamRef"]): ParamRef {
    const _j = ({
      ParamRef: {}
    } as ParamRef);
    _o.set(_j, "ParamRef.number", _p?.number);
    _o.set(_j, "ParamRef.location", _p?.location);
    return _j;
  },
  aExpr(_p?: A_Expr["A_Expr"]): A_Expr {
    const _j = ({
      A_Expr: {}
    } as A_Expr);
    _o.set(_j, "A_Expr.kind", _p?.kind);
    _o.set(_j, "A_Expr.name", _p?.name);
    _o.set(_j, "A_Expr.lexpr", _p?.lexpr);
    _o.set(_j, "A_Expr.rexpr", _p?.rexpr);
    _o.set(_j, "A_Expr.location", _p?.location);
    return _j;
  },
  typeCast(_p?: TypeCast["TypeCast"]): TypeCast {
    const _j = ({
      TypeCast: {}
    } as TypeCast);
    _o.set(_j, "TypeCast.arg", _p?.arg);
    _o.set(_j, "TypeCast.typeName", _p?.typeName);
    _o.set(_j, "TypeCast.location", _p?.location);
    return _j;
  },
  collateClause(_p?: CollateClause["CollateClause"]): CollateClause {
    const _j = ({
      CollateClause: {}
    } as CollateClause);
    _o.set(_j, "CollateClause.arg", _p?.arg);
    _o.set(_j, "CollateClause.collname", _p?.collname);
    _o.set(_j, "CollateClause.location", _p?.location);
    return _j;
  },
  roleSpec(_p?: RoleSpec["RoleSpec"]): RoleSpec {
    const _j = ({
      RoleSpec: {}
    } as RoleSpec);
    _o.set(_j, "RoleSpec.roletype", _p?.roletype);
    _o.set(_j, "RoleSpec.rolename", _p?.rolename);
    _o.set(_j, "RoleSpec.location", _p?.location);
    return _j;
  },
  funcCall(_p?: FuncCall["FuncCall"]): FuncCall {
    const _j = ({
      FuncCall: {}
    } as FuncCall);
    _o.set(_j, "FuncCall.funcname", _p?.funcname);
    _o.set(_j, "FuncCall.args", _p?.args);
    _o.set(_j, "FuncCall.agg_order", _p?.agg_order);
    _o.set(_j, "FuncCall.agg_filter", _p?.agg_filter);
    _o.set(_j, "FuncCall.over", _p?.over);
    _o.set(_j, "FuncCall.agg_within_group", _p?.agg_within_group);
    _o.set(_j, "FuncCall.agg_star", _p?.agg_star);
    _o.set(_j, "FuncCall.agg_distinct", _p?.agg_distinct);
    _o.set(_j, "FuncCall.func_variadic", _p?.func_variadic);
    _o.set(_j, "FuncCall.funcformat", _p?.funcformat);
    _o.set(_j, "FuncCall.location", _p?.location);
    return _j;
  },
  aStar(_p?: A_Star["A_Star"]): A_Star {
    const _j = ({
      A_Star: {}
    } as A_Star);
    return _j;
  },
  aIndices(_p?: A_Indices["A_Indices"]): A_Indices {
    const _j = ({
      A_Indices: {}
    } as A_Indices);
    _o.set(_j, "A_Indices.is_slice", _p?.is_slice);
    _o.set(_j, "A_Indices.lidx", _p?.lidx);
    _o.set(_j, "A_Indices.uidx", _p?.uidx);
    return _j;
  },
  aIndirection(_p?: A_Indirection["A_Indirection"]): A_Indirection {
    const _j = ({
      A_Indirection: {}
    } as A_Indirection);
    _o.set(_j, "A_Indirection.arg", _p?.arg);
    _o.set(_j, "A_Indirection.indirection", _p?.indirection);
    return _j;
  },
  aArrayExpr(_p?: A_ArrayExpr["A_ArrayExpr"]): A_ArrayExpr {
    const _j = ({
      A_ArrayExpr: {}
    } as A_ArrayExpr);
    _o.set(_j, "A_ArrayExpr.elements", _p?.elements);
    _o.set(_j, "A_ArrayExpr.location", _p?.location);
    return _j;
  },
  resTarget(_p?: ResTarget["ResTarget"]): ResTarget {
    const _j = ({
      ResTarget: {}
    } as ResTarget);
    _o.set(_j, "ResTarget.name", _p?.name);
    _o.set(_j, "ResTarget.indirection", _p?.indirection);
    _o.set(_j, "ResTarget.val", _p?.val);
    _o.set(_j, "ResTarget.location", _p?.location);
    return _j;
  },
  multiAssignRef(_p?: MultiAssignRef["MultiAssignRef"]): MultiAssignRef {
    const _j = ({
      MultiAssignRef: {}
    } as MultiAssignRef);
    _o.set(_j, "MultiAssignRef.source", _p?.source);
    _o.set(_j, "MultiAssignRef.colno", _p?.colno);
    _o.set(_j, "MultiAssignRef.ncolumns", _p?.ncolumns);
    return _j;
  },
  sortBy(_p?: SortBy["SortBy"]): SortBy {
    const _j = ({
      SortBy: {}
    } as SortBy);
    _o.set(_j, "SortBy.node", _p?.node);
    _o.set(_j, "SortBy.sortby_dir", _p?.sortby_dir);
    _o.set(_j, "SortBy.sortby_nulls", _p?.sortby_nulls);
    _o.set(_j, "SortBy.useOp", _p?.useOp);
    _o.set(_j, "SortBy.location", _p?.location);
    return _j;
  },
  windowDef(_p?: WindowDef["WindowDef"]): WindowDef {
    const _j = ({
      WindowDef: {}
    } as WindowDef);
    _o.set(_j, "WindowDef.name", _p?.name);
    _o.set(_j, "WindowDef.refname", _p?.refname);
    _o.set(_j, "WindowDef.partitionClause", _p?.partitionClause);
    _o.set(_j, "WindowDef.orderClause", _p?.orderClause);
    _o.set(_j, "WindowDef.frameOptions", _p?.frameOptions);
    _o.set(_j, "WindowDef.startOffset", _p?.startOffset);
    _o.set(_j, "WindowDef.endOffset", _p?.endOffset);
    _o.set(_j, "WindowDef.location", _p?.location);
    return _j;
  },
  rangeSubselect(_p?: RangeSubselect["RangeSubselect"]): RangeSubselect {
    const _j = ({
      RangeSubselect: {}
    } as RangeSubselect);
    _o.set(_j, "RangeSubselect.lateral", _p?.lateral);
    _o.set(_j, "RangeSubselect.subquery", _p?.subquery);
    _o.set(_j, "RangeSubselect.alias", _p?.alias);
    return _j;
  },
  rangeFunction(_p?: RangeFunction["RangeFunction"]): RangeFunction {
    const _j = ({
      RangeFunction: {}
    } as RangeFunction);
    _o.set(_j, "RangeFunction.lateral", _p?.lateral);
    _o.set(_j, "RangeFunction.ordinality", _p?.ordinality);
    _o.set(_j, "RangeFunction.is_rowsfrom", _p?.is_rowsfrom);
    _o.set(_j, "RangeFunction.functions", _p?.functions);
    _o.set(_j, "RangeFunction.alias", _p?.alias);
    _o.set(_j, "RangeFunction.coldeflist", _p?.coldeflist);
    return _j;
  },
  rangeTableFunc(_p?: RangeTableFunc["RangeTableFunc"]): RangeTableFunc {
    const _j = ({
      RangeTableFunc: {}
    } as RangeTableFunc);
    _o.set(_j, "RangeTableFunc.lateral", _p?.lateral);
    _o.set(_j, "RangeTableFunc.docexpr", _p?.docexpr);
    _o.set(_j, "RangeTableFunc.rowexpr", _p?.rowexpr);
    _o.set(_j, "RangeTableFunc.namespaces", _p?.namespaces);
    _o.set(_j, "RangeTableFunc.columns", _p?.columns);
    _o.set(_j, "RangeTableFunc.alias", _p?.alias);
    _o.set(_j, "RangeTableFunc.location", _p?.location);
    return _j;
  },
  rangeTableFuncCol(_p?: RangeTableFuncCol["RangeTableFuncCol"]): RangeTableFuncCol {
    const _j = ({
      RangeTableFuncCol: {}
    } as RangeTableFuncCol);
    _o.set(_j, "RangeTableFuncCol.colname", _p?.colname);
    _o.set(_j, "RangeTableFuncCol.typeName", _p?.typeName);
    _o.set(_j, "RangeTableFuncCol.for_ordinality", _p?.for_ordinality);
    _o.set(_j, "RangeTableFuncCol.is_not_null", _p?.is_not_null);
    _o.set(_j, "RangeTableFuncCol.colexpr", _p?.colexpr);
    _o.set(_j, "RangeTableFuncCol.coldefexpr", _p?.coldefexpr);
    _o.set(_j, "RangeTableFuncCol.location", _p?.location);
    return _j;
  },
  rangeTableSample(_p?: RangeTableSample["RangeTableSample"]): RangeTableSample {
    const _j = ({
      RangeTableSample: {}
    } as RangeTableSample);
    _o.set(_j, "RangeTableSample.relation", _p?.relation);
    _o.set(_j, "RangeTableSample.method", _p?.method);
    _o.set(_j, "RangeTableSample.args", _p?.args);
    _o.set(_j, "RangeTableSample.repeatable", _p?.repeatable);
    _o.set(_j, "RangeTableSample.location", _p?.location);
    return _j;
  },
  columnDef(_p?: ColumnDef["ColumnDef"]): ColumnDef {
    const _j = ({
      ColumnDef: {}
    } as ColumnDef);
    _o.set(_j, "ColumnDef.colname", _p?.colname);
    _o.set(_j, "ColumnDef.typeName", _p?.typeName);
    _o.set(_j, "ColumnDef.compression", _p?.compression);
    _o.set(_j, "ColumnDef.inhcount", _p?.inhcount);
    _o.set(_j, "ColumnDef.is_local", _p?.is_local);
    _o.set(_j, "ColumnDef.is_not_null", _p?.is_not_null);
    _o.set(_j, "ColumnDef.is_from_type", _p?.is_from_type);
    _o.set(_j, "ColumnDef.storage", _p?.storage);
    _o.set(_j, "ColumnDef.storage_name", _p?.storage_name);
    _o.set(_j, "ColumnDef.raw_default", _p?.raw_default);
    _o.set(_j, "ColumnDef.cooked_default", _p?.cooked_default);
    _o.set(_j, "ColumnDef.identity", _p?.identity);
    _o.set(_j, "ColumnDef.identitySequence", _p?.identitySequence);
    _o.set(_j, "ColumnDef.generated", _p?.generated);
    _o.set(_j, "ColumnDef.collClause", _p?.collClause);
    _o.set(_j, "ColumnDef.collOid", _p?.collOid);
    _o.set(_j, "ColumnDef.constraints", _p?.constraints);
    _o.set(_j, "ColumnDef.fdwoptions", _p?.fdwoptions);
    _o.set(_j, "ColumnDef.location", _p?.location);
    return _j;
  },
  tableLikeClause(_p?: TableLikeClause["TableLikeClause"]): TableLikeClause {
    const _j = ({
      TableLikeClause: {}
    } as TableLikeClause);
    _o.set(_j, "TableLikeClause.relation", _p?.relation);
    _o.set(_j, "TableLikeClause.options", _p?.options);
    _o.set(_j, "TableLikeClause.relationOid", _p?.relationOid);
    return _j;
  },
  indexElem(_p?: IndexElem["IndexElem"]): IndexElem {
    const _j = ({
      IndexElem: {}
    } as IndexElem);
    _o.set(_j, "IndexElem.name", _p?.name);
    _o.set(_j, "IndexElem.expr", _p?.expr);
    _o.set(_j, "IndexElem.indexcolname", _p?.indexcolname);
    _o.set(_j, "IndexElem.collation", _p?.collation);
    _o.set(_j, "IndexElem.opclass", _p?.opclass);
    _o.set(_j, "IndexElem.opclassopts", _p?.opclassopts);
    _o.set(_j, "IndexElem.ordering", _p?.ordering);
    _o.set(_j, "IndexElem.nulls_ordering", _p?.nulls_ordering);
    return _j;
  },
  defElem(_p?: DefElem["DefElem"]): DefElem {
    const _j = ({
      DefElem: {}
    } as DefElem);
    _o.set(_j, "DefElem.defnamespace", _p?.defnamespace);
    _o.set(_j, "DefElem.defname", _p?.defname);
    _o.set(_j, "DefElem.arg", _p?.arg);
    _o.set(_j, "DefElem.defaction", _p?.defaction);
    _o.set(_j, "DefElem.location", _p?.location);
    return _j;
  },
  lockingClause(_p?: LockingClause["LockingClause"]): LockingClause {
    const _j = ({
      LockingClause: {}
    } as LockingClause);
    _o.set(_j, "LockingClause.lockedRels", _p?.lockedRels);
    _o.set(_j, "LockingClause.strength", _p?.strength);
    _o.set(_j, "LockingClause.waitPolicy", _p?.waitPolicy);
    return _j;
  },
  xmlSerialize(_p?: XmlSerialize["XmlSerialize"]): XmlSerialize {
    const _j = ({
      XmlSerialize: {}
    } as XmlSerialize);
    _o.set(_j, "XmlSerialize.xmloption", _p?.xmloption);
    _o.set(_j, "XmlSerialize.expr", _p?.expr);
    _o.set(_j, "XmlSerialize.typeName", _p?.typeName);
    _o.set(_j, "XmlSerialize.indent", _p?.indent);
    _o.set(_j, "XmlSerialize.location", _p?.location);
    return _j;
  },
  partitionElem(_p?: PartitionElem["PartitionElem"]): PartitionElem {
    const _j = ({
      PartitionElem: {}
    } as PartitionElem);
    _o.set(_j, "PartitionElem.name", _p?.name);
    _o.set(_j, "PartitionElem.expr", _p?.expr);
    _o.set(_j, "PartitionElem.collation", _p?.collation);
    _o.set(_j, "PartitionElem.opclass", _p?.opclass);
    _o.set(_j, "PartitionElem.location", _p?.location);
    return _j;
  },
  partitionSpec(_p?: PartitionSpec["PartitionSpec"]): PartitionSpec {
    const _j = ({
      PartitionSpec: {}
    } as PartitionSpec);
    _o.set(_j, "PartitionSpec.strategy", _p?.strategy);
    _o.set(_j, "PartitionSpec.partParams", _p?.partParams);
    _o.set(_j, "PartitionSpec.location", _p?.location);
    return _j;
  },
  partitionBoundSpec(_p?: PartitionBoundSpec["PartitionBoundSpec"]): PartitionBoundSpec {
    const _j = ({
      PartitionBoundSpec: {}
    } as PartitionBoundSpec);
    _o.set(_j, "PartitionBoundSpec.strategy", _p?.strategy);
    _o.set(_j, "PartitionBoundSpec.is_default", _p?.is_default);
    _o.set(_j, "PartitionBoundSpec.modulus", _p?.modulus);
    _o.set(_j, "PartitionBoundSpec.remainder", _p?.remainder);
    _o.set(_j, "PartitionBoundSpec.listdatums", _p?.listdatums);
    _o.set(_j, "PartitionBoundSpec.lowerdatums", _p?.lowerdatums);
    _o.set(_j, "PartitionBoundSpec.upperdatums", _p?.upperdatums);
    _o.set(_j, "PartitionBoundSpec.location", _p?.location);
    return _j;
  },
  partitionRangeDatum(_p?: PartitionRangeDatum["PartitionRangeDatum"]): PartitionRangeDatum {
    const _j = ({
      PartitionRangeDatum: {}
    } as PartitionRangeDatum);
    _o.set(_j, "PartitionRangeDatum.kind", _p?.kind);
    _o.set(_j, "PartitionRangeDatum.value", _p?.value);
    _o.set(_j, "PartitionRangeDatum.location", _p?.location);
    return _j;
  },
  partitionCmd(_p?: PartitionCmd["PartitionCmd"]): PartitionCmd {
    const _j = ({
      PartitionCmd: {}
    } as PartitionCmd);
    _o.set(_j, "PartitionCmd.name", _p?.name);
    _o.set(_j, "PartitionCmd.bound", _p?.bound);
    _o.set(_j, "PartitionCmd.concurrent", _p?.concurrent);
    return _j;
  },
  rangeTblEntry(_p?: RangeTblEntry["RangeTblEntry"]): RangeTblEntry {
    const _j = ({
      RangeTblEntry: {}
    } as RangeTblEntry);
    _o.set(_j, "RangeTblEntry.rtekind", _p?.rtekind);
    _o.set(_j, "RangeTblEntry.relid", _p?.relid);
    _o.set(_j, "RangeTblEntry.relkind", _p?.relkind);
    _o.set(_j, "RangeTblEntry.rellockmode", _p?.rellockmode);
    _o.set(_j, "RangeTblEntry.tablesample", _p?.tablesample);
    _o.set(_j, "RangeTblEntry.perminfoindex", _p?.perminfoindex);
    _o.set(_j, "RangeTblEntry.subquery", _p?.subquery);
    _o.set(_j, "RangeTblEntry.security_barrier", _p?.security_barrier);
    _o.set(_j, "RangeTblEntry.jointype", _p?.jointype);
    _o.set(_j, "RangeTblEntry.joinmergedcols", _p?.joinmergedcols);
    _o.set(_j, "RangeTblEntry.joinaliasvars", _p?.joinaliasvars);
    _o.set(_j, "RangeTblEntry.joinleftcols", _p?.joinleftcols);
    _o.set(_j, "RangeTblEntry.joinrightcols", _p?.joinrightcols);
    _o.set(_j, "RangeTblEntry.join_using_alias", _p?.join_using_alias);
    _o.set(_j, "RangeTblEntry.functions", _p?.functions);
    _o.set(_j, "RangeTblEntry.funcordinality", _p?.funcordinality);
    _o.set(_j, "RangeTblEntry.tablefunc", _p?.tablefunc);
    _o.set(_j, "RangeTblEntry.values_lists", _p?.values_lists);
    _o.set(_j, "RangeTblEntry.ctename", _p?.ctename);
    _o.set(_j, "RangeTblEntry.ctelevelsup", _p?.ctelevelsup);
    _o.set(_j, "RangeTblEntry.self_reference", _p?.self_reference);
    _o.set(_j, "RangeTblEntry.coltypes", _p?.coltypes);
    _o.set(_j, "RangeTblEntry.coltypmods", _p?.coltypmods);
    _o.set(_j, "RangeTblEntry.colcollations", _p?.colcollations);
    _o.set(_j, "RangeTblEntry.enrname", _p?.enrname);
    _o.set(_j, "RangeTblEntry.enrtuples", _p?.enrtuples);
    _o.set(_j, "RangeTblEntry.alias", _p?.alias);
    _o.set(_j, "RangeTblEntry.eref", _p?.eref);
    _o.set(_j, "RangeTblEntry.lateral", _p?.lateral);
    _o.set(_j, "RangeTblEntry.inh", _p?.inh);
    _o.set(_j, "RangeTblEntry.inFromCl", _p?.inFromCl);
    _o.set(_j, "RangeTblEntry.securityQuals", _p?.securityQuals);
    return _j;
  },
  rtePermissionInfo(_p?: RTEPermissionInfo["RTEPermissionInfo"]): RTEPermissionInfo {
    const _j = ({
      RTEPermissionInfo: {}
    } as RTEPermissionInfo);
    _o.set(_j, "RTEPermissionInfo.relid", _p?.relid);
    _o.set(_j, "RTEPermissionInfo.inh", _p?.inh);
    _o.set(_j, "RTEPermissionInfo.requiredPerms", _p?.requiredPerms);
    _o.set(_j, "RTEPermissionInfo.checkAsUser", _p?.checkAsUser);
    _o.set(_j, "RTEPermissionInfo.selectedCols", _p?.selectedCols);
    _o.set(_j, "RTEPermissionInfo.insertedCols", _p?.insertedCols);
    _o.set(_j, "RTEPermissionInfo.updatedCols", _p?.updatedCols);
    return _j;
  },
  rangeTblFunction(_p?: RangeTblFunction["RangeTblFunction"]): RangeTblFunction {
    const _j = ({
      RangeTblFunction: {}
    } as RangeTblFunction);
    _o.set(_j, "RangeTblFunction.funcexpr", _p?.funcexpr);
    _o.set(_j, "RangeTblFunction.funccolcount", _p?.funccolcount);
    _o.set(_j, "RangeTblFunction.funccolnames", _p?.funccolnames);
    _o.set(_j, "RangeTblFunction.funccoltypes", _p?.funccoltypes);
    _o.set(_j, "RangeTblFunction.funccoltypmods", _p?.funccoltypmods);
    _o.set(_j, "RangeTblFunction.funccolcollations", _p?.funccolcollations);
    _o.set(_j, "RangeTblFunction.funcparams", _p?.funcparams);
    return _j;
  },
  tableSampleClause(_p?: TableSampleClause["TableSampleClause"]): TableSampleClause {
    const _j = ({
      TableSampleClause: {}
    } as TableSampleClause);
    _o.set(_j, "TableSampleClause.tsmhandler", _p?.tsmhandler);
    _o.set(_j, "TableSampleClause.args", _p?.args);
    _o.set(_j, "TableSampleClause.repeatable", _p?.repeatable);
    return _j;
  },
  withCheckOption(_p?: WithCheckOption["WithCheckOption"]): WithCheckOption {
    const _j = ({
      WithCheckOption: {}
    } as WithCheckOption);
    _o.set(_j, "WithCheckOption.kind", _p?.kind);
    _o.set(_j, "WithCheckOption.relname", _p?.relname);
    _o.set(_j, "WithCheckOption.polname", _p?.polname);
    _o.set(_j, "WithCheckOption.qual", _p?.qual);
    _o.set(_j, "WithCheckOption.cascaded", _p?.cascaded);
    return _j;
  },
  sortGroupClause(_p?: SortGroupClause["SortGroupClause"]): SortGroupClause {
    const _j = ({
      SortGroupClause: {}
    } as SortGroupClause);
    _o.set(_j, "SortGroupClause.tleSortGroupRef", _p?.tleSortGroupRef);
    _o.set(_j, "SortGroupClause.eqop", _p?.eqop);
    _o.set(_j, "SortGroupClause.sortop", _p?.sortop);
    _o.set(_j, "SortGroupClause.nulls_first", _p?.nulls_first);
    _o.set(_j, "SortGroupClause.hashable", _p?.hashable);
    return _j;
  },
  groupingSet(_p?: GroupingSet["GroupingSet"]): GroupingSet {
    const _j = ({
      GroupingSet: {}
    } as GroupingSet);
    _o.set(_j, "GroupingSet.kind", _p?.kind);
    _o.set(_j, "GroupingSet.content", _p?.content);
    _o.set(_j, "GroupingSet.location", _p?.location);
    return _j;
  },
  windowClause(_p?: WindowClause["WindowClause"]): WindowClause {
    const _j = ({
      WindowClause: {}
    } as WindowClause);
    _o.set(_j, "WindowClause.name", _p?.name);
    _o.set(_j, "WindowClause.refname", _p?.refname);
    _o.set(_j, "WindowClause.partitionClause", _p?.partitionClause);
    _o.set(_j, "WindowClause.orderClause", _p?.orderClause);
    _o.set(_j, "WindowClause.frameOptions", _p?.frameOptions);
    _o.set(_j, "WindowClause.startOffset", _p?.startOffset);
    _o.set(_j, "WindowClause.endOffset", _p?.endOffset);
    _o.set(_j, "WindowClause.runCondition", _p?.runCondition);
    _o.set(_j, "WindowClause.startInRangeFunc", _p?.startInRangeFunc);
    _o.set(_j, "WindowClause.endInRangeFunc", _p?.endInRangeFunc);
    _o.set(_j, "WindowClause.inRangeColl", _p?.inRangeColl);
    _o.set(_j, "WindowClause.inRangeAsc", _p?.inRangeAsc);
    _o.set(_j, "WindowClause.inRangeNullsFirst", _p?.inRangeNullsFirst);
    _o.set(_j, "WindowClause.winref", _p?.winref);
    _o.set(_j, "WindowClause.copiedOrder", _p?.copiedOrder);
    return _j;
  },
  rowMarkClause(_p?: RowMarkClause["RowMarkClause"]): RowMarkClause {
    const _j = ({
      RowMarkClause: {}
    } as RowMarkClause);
    _o.set(_j, "RowMarkClause.rti", _p?.rti);
    _o.set(_j, "RowMarkClause.strength", _p?.strength);
    _o.set(_j, "RowMarkClause.waitPolicy", _p?.waitPolicy);
    _o.set(_j, "RowMarkClause.pushedDown", _p?.pushedDown);
    return _j;
  },
  withClause(_p?: WithClause["WithClause"]): WithClause {
    const _j = ({
      WithClause: {}
    } as WithClause);
    _o.set(_j, "WithClause.ctes", _p?.ctes);
    _o.set(_j, "WithClause.recursive", _p?.recursive);
    _o.set(_j, "WithClause.location", _p?.location);
    return _j;
  },
  inferClause(_p?: InferClause["InferClause"]): InferClause {
    const _j = ({
      InferClause: {}
    } as InferClause);
    _o.set(_j, "InferClause.indexElems", _p?.indexElems);
    _o.set(_j, "InferClause.whereClause", _p?.whereClause);
    _o.set(_j, "InferClause.conname", _p?.conname);
    _o.set(_j, "InferClause.location", _p?.location);
    return _j;
  },
  onConflictClause(_p?: OnConflictClause["OnConflictClause"]): OnConflictClause {
    const _j = ({
      OnConflictClause: {}
    } as OnConflictClause);
    _o.set(_j, "OnConflictClause.action", _p?.action);
    _o.set(_j, "OnConflictClause.infer", _p?.infer);
    _o.set(_j, "OnConflictClause.targetList", _p?.targetList);
    _o.set(_j, "OnConflictClause.whereClause", _p?.whereClause);
    _o.set(_j, "OnConflictClause.location", _p?.location);
    return _j;
  },
  cteSearchClause(_p?: CTESearchClause["CTESearchClause"]): CTESearchClause {
    const _j = ({
      CTESearchClause: {}
    } as CTESearchClause);
    _o.set(_j, "CTESearchClause.search_col_list", _p?.search_col_list);
    _o.set(_j, "CTESearchClause.search_breadth_first", _p?.search_breadth_first);
    _o.set(_j, "CTESearchClause.search_seq_column", _p?.search_seq_column);
    _o.set(_j, "CTESearchClause.location", _p?.location);
    return _j;
  },
  cteCycleClause(_p?: CTECycleClause["CTECycleClause"]): CTECycleClause {
    const _j = ({
      CTECycleClause: {}
    } as CTECycleClause);
    _o.set(_j, "CTECycleClause.cycle_col_list", _p?.cycle_col_list);
    _o.set(_j, "CTECycleClause.cycle_mark_column", _p?.cycle_mark_column);
    _o.set(_j, "CTECycleClause.cycle_mark_value", _p?.cycle_mark_value);
    _o.set(_j, "CTECycleClause.cycle_mark_default", _p?.cycle_mark_default);
    _o.set(_j, "CTECycleClause.cycle_path_column", _p?.cycle_path_column);
    _o.set(_j, "CTECycleClause.location", _p?.location);
    _o.set(_j, "CTECycleClause.cycle_mark_type", _p?.cycle_mark_type);
    _o.set(_j, "CTECycleClause.cycle_mark_typmod", _p?.cycle_mark_typmod);
    _o.set(_j, "CTECycleClause.cycle_mark_collation", _p?.cycle_mark_collation);
    _o.set(_j, "CTECycleClause.cycle_mark_neop", _p?.cycle_mark_neop);
    return _j;
  },
  commonTableExpr(_p?: CommonTableExpr["CommonTableExpr"]): CommonTableExpr {
    const _j = ({
      CommonTableExpr: {}
    } as CommonTableExpr);
    _o.set(_j, "CommonTableExpr.ctename", _p?.ctename);
    _o.set(_j, "CommonTableExpr.aliascolnames", _p?.aliascolnames);
    _o.set(_j, "CommonTableExpr.ctematerialized", _p?.ctematerialized);
    _o.set(_j, "CommonTableExpr.ctequery", _p?.ctequery);
    _o.set(_j, "CommonTableExpr.search_clause", _p?.search_clause);
    _o.set(_j, "CommonTableExpr.cycle_clause", _p?.cycle_clause);
    _o.set(_j, "CommonTableExpr.location", _p?.location);
    _o.set(_j, "CommonTableExpr.cterecursive", _p?.cterecursive);
    _o.set(_j, "CommonTableExpr.cterefcount", _p?.cterefcount);
    _o.set(_j, "CommonTableExpr.ctecolnames", _p?.ctecolnames);
    _o.set(_j, "CommonTableExpr.ctecoltypes", _p?.ctecoltypes);
    _o.set(_j, "CommonTableExpr.ctecoltypmods", _p?.ctecoltypmods);
    _o.set(_j, "CommonTableExpr.ctecolcollations", _p?.ctecolcollations);
    return _j;
  },
  mergeWhenClause(_p?: MergeWhenClause["MergeWhenClause"]): MergeWhenClause {
    const _j = ({
      MergeWhenClause: {}
    } as MergeWhenClause);
    _o.set(_j, "MergeWhenClause.matched", _p?.matched);
    _o.set(_j, "MergeWhenClause.commandType", _p?.commandType);
    _o.set(_j, "MergeWhenClause.override", _p?.override);
    _o.set(_j, "MergeWhenClause.condition", _p?.condition);
    _o.set(_j, "MergeWhenClause.targetList", _p?.targetList);
    _o.set(_j, "MergeWhenClause.values", _p?.values);
    return _j;
  },
  mergeAction(_p?: MergeAction["MergeAction"]): MergeAction {
    const _j = ({
      MergeAction: {}
    } as MergeAction);
    _o.set(_j, "MergeAction.matched", _p?.matched);
    _o.set(_j, "MergeAction.commandType", _p?.commandType);
    _o.set(_j, "MergeAction.override", _p?.override);
    _o.set(_j, "MergeAction.qual", _p?.qual);
    _o.set(_j, "MergeAction.targetList", _p?.targetList);
    _o.set(_j, "MergeAction.updateColnos", _p?.updateColnos);
    return _j;
  },
  triggerTransition(_p?: TriggerTransition["TriggerTransition"]): TriggerTransition {
    const _j = ({
      TriggerTransition: {}
    } as TriggerTransition);
    _o.set(_j, "TriggerTransition.name", _p?.name);
    _o.set(_j, "TriggerTransition.isNew", _p?.isNew);
    _o.set(_j, "TriggerTransition.isTable", _p?.isTable);
    return _j;
  },
  jsonOutput(_p?: JsonOutput["JsonOutput"]): JsonOutput {
    const _j = ({
      JsonOutput: {}
    } as JsonOutput);
    _o.set(_j, "JsonOutput.typeName", _p?.typeName);
    _o.set(_j, "JsonOutput.returning", _p?.returning);
    return _j;
  },
  jsonKeyValue(_p?: JsonKeyValue["JsonKeyValue"]): JsonKeyValue {
    const _j = ({
      JsonKeyValue: {}
    } as JsonKeyValue);
    _o.set(_j, "JsonKeyValue.key", _p?.key);
    _o.set(_j, "JsonKeyValue.value", _p?.value);
    return _j;
  },
  jsonObjectConstructor(_p?: JsonObjectConstructor["JsonObjectConstructor"]): JsonObjectConstructor {
    const _j = ({
      JsonObjectConstructor: {}
    } as JsonObjectConstructor);
    _o.set(_j, "JsonObjectConstructor.exprs", _p?.exprs);
    _o.set(_j, "JsonObjectConstructor.output", _p?.output);
    _o.set(_j, "JsonObjectConstructor.absent_on_null", _p?.absent_on_null);
    _o.set(_j, "JsonObjectConstructor.unique", _p?.unique);
    _o.set(_j, "JsonObjectConstructor.location", _p?.location);
    return _j;
  },
  jsonArrayConstructor(_p?: JsonArrayConstructor["JsonArrayConstructor"]): JsonArrayConstructor {
    const _j = ({
      JsonArrayConstructor: {}
    } as JsonArrayConstructor);
    _o.set(_j, "JsonArrayConstructor.exprs", _p?.exprs);
    _o.set(_j, "JsonArrayConstructor.output", _p?.output);
    _o.set(_j, "JsonArrayConstructor.absent_on_null", _p?.absent_on_null);
    _o.set(_j, "JsonArrayConstructor.location", _p?.location);
    return _j;
  },
  jsonArrayQueryConstructor(_p?: JsonArrayQueryConstructor["JsonArrayQueryConstructor"]): JsonArrayQueryConstructor {
    const _j = ({
      JsonArrayQueryConstructor: {}
    } as JsonArrayQueryConstructor);
    _o.set(_j, "JsonArrayQueryConstructor.query", _p?.query);
    _o.set(_j, "JsonArrayQueryConstructor.output", _p?.output);
    _o.set(_j, "JsonArrayQueryConstructor.format", _p?.format);
    _o.set(_j, "JsonArrayQueryConstructor.absent_on_null", _p?.absent_on_null);
    _o.set(_j, "JsonArrayQueryConstructor.location", _p?.location);
    return _j;
  },
  jsonAggConstructor(_p?: JsonAggConstructor["JsonAggConstructor"]): JsonAggConstructor {
    const _j = ({
      JsonAggConstructor: {}
    } as JsonAggConstructor);
    _o.set(_j, "JsonAggConstructor.output", _p?.output);
    _o.set(_j, "JsonAggConstructor.agg_filter", _p?.agg_filter);
    _o.set(_j, "JsonAggConstructor.agg_order", _p?.agg_order);
    _o.set(_j, "JsonAggConstructor.over", _p?.over);
    _o.set(_j, "JsonAggConstructor.location", _p?.location);
    return _j;
  },
  jsonObjectAgg(_p?: JsonObjectAgg["JsonObjectAgg"]): JsonObjectAgg {
    const _j = ({
      JsonObjectAgg: {}
    } as JsonObjectAgg);
    _o.set(_j, "JsonObjectAgg.constructor", _p?.constructor);
    _o.set(_j, "JsonObjectAgg.arg", _p?.arg);
    _o.set(_j, "JsonObjectAgg.absent_on_null", _p?.absent_on_null);
    _o.set(_j, "JsonObjectAgg.unique", _p?.unique);
    return _j;
  },
  jsonArrayAgg(_p?: JsonArrayAgg["JsonArrayAgg"]): JsonArrayAgg {
    const _j = ({
      JsonArrayAgg: {}
    } as JsonArrayAgg);
    _o.set(_j, "JsonArrayAgg.constructor", _p?.constructor);
    _o.set(_j, "JsonArrayAgg.arg", _p?.arg);
    _o.set(_j, "JsonArrayAgg.absent_on_null", _p?.absent_on_null);
    return _j;
  },
  rawStmt(_p?: RawStmt["RawStmt"]): RawStmt {
    const _j = ({
      RawStmt: {}
    } as RawStmt);
    _o.set(_j, "RawStmt.stmt", _p?.stmt);
    _o.set(_j, "RawStmt.stmt_location", _p?.stmt_location);
    _o.set(_j, "RawStmt.stmt_len", _p?.stmt_len);
    return _j;
  },
  insertStmt(_p?: InsertStmt["InsertStmt"]): InsertStmt {
    const _j = ({
      InsertStmt: {}
    } as InsertStmt);
    _o.set(_j, "InsertStmt.relation", _p?.relation);
    _o.set(_j, "InsertStmt.cols", _p?.cols);
    _o.set(_j, "InsertStmt.selectStmt", _p?.selectStmt);
    _o.set(_j, "InsertStmt.onConflictClause", _p?.onConflictClause);
    _o.set(_j, "InsertStmt.returningList", _p?.returningList);
    _o.set(_j, "InsertStmt.withClause", _p?.withClause);
    _o.set(_j, "InsertStmt.override", _p?.override);
    return _j;
  },
  deleteStmt(_p?: DeleteStmt["DeleteStmt"]): DeleteStmt {
    const _j = ({
      DeleteStmt: {}
    } as DeleteStmt);
    _o.set(_j, "DeleteStmt.relation", _p?.relation);
    _o.set(_j, "DeleteStmt.usingClause", _p?.usingClause);
    _o.set(_j, "DeleteStmt.whereClause", _p?.whereClause);
    _o.set(_j, "DeleteStmt.returningList", _p?.returningList);
    _o.set(_j, "DeleteStmt.withClause", _p?.withClause);
    return _j;
  },
  updateStmt(_p?: UpdateStmt["UpdateStmt"]): UpdateStmt {
    const _j = ({
      UpdateStmt: {}
    } as UpdateStmt);
    _o.set(_j, "UpdateStmt.relation", _p?.relation);
    _o.set(_j, "UpdateStmt.targetList", _p?.targetList);
    _o.set(_j, "UpdateStmt.whereClause", _p?.whereClause);
    _o.set(_j, "UpdateStmt.fromClause", _p?.fromClause);
    _o.set(_j, "UpdateStmt.returningList", _p?.returningList);
    _o.set(_j, "UpdateStmt.withClause", _p?.withClause);
    return _j;
  },
  mergeStmt(_p?: MergeStmt["MergeStmt"]): MergeStmt {
    const _j = ({
      MergeStmt: {}
    } as MergeStmt);
    _o.set(_j, "MergeStmt.relation", _p?.relation);
    _o.set(_j, "MergeStmt.sourceRelation", _p?.sourceRelation);
    _o.set(_j, "MergeStmt.joinCondition", _p?.joinCondition);
    _o.set(_j, "MergeStmt.mergeWhenClauses", _p?.mergeWhenClauses);
    _o.set(_j, "MergeStmt.withClause", _p?.withClause);
    return _j;
  },
  selectStmt(_p?: SelectStmt["SelectStmt"]): SelectStmt {
    const _j = ({
      SelectStmt: {}
    } as SelectStmt);
    _o.set(_j, "SelectStmt.distinctClause", _p?.distinctClause);
    _o.set(_j, "SelectStmt.intoClause", _p?.intoClause);
    _o.set(_j, "SelectStmt.targetList", _p?.targetList);
    _o.set(_j, "SelectStmt.fromClause", _p?.fromClause);
    _o.set(_j, "SelectStmt.whereClause", _p?.whereClause);
    _o.set(_j, "SelectStmt.groupClause", _p?.groupClause);
    _o.set(_j, "SelectStmt.groupDistinct", _p?.groupDistinct);
    _o.set(_j, "SelectStmt.havingClause", _p?.havingClause);
    _o.set(_j, "SelectStmt.windowClause", _p?.windowClause);
    _o.set(_j, "SelectStmt.valuesLists", _p?.valuesLists);
    _o.set(_j, "SelectStmt.sortClause", _p?.sortClause);
    _o.set(_j, "SelectStmt.limitOffset", _p?.limitOffset);
    _o.set(_j, "SelectStmt.limitCount", _p?.limitCount);
    _o.set(_j, "SelectStmt.limitOption", _p?.limitOption);
    _o.set(_j, "SelectStmt.lockingClause", _p?.lockingClause);
    _o.set(_j, "SelectStmt.withClause", _p?.withClause);
    _o.set(_j, "SelectStmt.op", _p?.op);
    _o.set(_j, "SelectStmt.all", _p?.all);
    _o.set(_j, "SelectStmt.larg", _p?.larg);
    _o.set(_j, "SelectStmt.rarg", _p?.rarg);
    return _j;
  },
  setOperationStmt(_p?: SetOperationStmt["SetOperationStmt"]): SetOperationStmt {
    const _j = ({
      SetOperationStmt: {}
    } as SetOperationStmt);
    _o.set(_j, "SetOperationStmt.op", _p?.op);
    _o.set(_j, "SetOperationStmt.all", _p?.all);
    _o.set(_j, "SetOperationStmt.larg", _p?.larg);
    _o.set(_j, "SetOperationStmt.rarg", _p?.rarg);
    _o.set(_j, "SetOperationStmt.colTypes", _p?.colTypes);
    _o.set(_j, "SetOperationStmt.colTypmods", _p?.colTypmods);
    _o.set(_j, "SetOperationStmt.colCollations", _p?.colCollations);
    _o.set(_j, "SetOperationStmt.groupClauses", _p?.groupClauses);
    return _j;
  },
  returnStmt(_p?: ReturnStmt["ReturnStmt"]): ReturnStmt {
    const _j = ({
      ReturnStmt: {}
    } as ReturnStmt);
    _o.set(_j, "ReturnStmt.returnval", _p?.returnval);
    return _j;
  },
  plAssignStmt(_p?: PLAssignStmt["PLAssignStmt"]): PLAssignStmt {
    const _j = ({
      PLAssignStmt: {}
    } as PLAssignStmt);
    _o.set(_j, "PLAssignStmt.name", _p?.name);
    _o.set(_j, "PLAssignStmt.indirection", _p?.indirection);
    _o.set(_j, "PLAssignStmt.nnames", _p?.nnames);
    _o.set(_j, "PLAssignStmt.val", _p?.val);
    _o.set(_j, "PLAssignStmt.location", _p?.location);
    return _j;
  },
  createSchemaStmt(_p?: CreateSchemaStmt["CreateSchemaStmt"]): CreateSchemaStmt {
    const _j = ({
      CreateSchemaStmt: {}
    } as CreateSchemaStmt);
    _o.set(_j, "CreateSchemaStmt.schemaname", _p?.schemaname);
    _o.set(_j, "CreateSchemaStmt.authrole", _p?.authrole);
    _o.set(_j, "CreateSchemaStmt.schemaElts", _p?.schemaElts);
    _o.set(_j, "CreateSchemaStmt.if_not_exists", _p?.if_not_exists);
    return _j;
  },
  alterTableStmt(_p?: AlterTableStmt["AlterTableStmt"]): AlterTableStmt {
    const _j = ({
      AlterTableStmt: {}
    } as AlterTableStmt);
    _o.set(_j, "AlterTableStmt.relation", _p?.relation);
    _o.set(_j, "AlterTableStmt.cmds", _p?.cmds);
    _o.set(_j, "AlterTableStmt.objtype", _p?.objtype);
    _o.set(_j, "AlterTableStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  replicaIdentityStmt(_p?: ReplicaIdentityStmt["ReplicaIdentityStmt"]): ReplicaIdentityStmt {
    const _j = ({
      ReplicaIdentityStmt: {}
    } as ReplicaIdentityStmt);
    _o.set(_j, "ReplicaIdentityStmt.identity_type", _p?.identity_type);
    _o.set(_j, "ReplicaIdentityStmt.name", _p?.name);
    return _j;
  },
  alterTableCmd(_p?: AlterTableCmd["AlterTableCmd"]): AlterTableCmd {
    const _j = ({
      AlterTableCmd: {}
    } as AlterTableCmd);
    _o.set(_j, "AlterTableCmd.subtype", _p?.subtype);
    _o.set(_j, "AlterTableCmd.name", _p?.name);
    _o.set(_j, "AlterTableCmd.num", _p?.num);
    _o.set(_j, "AlterTableCmd.newowner", _p?.newowner);
    _o.set(_j, "AlterTableCmd.def", _p?.def);
    _o.set(_j, "AlterTableCmd.behavior", _p?.behavior);
    _o.set(_j, "AlterTableCmd.missing_ok", _p?.missing_ok);
    _o.set(_j, "AlterTableCmd.recurse", _p?.recurse);
    return _j;
  },
  alterCollationStmt(_p?: AlterCollationStmt["AlterCollationStmt"]): AlterCollationStmt {
    const _j = ({
      AlterCollationStmt: {}
    } as AlterCollationStmt);
    _o.set(_j, "AlterCollationStmt.collname", _p?.collname);
    return _j;
  },
  alterDomainStmt(_p?: AlterDomainStmt["AlterDomainStmt"]): AlterDomainStmt {
    const _j = ({
      AlterDomainStmt: {}
    } as AlterDomainStmt);
    _o.set(_j, "AlterDomainStmt.subtype", _p?.subtype);
    _o.set(_j, "AlterDomainStmt.typeName", _p?.typeName);
    _o.set(_j, "AlterDomainStmt.name", _p?.name);
    _o.set(_j, "AlterDomainStmt.def", _p?.def);
    _o.set(_j, "AlterDomainStmt.behavior", _p?.behavior);
    _o.set(_j, "AlterDomainStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  grantStmt(_p?: GrantStmt["GrantStmt"]): GrantStmt {
    const _j = ({
      GrantStmt: {}
    } as GrantStmt);
    _o.set(_j, "GrantStmt.is_grant", _p?.is_grant);
    _o.set(_j, "GrantStmt.targtype", _p?.targtype);
    _o.set(_j, "GrantStmt.objtype", _p?.objtype);
    _o.set(_j, "GrantStmt.objects", _p?.objects);
    _o.set(_j, "GrantStmt.privileges", _p?.privileges);
    _o.set(_j, "GrantStmt.grantees", _p?.grantees);
    _o.set(_j, "GrantStmt.grant_option", _p?.grant_option);
    _o.set(_j, "GrantStmt.grantor", _p?.grantor);
    _o.set(_j, "GrantStmt.behavior", _p?.behavior);
    return _j;
  },
  objectWithArgs(_p?: ObjectWithArgs["ObjectWithArgs"]): ObjectWithArgs {
    const _j = ({
      ObjectWithArgs: {}
    } as ObjectWithArgs);
    _o.set(_j, "ObjectWithArgs.objname", _p?.objname);
    _o.set(_j, "ObjectWithArgs.objargs", _p?.objargs);
    _o.set(_j, "ObjectWithArgs.objfuncargs", _p?.objfuncargs);
    _o.set(_j, "ObjectWithArgs.args_unspecified", _p?.args_unspecified);
    return _j;
  },
  accessPriv(_p?: AccessPriv["AccessPriv"]): AccessPriv {
    const _j = ({
      AccessPriv: {}
    } as AccessPriv);
    _o.set(_j, "AccessPriv.priv_name", _p?.priv_name);
    _o.set(_j, "AccessPriv.cols", _p?.cols);
    return _j;
  },
  grantRoleStmt(_p?: GrantRoleStmt["GrantRoleStmt"]): GrantRoleStmt {
    const _j = ({
      GrantRoleStmt: {}
    } as GrantRoleStmt);
    _o.set(_j, "GrantRoleStmt.granted_roles", _p?.granted_roles);
    _o.set(_j, "GrantRoleStmt.grantee_roles", _p?.grantee_roles);
    _o.set(_j, "GrantRoleStmt.is_grant", _p?.is_grant);
    _o.set(_j, "GrantRoleStmt.opt", _p?.opt);
    _o.set(_j, "GrantRoleStmt.grantor", _p?.grantor);
    _o.set(_j, "GrantRoleStmt.behavior", _p?.behavior);
    return _j;
  },
  alterDefaultPrivilegesStmt(_p?: AlterDefaultPrivilegesStmt["AlterDefaultPrivilegesStmt"]): AlterDefaultPrivilegesStmt {
    const _j = ({
      AlterDefaultPrivilegesStmt: {}
    } as AlterDefaultPrivilegesStmt);
    _o.set(_j, "AlterDefaultPrivilegesStmt.options", _p?.options);
    _o.set(_j, "AlterDefaultPrivilegesStmt.action", _p?.action);
    return _j;
  },
  copyStmt(_p?: CopyStmt["CopyStmt"]): CopyStmt {
    const _j = ({
      CopyStmt: {}
    } as CopyStmt);
    _o.set(_j, "CopyStmt.relation", _p?.relation);
    _o.set(_j, "CopyStmt.query", _p?.query);
    _o.set(_j, "CopyStmt.attlist", _p?.attlist);
    _o.set(_j, "CopyStmt.is_from", _p?.is_from);
    _o.set(_j, "CopyStmt.is_program", _p?.is_program);
    _o.set(_j, "CopyStmt.filename", _p?.filename);
    _o.set(_j, "CopyStmt.options", _p?.options);
    _o.set(_j, "CopyStmt.whereClause", _p?.whereClause);
    return _j;
  },
  variableSetStmt(_p?: VariableSetStmt["VariableSetStmt"]): VariableSetStmt {
    const _j = ({
      VariableSetStmt: {}
    } as VariableSetStmt);
    _o.set(_j, "VariableSetStmt.kind", _p?.kind);
    _o.set(_j, "VariableSetStmt.name", _p?.name);
    _o.set(_j, "VariableSetStmt.args", _p?.args);
    _o.set(_j, "VariableSetStmt.is_local", _p?.is_local);
    return _j;
  },
  variableShowStmt(_p?: VariableShowStmt["VariableShowStmt"]): VariableShowStmt {
    const _j = ({
      VariableShowStmt: {}
    } as VariableShowStmt);
    _o.set(_j, "VariableShowStmt.name", _p?.name);
    return _j;
  },
  createStmt(_p?: CreateStmt["CreateStmt"]): CreateStmt {
    const _j = ({
      CreateStmt: {}
    } as CreateStmt);
    _o.set(_j, "CreateStmt.relation", _p?.relation);
    _o.set(_j, "CreateStmt.tableElts", _p?.tableElts);
    _o.set(_j, "CreateStmt.inhRelations", _p?.inhRelations);
    _o.set(_j, "CreateStmt.partbound", _p?.partbound);
    _o.set(_j, "CreateStmt.partspec", _p?.partspec);
    _o.set(_j, "CreateStmt.ofTypename", _p?.ofTypename);
    _o.set(_j, "CreateStmt.constraints", _p?.constraints);
    _o.set(_j, "CreateStmt.options", _p?.options);
    _o.set(_j, "CreateStmt.oncommit", _p?.oncommit);
    _o.set(_j, "CreateStmt.tablespacename", _p?.tablespacename);
    _o.set(_j, "CreateStmt.accessMethod", _p?.accessMethod);
    _o.set(_j, "CreateStmt.if_not_exists", _p?.if_not_exists);
    return _j;
  },
  constraint(_p?: Constraint["Constraint"]): Constraint {
    const _j = ({
      Constraint: {}
    } as Constraint);
    _o.set(_j, "Constraint.contype", _p?.contype);
    _o.set(_j, "Constraint.conname", _p?.conname);
    _o.set(_j, "Constraint.deferrable", _p?.deferrable);
    _o.set(_j, "Constraint.initdeferred", _p?.initdeferred);
    _o.set(_j, "Constraint.location", _p?.location);
    _o.set(_j, "Constraint.is_no_inherit", _p?.is_no_inherit);
    _o.set(_j, "Constraint.raw_expr", _p?.raw_expr);
    _o.set(_j, "Constraint.cooked_expr", _p?.cooked_expr);
    _o.set(_j, "Constraint.generated_when", _p?.generated_when);
    _o.set(_j, "Constraint.nulls_not_distinct", _p?.nulls_not_distinct);
    _o.set(_j, "Constraint.keys", _p?.keys);
    _o.set(_j, "Constraint.including", _p?.including);
    _o.set(_j, "Constraint.exclusions", _p?.exclusions);
    _o.set(_j, "Constraint.options", _p?.options);
    _o.set(_j, "Constraint.indexname", _p?.indexname);
    _o.set(_j, "Constraint.indexspace", _p?.indexspace);
    _o.set(_j, "Constraint.reset_default_tblspc", _p?.reset_default_tblspc);
    _o.set(_j, "Constraint.access_method", _p?.access_method);
    _o.set(_j, "Constraint.where_clause", _p?.where_clause);
    _o.set(_j, "Constraint.pktable", _p?.pktable);
    _o.set(_j, "Constraint.fk_attrs", _p?.fk_attrs);
    _o.set(_j, "Constraint.pk_attrs", _p?.pk_attrs);
    _o.set(_j, "Constraint.fk_matchtype", _p?.fk_matchtype);
    _o.set(_j, "Constraint.fk_upd_action", _p?.fk_upd_action);
    _o.set(_j, "Constraint.fk_del_action", _p?.fk_del_action);
    _o.set(_j, "Constraint.fk_del_set_cols", _p?.fk_del_set_cols);
    _o.set(_j, "Constraint.old_conpfeqop", _p?.old_conpfeqop);
    _o.set(_j, "Constraint.old_pktable_oid", _p?.old_pktable_oid);
    _o.set(_j, "Constraint.skip_validation", _p?.skip_validation);
    _o.set(_j, "Constraint.initially_valid", _p?.initially_valid);
    return _j;
  },
  createTableSpaceStmt(_p?: CreateTableSpaceStmt["CreateTableSpaceStmt"]): CreateTableSpaceStmt {
    const _j = ({
      CreateTableSpaceStmt: {}
    } as CreateTableSpaceStmt);
    _o.set(_j, "CreateTableSpaceStmt.tablespacename", _p?.tablespacename);
    _o.set(_j, "CreateTableSpaceStmt.owner", _p?.owner);
    _o.set(_j, "CreateTableSpaceStmt.location", _p?.location);
    _o.set(_j, "CreateTableSpaceStmt.options", _p?.options);
    return _j;
  },
  dropTableSpaceStmt(_p?: DropTableSpaceStmt["DropTableSpaceStmt"]): DropTableSpaceStmt {
    const _j = ({
      DropTableSpaceStmt: {}
    } as DropTableSpaceStmt);
    _o.set(_j, "DropTableSpaceStmt.tablespacename", _p?.tablespacename);
    _o.set(_j, "DropTableSpaceStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  alterTableSpaceOptionsStmt(_p?: AlterTableSpaceOptionsStmt["AlterTableSpaceOptionsStmt"]): AlterTableSpaceOptionsStmt {
    const _j = ({
      AlterTableSpaceOptionsStmt: {}
    } as AlterTableSpaceOptionsStmt);
    _o.set(_j, "AlterTableSpaceOptionsStmt.tablespacename", _p?.tablespacename);
    _o.set(_j, "AlterTableSpaceOptionsStmt.options", _p?.options);
    _o.set(_j, "AlterTableSpaceOptionsStmt.isReset", _p?.isReset);
    return _j;
  },
  alterTableMoveAllStmt(_p?: AlterTableMoveAllStmt["AlterTableMoveAllStmt"]): AlterTableMoveAllStmt {
    const _j = ({
      AlterTableMoveAllStmt: {}
    } as AlterTableMoveAllStmt);
    _o.set(_j, "AlterTableMoveAllStmt.orig_tablespacename", _p?.orig_tablespacename);
    _o.set(_j, "AlterTableMoveAllStmt.objtype", _p?.objtype);
    _o.set(_j, "AlterTableMoveAllStmt.roles", _p?.roles);
    _o.set(_j, "AlterTableMoveAllStmt.new_tablespacename", _p?.new_tablespacename);
    _o.set(_j, "AlterTableMoveAllStmt.nowait", _p?.nowait);
    return _j;
  },
  createExtensionStmt(_p?: CreateExtensionStmt["CreateExtensionStmt"]): CreateExtensionStmt {
    const _j = ({
      CreateExtensionStmt: {}
    } as CreateExtensionStmt);
    _o.set(_j, "CreateExtensionStmt.extname", _p?.extname);
    _o.set(_j, "CreateExtensionStmt.if_not_exists", _p?.if_not_exists);
    _o.set(_j, "CreateExtensionStmt.options", _p?.options);
    return _j;
  },
  alterExtensionStmt(_p?: AlterExtensionStmt["AlterExtensionStmt"]): AlterExtensionStmt {
    const _j = ({
      AlterExtensionStmt: {}
    } as AlterExtensionStmt);
    _o.set(_j, "AlterExtensionStmt.extname", _p?.extname);
    _o.set(_j, "AlterExtensionStmt.options", _p?.options);
    return _j;
  },
  alterExtensionContentsStmt(_p?: AlterExtensionContentsStmt["AlterExtensionContentsStmt"]): AlterExtensionContentsStmt {
    const _j = ({
      AlterExtensionContentsStmt: {}
    } as AlterExtensionContentsStmt);
    _o.set(_j, "AlterExtensionContentsStmt.extname", _p?.extname);
    _o.set(_j, "AlterExtensionContentsStmt.action", _p?.action);
    _o.set(_j, "AlterExtensionContentsStmt.objtype", _p?.objtype);
    _o.set(_j, "AlterExtensionContentsStmt.object", _p?.object);
    return _j;
  },
  createFdwStmt(_p?: CreateFdwStmt["CreateFdwStmt"]): CreateFdwStmt {
    const _j = ({
      CreateFdwStmt: {}
    } as CreateFdwStmt);
    _o.set(_j, "CreateFdwStmt.fdwname", _p?.fdwname);
    _o.set(_j, "CreateFdwStmt.func_options", _p?.func_options);
    _o.set(_j, "CreateFdwStmt.options", _p?.options);
    return _j;
  },
  alterFdwStmt(_p?: AlterFdwStmt["AlterFdwStmt"]): AlterFdwStmt {
    const _j = ({
      AlterFdwStmt: {}
    } as AlterFdwStmt);
    _o.set(_j, "AlterFdwStmt.fdwname", _p?.fdwname);
    _o.set(_j, "AlterFdwStmt.func_options", _p?.func_options);
    _o.set(_j, "AlterFdwStmt.options", _p?.options);
    return _j;
  },
  createForeignServerStmt(_p?: CreateForeignServerStmt["CreateForeignServerStmt"]): CreateForeignServerStmt {
    const _j = ({
      CreateForeignServerStmt: {}
    } as CreateForeignServerStmt);
    _o.set(_j, "CreateForeignServerStmt.servername", _p?.servername);
    _o.set(_j, "CreateForeignServerStmt.servertype", _p?.servertype);
    _o.set(_j, "CreateForeignServerStmt.version", _p?.version);
    _o.set(_j, "CreateForeignServerStmt.fdwname", _p?.fdwname);
    _o.set(_j, "CreateForeignServerStmt.if_not_exists", _p?.if_not_exists);
    _o.set(_j, "CreateForeignServerStmt.options", _p?.options);
    return _j;
  },
  alterForeignServerStmt(_p?: AlterForeignServerStmt["AlterForeignServerStmt"]): AlterForeignServerStmt {
    const _j = ({
      AlterForeignServerStmt: {}
    } as AlterForeignServerStmt);
    _o.set(_j, "AlterForeignServerStmt.servername", _p?.servername);
    _o.set(_j, "AlterForeignServerStmt.version", _p?.version);
    _o.set(_j, "AlterForeignServerStmt.options", _p?.options);
    _o.set(_j, "AlterForeignServerStmt.has_version", _p?.has_version);
    return _j;
  },
  createForeignTableStmt(_p?: CreateForeignTableStmt["CreateForeignTableStmt"]): CreateForeignTableStmt {
    const _j = ({
      CreateForeignTableStmt: {}
    } as CreateForeignTableStmt);
    _o.set(_j, "CreateForeignTableStmt.base", _p?.base);
    _o.set(_j, "CreateForeignTableStmt.servername", _p?.servername);
    _o.set(_j, "CreateForeignTableStmt.options", _p?.options);
    return _j;
  },
  createUserMappingStmt(_p?: CreateUserMappingStmt["CreateUserMappingStmt"]): CreateUserMappingStmt {
    const _j = ({
      CreateUserMappingStmt: {}
    } as CreateUserMappingStmt);
    _o.set(_j, "CreateUserMappingStmt.user", _p?.user);
    _o.set(_j, "CreateUserMappingStmt.servername", _p?.servername);
    _o.set(_j, "CreateUserMappingStmt.if_not_exists", _p?.if_not_exists);
    _o.set(_j, "CreateUserMappingStmt.options", _p?.options);
    return _j;
  },
  alterUserMappingStmt(_p?: AlterUserMappingStmt["AlterUserMappingStmt"]): AlterUserMappingStmt {
    const _j = ({
      AlterUserMappingStmt: {}
    } as AlterUserMappingStmt);
    _o.set(_j, "AlterUserMappingStmt.user", _p?.user);
    _o.set(_j, "AlterUserMappingStmt.servername", _p?.servername);
    _o.set(_j, "AlterUserMappingStmt.options", _p?.options);
    return _j;
  },
  dropUserMappingStmt(_p?: DropUserMappingStmt["DropUserMappingStmt"]): DropUserMappingStmt {
    const _j = ({
      DropUserMappingStmt: {}
    } as DropUserMappingStmt);
    _o.set(_j, "DropUserMappingStmt.user", _p?.user);
    _o.set(_j, "DropUserMappingStmt.servername", _p?.servername);
    _o.set(_j, "DropUserMappingStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  importForeignSchemaStmt(_p?: ImportForeignSchemaStmt["ImportForeignSchemaStmt"]): ImportForeignSchemaStmt {
    const _j = ({
      ImportForeignSchemaStmt: {}
    } as ImportForeignSchemaStmt);
    _o.set(_j, "ImportForeignSchemaStmt.server_name", _p?.server_name);
    _o.set(_j, "ImportForeignSchemaStmt.remote_schema", _p?.remote_schema);
    _o.set(_j, "ImportForeignSchemaStmt.local_schema", _p?.local_schema);
    _o.set(_j, "ImportForeignSchemaStmt.list_type", _p?.list_type);
    _o.set(_j, "ImportForeignSchemaStmt.table_list", _p?.table_list);
    _o.set(_j, "ImportForeignSchemaStmt.options", _p?.options);
    return _j;
  },
  createPolicyStmt(_p?: CreatePolicyStmt["CreatePolicyStmt"]): CreatePolicyStmt {
    const _j = ({
      CreatePolicyStmt: {}
    } as CreatePolicyStmt);
    _o.set(_j, "CreatePolicyStmt.policy_name", _p?.policy_name);
    _o.set(_j, "CreatePolicyStmt.table", _p?.table);
    _o.set(_j, "CreatePolicyStmt.cmd_name", _p?.cmd_name);
    _o.set(_j, "CreatePolicyStmt.permissive", _p?.permissive);
    _o.set(_j, "CreatePolicyStmt.roles", _p?.roles);
    _o.set(_j, "CreatePolicyStmt.qual", _p?.qual);
    _o.set(_j, "CreatePolicyStmt.with_check", _p?.with_check);
    return _j;
  },
  alterPolicyStmt(_p?: AlterPolicyStmt["AlterPolicyStmt"]): AlterPolicyStmt {
    const _j = ({
      AlterPolicyStmt: {}
    } as AlterPolicyStmt);
    _o.set(_j, "AlterPolicyStmt.policy_name", _p?.policy_name);
    _o.set(_j, "AlterPolicyStmt.table", _p?.table);
    _o.set(_j, "AlterPolicyStmt.roles", _p?.roles);
    _o.set(_j, "AlterPolicyStmt.qual", _p?.qual);
    _o.set(_j, "AlterPolicyStmt.with_check", _p?.with_check);
    return _j;
  },
  createAmStmt(_p?: CreateAmStmt["CreateAmStmt"]): CreateAmStmt {
    const _j = ({
      CreateAmStmt: {}
    } as CreateAmStmt);
    _o.set(_j, "CreateAmStmt.amname", _p?.amname);
    _o.set(_j, "CreateAmStmt.handler_name", _p?.handler_name);
    _o.set(_j, "CreateAmStmt.amtype", _p?.amtype);
    return _j;
  },
  createTrigStmt(_p?: CreateTrigStmt["CreateTrigStmt"]): CreateTrigStmt {
    const _j = ({
      CreateTrigStmt: {}
    } as CreateTrigStmt);
    _o.set(_j, "CreateTrigStmt.replace", _p?.replace);
    _o.set(_j, "CreateTrigStmt.isconstraint", _p?.isconstraint);
    _o.set(_j, "CreateTrigStmt.trigname", _p?.trigname);
    _o.set(_j, "CreateTrigStmt.relation", _p?.relation);
    _o.set(_j, "CreateTrigStmt.funcname", _p?.funcname);
    _o.set(_j, "CreateTrigStmt.args", _p?.args);
    _o.set(_j, "CreateTrigStmt.row", _p?.row);
    _o.set(_j, "CreateTrigStmt.timing", _p?.timing);
    _o.set(_j, "CreateTrigStmt.events", _p?.events);
    _o.set(_j, "CreateTrigStmt.columns", _p?.columns);
    _o.set(_j, "CreateTrigStmt.whenClause", _p?.whenClause);
    _o.set(_j, "CreateTrigStmt.transitionRels", _p?.transitionRels);
    _o.set(_j, "CreateTrigStmt.deferrable", _p?.deferrable);
    _o.set(_j, "CreateTrigStmt.initdeferred", _p?.initdeferred);
    _o.set(_j, "CreateTrigStmt.constrrel", _p?.constrrel);
    return _j;
  },
  createEventTrigStmt(_p?: CreateEventTrigStmt["CreateEventTrigStmt"]): CreateEventTrigStmt {
    const _j = ({
      CreateEventTrigStmt: {}
    } as CreateEventTrigStmt);
    _o.set(_j, "CreateEventTrigStmt.trigname", _p?.trigname);
    _o.set(_j, "CreateEventTrigStmt.eventname", _p?.eventname);
    _o.set(_j, "CreateEventTrigStmt.whenclause", _p?.whenclause);
    _o.set(_j, "CreateEventTrigStmt.funcname", _p?.funcname);
    return _j;
  },
  alterEventTrigStmt(_p?: AlterEventTrigStmt["AlterEventTrigStmt"]): AlterEventTrigStmt {
    const _j = ({
      AlterEventTrigStmt: {}
    } as AlterEventTrigStmt);
    _o.set(_j, "AlterEventTrigStmt.trigname", _p?.trigname);
    _o.set(_j, "AlterEventTrigStmt.tgenabled", _p?.tgenabled);
    return _j;
  },
  createpLangStmt(_p?: CreatePLangStmt["CreatePLangStmt"]): CreatePLangStmt {
    const _j = ({
      CreatePLangStmt: {}
    } as CreatePLangStmt);
    _o.set(_j, "CreatePLangStmt.replace", _p?.replace);
    _o.set(_j, "CreatePLangStmt.plname", _p?.plname);
    _o.set(_j, "CreatePLangStmt.plhandler", _p?.plhandler);
    _o.set(_j, "CreatePLangStmt.plinline", _p?.plinline);
    _o.set(_j, "CreatePLangStmt.plvalidator", _p?.plvalidator);
    _o.set(_j, "CreatePLangStmt.pltrusted", _p?.pltrusted);
    return _j;
  },
  createRoleStmt(_p?: CreateRoleStmt["CreateRoleStmt"]): CreateRoleStmt {
    const _j = ({
      CreateRoleStmt: {}
    } as CreateRoleStmt);
    _o.set(_j, "CreateRoleStmt.stmt_type", _p?.stmt_type);
    _o.set(_j, "CreateRoleStmt.role", _p?.role);
    _o.set(_j, "CreateRoleStmt.options", _p?.options);
    return _j;
  },
  alterRoleStmt(_p?: AlterRoleStmt["AlterRoleStmt"]): AlterRoleStmt {
    const _j = ({
      AlterRoleStmt: {}
    } as AlterRoleStmt);
    _o.set(_j, "AlterRoleStmt.role", _p?.role);
    _o.set(_j, "AlterRoleStmt.options", _p?.options);
    _o.set(_j, "AlterRoleStmt.action", _p?.action);
    return _j;
  },
  alterRoleSetStmt(_p?: AlterRoleSetStmt["AlterRoleSetStmt"]): AlterRoleSetStmt {
    const _j = ({
      AlterRoleSetStmt: {}
    } as AlterRoleSetStmt);
    _o.set(_j, "AlterRoleSetStmt.role", _p?.role);
    _o.set(_j, "AlterRoleSetStmt.database", _p?.database);
    _o.set(_j, "AlterRoleSetStmt.setstmt", _p?.setstmt);
    return _j;
  },
  dropRoleStmt(_p?: DropRoleStmt["DropRoleStmt"]): DropRoleStmt {
    const _j = ({
      DropRoleStmt: {}
    } as DropRoleStmt);
    _o.set(_j, "DropRoleStmt.roles", _p?.roles);
    _o.set(_j, "DropRoleStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  createSeqStmt(_p?: CreateSeqStmt["CreateSeqStmt"]): CreateSeqStmt {
    const _j = ({
      CreateSeqStmt: {}
    } as CreateSeqStmt);
    _o.set(_j, "CreateSeqStmt.sequence", _p?.sequence);
    _o.set(_j, "CreateSeqStmt.options", _p?.options);
    _o.set(_j, "CreateSeqStmt.ownerId", _p?.ownerId);
    _o.set(_j, "CreateSeqStmt.for_identity", _p?.for_identity);
    _o.set(_j, "CreateSeqStmt.if_not_exists", _p?.if_not_exists);
    return _j;
  },
  alterSeqStmt(_p?: AlterSeqStmt["AlterSeqStmt"]): AlterSeqStmt {
    const _j = ({
      AlterSeqStmt: {}
    } as AlterSeqStmt);
    _o.set(_j, "AlterSeqStmt.sequence", _p?.sequence);
    _o.set(_j, "AlterSeqStmt.options", _p?.options);
    _o.set(_j, "AlterSeqStmt.for_identity", _p?.for_identity);
    _o.set(_j, "AlterSeqStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  defineStmt(_p?: DefineStmt["DefineStmt"]): DefineStmt {
    const _j = ({
      DefineStmt: {}
    } as DefineStmt);
    _o.set(_j, "DefineStmt.kind", _p?.kind);
    _o.set(_j, "DefineStmt.oldstyle", _p?.oldstyle);
    _o.set(_j, "DefineStmt.defnames", _p?.defnames);
    _o.set(_j, "DefineStmt.args", _p?.args);
    _o.set(_j, "DefineStmt.definition", _p?.definition);
    _o.set(_j, "DefineStmt.if_not_exists", _p?.if_not_exists);
    _o.set(_j, "DefineStmt.replace", _p?.replace);
    return _j;
  },
  createDomainStmt(_p?: CreateDomainStmt["CreateDomainStmt"]): CreateDomainStmt {
    const _j = ({
      CreateDomainStmt: {}
    } as CreateDomainStmt);
    _o.set(_j, "CreateDomainStmt.domainname", _p?.domainname);
    _o.set(_j, "CreateDomainStmt.typeName", _p?.typeName);
    _o.set(_j, "CreateDomainStmt.collClause", _p?.collClause);
    _o.set(_j, "CreateDomainStmt.constraints", _p?.constraints);
    return _j;
  },
  createOpClassStmt(_p?: CreateOpClassStmt["CreateOpClassStmt"]): CreateOpClassStmt {
    const _j = ({
      CreateOpClassStmt: {}
    } as CreateOpClassStmt);
    _o.set(_j, "CreateOpClassStmt.opclassname", _p?.opclassname);
    _o.set(_j, "CreateOpClassStmt.opfamilyname", _p?.opfamilyname);
    _o.set(_j, "CreateOpClassStmt.amname", _p?.amname);
    _o.set(_j, "CreateOpClassStmt.datatype", _p?.datatype);
    _o.set(_j, "CreateOpClassStmt.items", _p?.items);
    _o.set(_j, "CreateOpClassStmt.isDefault", _p?.isDefault);
    return _j;
  },
  createOpClassItem(_p?: CreateOpClassItem["CreateOpClassItem"]): CreateOpClassItem {
    const _j = ({
      CreateOpClassItem: {}
    } as CreateOpClassItem);
    _o.set(_j, "CreateOpClassItem.itemtype", _p?.itemtype);
    _o.set(_j, "CreateOpClassItem.name", _p?.name);
    _o.set(_j, "CreateOpClassItem.number", _p?.number);
    _o.set(_j, "CreateOpClassItem.order_family", _p?.order_family);
    _o.set(_j, "CreateOpClassItem.class_args", _p?.class_args);
    _o.set(_j, "CreateOpClassItem.storedtype", _p?.storedtype);
    return _j;
  },
  createOpFamilyStmt(_p?: CreateOpFamilyStmt["CreateOpFamilyStmt"]): CreateOpFamilyStmt {
    const _j = ({
      CreateOpFamilyStmt: {}
    } as CreateOpFamilyStmt);
    _o.set(_j, "CreateOpFamilyStmt.opfamilyname", _p?.opfamilyname);
    _o.set(_j, "CreateOpFamilyStmt.amname", _p?.amname);
    return _j;
  },
  alterOpFamilyStmt(_p?: AlterOpFamilyStmt["AlterOpFamilyStmt"]): AlterOpFamilyStmt {
    const _j = ({
      AlterOpFamilyStmt: {}
    } as AlterOpFamilyStmt);
    _o.set(_j, "AlterOpFamilyStmt.opfamilyname", _p?.opfamilyname);
    _o.set(_j, "AlterOpFamilyStmt.amname", _p?.amname);
    _o.set(_j, "AlterOpFamilyStmt.isDrop", _p?.isDrop);
    _o.set(_j, "AlterOpFamilyStmt.items", _p?.items);
    return _j;
  },
  dropStmt(_p?: DropStmt["DropStmt"]): DropStmt {
    const _j = ({
      DropStmt: {}
    } as DropStmt);
    _o.set(_j, "DropStmt.objects", _p?.objects);
    _o.set(_j, "DropStmt.removeType", _p?.removeType);
    _o.set(_j, "DropStmt.behavior", _p?.behavior);
    _o.set(_j, "DropStmt.missing_ok", _p?.missing_ok);
    _o.set(_j, "DropStmt.concurrent", _p?.concurrent);
    return _j;
  },
  truncateStmt(_p?: TruncateStmt["TruncateStmt"]): TruncateStmt {
    const _j = ({
      TruncateStmt: {}
    } as TruncateStmt);
    _o.set(_j, "TruncateStmt.relations", _p?.relations);
    _o.set(_j, "TruncateStmt.restart_seqs", _p?.restart_seqs);
    _o.set(_j, "TruncateStmt.behavior", _p?.behavior);
    return _j;
  },
  commentStmt(_p?: CommentStmt["CommentStmt"]): CommentStmt {
    const _j = ({
      CommentStmt: {}
    } as CommentStmt);
    _o.set(_j, "CommentStmt.objtype", _p?.objtype);
    _o.set(_j, "CommentStmt.object", _p?.object);
    _o.set(_j, "CommentStmt.comment", _p?.comment);
    return _j;
  },
  secLabelStmt(_p?: SecLabelStmt["SecLabelStmt"]): SecLabelStmt {
    const _j = ({
      SecLabelStmt: {}
    } as SecLabelStmt);
    _o.set(_j, "SecLabelStmt.objtype", _p?.objtype);
    _o.set(_j, "SecLabelStmt.object", _p?.object);
    _o.set(_j, "SecLabelStmt.provider", _p?.provider);
    _o.set(_j, "SecLabelStmt.label", _p?.label);
    return _j;
  },
  declareCursorStmt(_p?: DeclareCursorStmt["DeclareCursorStmt"]): DeclareCursorStmt {
    const _j = ({
      DeclareCursorStmt: {}
    } as DeclareCursorStmt);
    _o.set(_j, "DeclareCursorStmt.portalname", _p?.portalname);
    _o.set(_j, "DeclareCursorStmt.options", _p?.options);
    _o.set(_j, "DeclareCursorStmt.query", _p?.query);
    return _j;
  },
  closePortalStmt(_p?: ClosePortalStmt["ClosePortalStmt"]): ClosePortalStmt {
    const _j = ({
      ClosePortalStmt: {}
    } as ClosePortalStmt);
    _o.set(_j, "ClosePortalStmt.portalname", _p?.portalname);
    return _j;
  },
  fetchStmt(_p?: FetchStmt["FetchStmt"]): FetchStmt {
    const _j = ({
      FetchStmt: {}
    } as FetchStmt);
    _o.set(_j, "FetchStmt.direction", _p?.direction);
    _o.set(_j, "FetchStmt.howMany", _p?.howMany);
    _o.set(_j, "FetchStmt.portalname", _p?.portalname);
    _o.set(_j, "FetchStmt.ismove", _p?.ismove);
    return _j;
  },
  indexStmt(_p?: IndexStmt["IndexStmt"]): IndexStmt {
    const _j = ({
      IndexStmt: {}
    } as IndexStmt);
    _o.set(_j, "IndexStmt.idxname", _p?.idxname);
    _o.set(_j, "IndexStmt.relation", _p?.relation);
    _o.set(_j, "IndexStmt.accessMethod", _p?.accessMethod);
    _o.set(_j, "IndexStmt.tableSpace", _p?.tableSpace);
    _o.set(_j, "IndexStmt.indexParams", _p?.indexParams);
    _o.set(_j, "IndexStmt.indexIncludingParams", _p?.indexIncludingParams);
    _o.set(_j, "IndexStmt.options", _p?.options);
    _o.set(_j, "IndexStmt.whereClause", _p?.whereClause);
    _o.set(_j, "IndexStmt.excludeOpNames", _p?.excludeOpNames);
    _o.set(_j, "IndexStmt.idxcomment", _p?.idxcomment);
    _o.set(_j, "IndexStmt.indexOid", _p?.indexOid);
    _o.set(_j, "IndexStmt.oldNumber", _p?.oldNumber);
    _o.set(_j, "IndexStmt.oldCreateSubid", _p?.oldCreateSubid);
    _o.set(_j, "IndexStmt.oldFirstRelfilelocatorSubid", _p?.oldFirstRelfilelocatorSubid);
    _o.set(_j, "IndexStmt.unique", _p?.unique);
    _o.set(_j, "IndexStmt.nulls_not_distinct", _p?.nulls_not_distinct);
    _o.set(_j, "IndexStmt.primary", _p?.primary);
    _o.set(_j, "IndexStmt.isconstraint", _p?.isconstraint);
    _o.set(_j, "IndexStmt.deferrable", _p?.deferrable);
    _o.set(_j, "IndexStmt.initdeferred", _p?.initdeferred);
    _o.set(_j, "IndexStmt.transformed", _p?.transformed);
    _o.set(_j, "IndexStmt.concurrent", _p?.concurrent);
    _o.set(_j, "IndexStmt.if_not_exists", _p?.if_not_exists);
    _o.set(_j, "IndexStmt.reset_default_tblspc", _p?.reset_default_tblspc);
    return _j;
  },
  createStatsStmt(_p?: CreateStatsStmt["CreateStatsStmt"]): CreateStatsStmt {
    const _j = ({
      CreateStatsStmt: {}
    } as CreateStatsStmt);
    _o.set(_j, "CreateStatsStmt.defnames", _p?.defnames);
    _o.set(_j, "CreateStatsStmt.stat_types", _p?.stat_types);
    _o.set(_j, "CreateStatsStmt.exprs", _p?.exprs);
    _o.set(_j, "CreateStatsStmt.relations", _p?.relations);
    _o.set(_j, "CreateStatsStmt.stxcomment", _p?.stxcomment);
    _o.set(_j, "CreateStatsStmt.transformed", _p?.transformed);
    _o.set(_j, "CreateStatsStmt.if_not_exists", _p?.if_not_exists);
    return _j;
  },
  statsElem(_p?: StatsElem["StatsElem"]): StatsElem {
    const _j = ({
      StatsElem: {}
    } as StatsElem);
    _o.set(_j, "StatsElem.name", _p?.name);
    _o.set(_j, "StatsElem.expr", _p?.expr);
    return _j;
  },
  alterStatsStmt(_p?: AlterStatsStmt["AlterStatsStmt"]): AlterStatsStmt {
    const _j = ({
      AlterStatsStmt: {}
    } as AlterStatsStmt);
    _o.set(_j, "AlterStatsStmt.defnames", _p?.defnames);
    _o.set(_j, "AlterStatsStmt.stxstattarget", _p?.stxstattarget);
    _o.set(_j, "AlterStatsStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  createFunctionStmt(_p?: CreateFunctionStmt["CreateFunctionStmt"]): CreateFunctionStmt {
    const _j = ({
      CreateFunctionStmt: {}
    } as CreateFunctionStmt);
    _o.set(_j, "CreateFunctionStmt.is_procedure", _p?.is_procedure);
    _o.set(_j, "CreateFunctionStmt.replace", _p?.replace);
    _o.set(_j, "CreateFunctionStmt.funcname", _p?.funcname);
    _o.set(_j, "CreateFunctionStmt.parameters", _p?.parameters);
    _o.set(_j, "CreateFunctionStmt.returnType", _p?.returnType);
    _o.set(_j, "CreateFunctionStmt.options", _p?.options);
    _o.set(_j, "CreateFunctionStmt.sql_body", _p?.sql_body);
    return _j;
  },
  functionParameter(_p?: FunctionParameter["FunctionParameter"]): FunctionParameter {
    const _j = ({
      FunctionParameter: {}
    } as FunctionParameter);
    _o.set(_j, "FunctionParameter.name", _p?.name);
    _o.set(_j, "FunctionParameter.argType", _p?.argType);
    _o.set(_j, "FunctionParameter.mode", _p?.mode);
    _o.set(_j, "FunctionParameter.defexpr", _p?.defexpr);
    return _j;
  },
  alterFunctionStmt(_p?: AlterFunctionStmt["AlterFunctionStmt"]): AlterFunctionStmt {
    const _j = ({
      AlterFunctionStmt: {}
    } as AlterFunctionStmt);
    _o.set(_j, "AlterFunctionStmt.objtype", _p?.objtype);
    _o.set(_j, "AlterFunctionStmt.func", _p?.func);
    _o.set(_j, "AlterFunctionStmt.actions", _p?.actions);
    return _j;
  },
  doStmt(_p?: DoStmt["DoStmt"]): DoStmt {
    const _j = ({
      DoStmt: {}
    } as DoStmt);
    _o.set(_j, "DoStmt.args", _p?.args);
    return _j;
  },
  inlineCodeBlock(_p?: InlineCodeBlock["InlineCodeBlock"]): InlineCodeBlock {
    const _j = ({
      InlineCodeBlock: {}
    } as InlineCodeBlock);
    _o.set(_j, "InlineCodeBlock.source_text", _p?.source_text);
    _o.set(_j, "InlineCodeBlock.langOid", _p?.langOid);
    _o.set(_j, "InlineCodeBlock.langIsTrusted", _p?.langIsTrusted);
    _o.set(_j, "InlineCodeBlock.atomic", _p?.atomic);
    return _j;
  },
  callStmt(_p?: CallStmt["CallStmt"]): CallStmt {
    const _j = ({
      CallStmt: {}
    } as CallStmt);
    _o.set(_j, "CallStmt.funccall", _p?.funccall);
    _o.set(_j, "CallStmt.funcexpr", _p?.funcexpr);
    _o.set(_j, "CallStmt.outargs", _p?.outargs);
    return _j;
  },
  callContext(_p?: CallContext["CallContext"]): CallContext {
    const _j = ({
      CallContext: {}
    } as CallContext);
    _o.set(_j, "CallContext.atomic", _p?.atomic);
    return _j;
  },
  renameStmt(_p?: RenameStmt["RenameStmt"]): RenameStmt {
    const _j = ({
      RenameStmt: {}
    } as RenameStmt);
    _o.set(_j, "RenameStmt.renameType", _p?.renameType);
    _o.set(_j, "RenameStmt.relationType", _p?.relationType);
    _o.set(_j, "RenameStmt.relation", _p?.relation);
    _o.set(_j, "RenameStmt.object", _p?.object);
    _o.set(_j, "RenameStmt.subname", _p?.subname);
    _o.set(_j, "RenameStmt.newname", _p?.newname);
    _o.set(_j, "RenameStmt.behavior", _p?.behavior);
    _o.set(_j, "RenameStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  alterObjectDependsStmt(_p?: AlterObjectDependsStmt["AlterObjectDependsStmt"]): AlterObjectDependsStmt {
    const _j = ({
      AlterObjectDependsStmt: {}
    } as AlterObjectDependsStmt);
    _o.set(_j, "AlterObjectDependsStmt.objectType", _p?.objectType);
    _o.set(_j, "AlterObjectDependsStmt.relation", _p?.relation);
    _o.set(_j, "AlterObjectDependsStmt.object", _p?.object);
    _o.set(_j, "AlterObjectDependsStmt.extname", _p?.extname);
    _o.set(_j, "AlterObjectDependsStmt.remove", _p?.remove);
    return _j;
  },
  alterObjectSchemaStmt(_p?: AlterObjectSchemaStmt["AlterObjectSchemaStmt"]): AlterObjectSchemaStmt {
    const _j = ({
      AlterObjectSchemaStmt: {}
    } as AlterObjectSchemaStmt);
    _o.set(_j, "AlterObjectSchemaStmt.objectType", _p?.objectType);
    _o.set(_j, "AlterObjectSchemaStmt.relation", _p?.relation);
    _o.set(_j, "AlterObjectSchemaStmt.object", _p?.object);
    _o.set(_j, "AlterObjectSchemaStmt.newschema", _p?.newschema);
    _o.set(_j, "AlterObjectSchemaStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  alterOwnerStmt(_p?: AlterOwnerStmt["AlterOwnerStmt"]): AlterOwnerStmt {
    const _j = ({
      AlterOwnerStmt: {}
    } as AlterOwnerStmt);
    _o.set(_j, "AlterOwnerStmt.objectType", _p?.objectType);
    _o.set(_j, "AlterOwnerStmt.relation", _p?.relation);
    _o.set(_j, "AlterOwnerStmt.object", _p?.object);
    _o.set(_j, "AlterOwnerStmt.newowner", _p?.newowner);
    return _j;
  },
  alterOperatorStmt(_p?: AlterOperatorStmt["AlterOperatorStmt"]): AlterOperatorStmt {
    const _j = ({
      AlterOperatorStmt: {}
    } as AlterOperatorStmt);
    _o.set(_j, "AlterOperatorStmt.opername", _p?.opername);
    _o.set(_j, "AlterOperatorStmt.options", _p?.options);
    return _j;
  },
  alterTypeStmt(_p?: AlterTypeStmt["AlterTypeStmt"]): AlterTypeStmt {
    const _j = ({
      AlterTypeStmt: {}
    } as AlterTypeStmt);
    _o.set(_j, "AlterTypeStmt.typeName", _p?.typeName);
    _o.set(_j, "AlterTypeStmt.options", _p?.options);
    return _j;
  },
  ruleStmt(_p?: RuleStmt["RuleStmt"]): RuleStmt {
    const _j = ({
      RuleStmt: {}
    } as RuleStmt);
    _o.set(_j, "RuleStmt.relation", _p?.relation);
    _o.set(_j, "RuleStmt.rulename", _p?.rulename);
    _o.set(_j, "RuleStmt.whereClause", _p?.whereClause);
    _o.set(_j, "RuleStmt.event", _p?.event);
    _o.set(_j, "RuleStmt.instead", _p?.instead);
    _o.set(_j, "RuleStmt.actions", _p?.actions);
    _o.set(_j, "RuleStmt.replace", _p?.replace);
    return _j;
  },
  notifyStmt(_p?: NotifyStmt["NotifyStmt"]): NotifyStmt {
    const _j = ({
      NotifyStmt: {}
    } as NotifyStmt);
    _o.set(_j, "NotifyStmt.conditionname", _p?.conditionname);
    _o.set(_j, "NotifyStmt.payload", _p?.payload);
    return _j;
  },
  listenStmt(_p?: ListenStmt["ListenStmt"]): ListenStmt {
    const _j = ({
      ListenStmt: {}
    } as ListenStmt);
    _o.set(_j, "ListenStmt.conditionname", _p?.conditionname);
    return _j;
  },
  unlistenStmt(_p?: UnlistenStmt["UnlistenStmt"]): UnlistenStmt {
    const _j = ({
      UnlistenStmt: {}
    } as UnlistenStmt);
    _o.set(_j, "UnlistenStmt.conditionname", _p?.conditionname);
    return _j;
  },
  transactionStmt(_p?: TransactionStmt["TransactionStmt"]): TransactionStmt {
    const _j = ({
      TransactionStmt: {}
    } as TransactionStmt);
    _o.set(_j, "TransactionStmt.kind", _p?.kind);
    _o.set(_j, "TransactionStmt.options", _p?.options);
    _o.set(_j, "TransactionStmt.savepoint_name", _p?.savepoint_name);
    _o.set(_j, "TransactionStmt.gid", _p?.gid);
    _o.set(_j, "TransactionStmt.chain", _p?.chain);
    return _j;
  },
  compositeTypeStmt(_p?: CompositeTypeStmt["CompositeTypeStmt"]): CompositeTypeStmt {
    const _j = ({
      CompositeTypeStmt: {}
    } as CompositeTypeStmt);
    _o.set(_j, "CompositeTypeStmt.typevar", _p?.typevar);
    _o.set(_j, "CompositeTypeStmt.coldeflist", _p?.coldeflist);
    return _j;
  },
  createEnumStmt(_p?: CreateEnumStmt["CreateEnumStmt"]): CreateEnumStmt {
    const _j = ({
      CreateEnumStmt: {}
    } as CreateEnumStmt);
    _o.set(_j, "CreateEnumStmt.typeName", _p?.typeName);
    _o.set(_j, "CreateEnumStmt.vals", _p?.vals);
    return _j;
  },
  createRangeStmt(_p?: CreateRangeStmt["CreateRangeStmt"]): CreateRangeStmt {
    const _j = ({
      CreateRangeStmt: {}
    } as CreateRangeStmt);
    _o.set(_j, "CreateRangeStmt.typeName", _p?.typeName);
    _o.set(_j, "CreateRangeStmt.params", _p?.params);
    return _j;
  },
  alterEnumStmt(_p?: AlterEnumStmt["AlterEnumStmt"]): AlterEnumStmt {
    const _j = ({
      AlterEnumStmt: {}
    } as AlterEnumStmt);
    _o.set(_j, "AlterEnumStmt.typeName", _p?.typeName);
    _o.set(_j, "AlterEnumStmt.oldVal", _p?.oldVal);
    _o.set(_j, "AlterEnumStmt.newVal", _p?.newVal);
    _o.set(_j, "AlterEnumStmt.newValNeighbor", _p?.newValNeighbor);
    _o.set(_j, "AlterEnumStmt.newValIsAfter", _p?.newValIsAfter);
    _o.set(_j, "AlterEnumStmt.skipIfNewValExists", _p?.skipIfNewValExists);
    return _j;
  },
  viewStmt(_p?: ViewStmt["ViewStmt"]): ViewStmt {
    const _j = ({
      ViewStmt: {}
    } as ViewStmt);
    _o.set(_j, "ViewStmt.view", _p?.view);
    _o.set(_j, "ViewStmt.aliases", _p?.aliases);
    _o.set(_j, "ViewStmt.query", _p?.query);
    _o.set(_j, "ViewStmt.replace", _p?.replace);
    _o.set(_j, "ViewStmt.options", _p?.options);
    _o.set(_j, "ViewStmt.withCheckOption", _p?.withCheckOption);
    return _j;
  },
  loadStmt(_p?: LoadStmt["LoadStmt"]): LoadStmt {
    const _j = ({
      LoadStmt: {}
    } as LoadStmt);
    _o.set(_j, "LoadStmt.filename", _p?.filename);
    return _j;
  },
  createdbStmt(_p?: CreatedbStmt["CreatedbStmt"]): CreatedbStmt {
    const _j = ({
      CreatedbStmt: {}
    } as CreatedbStmt);
    _o.set(_j, "CreatedbStmt.dbname", _p?.dbname);
    _o.set(_j, "CreatedbStmt.options", _p?.options);
    return _j;
  },
  alterDatabaseStmt(_p?: AlterDatabaseStmt["AlterDatabaseStmt"]): AlterDatabaseStmt {
    const _j = ({
      AlterDatabaseStmt: {}
    } as AlterDatabaseStmt);
    _o.set(_j, "AlterDatabaseStmt.dbname", _p?.dbname);
    _o.set(_j, "AlterDatabaseStmt.options", _p?.options);
    return _j;
  },
  alterDatabaseRefreshCollStmt(_p?: AlterDatabaseRefreshCollStmt["AlterDatabaseRefreshCollStmt"]): AlterDatabaseRefreshCollStmt {
    const _j = ({
      AlterDatabaseRefreshCollStmt: {}
    } as AlterDatabaseRefreshCollStmt);
    _o.set(_j, "AlterDatabaseRefreshCollStmt.dbname", _p?.dbname);
    return _j;
  },
  alterDatabaseSetStmt(_p?: AlterDatabaseSetStmt["AlterDatabaseSetStmt"]): AlterDatabaseSetStmt {
    const _j = ({
      AlterDatabaseSetStmt: {}
    } as AlterDatabaseSetStmt);
    _o.set(_j, "AlterDatabaseSetStmt.dbname", _p?.dbname);
    _o.set(_j, "AlterDatabaseSetStmt.setstmt", _p?.setstmt);
    return _j;
  },
  dropdbStmt(_p?: DropdbStmt["DropdbStmt"]): DropdbStmt {
    const _j = ({
      DropdbStmt: {}
    } as DropdbStmt);
    _o.set(_j, "DropdbStmt.dbname", _p?.dbname);
    _o.set(_j, "DropdbStmt.missing_ok", _p?.missing_ok);
    _o.set(_j, "DropdbStmt.options", _p?.options);
    return _j;
  },
  alterSystemStmt(_p?: AlterSystemStmt["AlterSystemStmt"]): AlterSystemStmt {
    const _j = ({
      AlterSystemStmt: {}
    } as AlterSystemStmt);
    _o.set(_j, "AlterSystemStmt.setstmt", _p?.setstmt);
    return _j;
  },
  clusterStmt(_p?: ClusterStmt["ClusterStmt"]): ClusterStmt {
    const _j = ({
      ClusterStmt: {}
    } as ClusterStmt);
    _o.set(_j, "ClusterStmt.relation", _p?.relation);
    _o.set(_j, "ClusterStmt.indexname", _p?.indexname);
    _o.set(_j, "ClusterStmt.params", _p?.params);
    return _j;
  },
  vacuumStmt(_p?: VacuumStmt["VacuumStmt"]): VacuumStmt {
    const _j = ({
      VacuumStmt: {}
    } as VacuumStmt);
    _o.set(_j, "VacuumStmt.options", _p?.options);
    _o.set(_j, "VacuumStmt.rels", _p?.rels);
    _o.set(_j, "VacuumStmt.is_vacuumcmd", _p?.is_vacuumcmd);
    return _j;
  },
  vacuumRelation(_p?: VacuumRelation["VacuumRelation"]): VacuumRelation {
    const _j = ({
      VacuumRelation: {}
    } as VacuumRelation);
    _o.set(_j, "VacuumRelation.relation", _p?.relation);
    _o.set(_j, "VacuumRelation.oid", _p?.oid);
    _o.set(_j, "VacuumRelation.va_cols", _p?.va_cols);
    return _j;
  },
  explainStmt(_p?: ExplainStmt["ExplainStmt"]): ExplainStmt {
    const _j = ({
      ExplainStmt: {}
    } as ExplainStmt);
    _o.set(_j, "ExplainStmt.query", _p?.query);
    _o.set(_j, "ExplainStmt.options", _p?.options);
    return _j;
  },
  createTableAsStmt(_p?: CreateTableAsStmt["CreateTableAsStmt"]): CreateTableAsStmt {
    const _j = ({
      CreateTableAsStmt: {}
    } as CreateTableAsStmt);
    _o.set(_j, "CreateTableAsStmt.query", _p?.query);
    _o.set(_j, "CreateTableAsStmt.into", _p?.into);
    _o.set(_j, "CreateTableAsStmt.objtype", _p?.objtype);
    _o.set(_j, "CreateTableAsStmt.is_select_into", _p?.is_select_into);
    _o.set(_j, "CreateTableAsStmt.if_not_exists", _p?.if_not_exists);
    return _j;
  },
  refreshMatViewStmt(_p?: RefreshMatViewStmt["RefreshMatViewStmt"]): RefreshMatViewStmt {
    const _j = ({
      RefreshMatViewStmt: {}
    } as RefreshMatViewStmt);
    _o.set(_j, "RefreshMatViewStmt.concurrent", _p?.concurrent);
    _o.set(_j, "RefreshMatViewStmt.skipData", _p?.skipData);
    _o.set(_j, "RefreshMatViewStmt.relation", _p?.relation);
    return _j;
  },
  checkPointStmt(_p?: CheckPointStmt["CheckPointStmt"]): CheckPointStmt {
    const _j = ({
      CheckPointStmt: {}
    } as CheckPointStmt);
    return _j;
  },
  discardStmt(_p?: DiscardStmt["DiscardStmt"]): DiscardStmt {
    const _j = ({
      DiscardStmt: {}
    } as DiscardStmt);
    _o.set(_j, "DiscardStmt.target", _p?.target);
    return _j;
  },
  lockStmt(_p?: LockStmt["LockStmt"]): LockStmt {
    const _j = ({
      LockStmt: {}
    } as LockStmt);
    _o.set(_j, "LockStmt.relations", _p?.relations);
    _o.set(_j, "LockStmt.mode", _p?.mode);
    _o.set(_j, "LockStmt.nowait", _p?.nowait);
    return _j;
  },
  constraintsSetStmt(_p?: ConstraintsSetStmt["ConstraintsSetStmt"]): ConstraintsSetStmt {
    const _j = ({
      ConstraintsSetStmt: {}
    } as ConstraintsSetStmt);
    _o.set(_j, "ConstraintsSetStmt.constraints", _p?.constraints);
    _o.set(_j, "ConstraintsSetStmt.deferred", _p?.deferred);
    return _j;
  },
  reindexStmt(_p?: ReindexStmt["ReindexStmt"]): ReindexStmt {
    const _j = ({
      ReindexStmt: {}
    } as ReindexStmt);
    _o.set(_j, "ReindexStmt.kind", _p?.kind);
    _o.set(_j, "ReindexStmt.relation", _p?.relation);
    _o.set(_j, "ReindexStmt.name", _p?.name);
    _o.set(_j, "ReindexStmt.params", _p?.params);
    return _j;
  },
  createConversionStmt(_p?: CreateConversionStmt["CreateConversionStmt"]): CreateConversionStmt {
    const _j = ({
      CreateConversionStmt: {}
    } as CreateConversionStmt);
    _o.set(_j, "CreateConversionStmt.conversion_name", _p?.conversion_name);
    _o.set(_j, "CreateConversionStmt.for_encoding_name", _p?.for_encoding_name);
    _o.set(_j, "CreateConversionStmt.to_encoding_name", _p?.to_encoding_name);
    _o.set(_j, "CreateConversionStmt.func_name", _p?.func_name);
    _o.set(_j, "CreateConversionStmt.def", _p?.def);
    return _j;
  },
  createCastStmt(_p?: CreateCastStmt["CreateCastStmt"]): CreateCastStmt {
    const _j = ({
      CreateCastStmt: {}
    } as CreateCastStmt);
    _o.set(_j, "CreateCastStmt.sourcetype", _p?.sourcetype);
    _o.set(_j, "CreateCastStmt.targettype", _p?.targettype);
    _o.set(_j, "CreateCastStmt.func", _p?.func);
    _o.set(_j, "CreateCastStmt.context", _p?.context);
    _o.set(_j, "CreateCastStmt.inout", _p?.inout);
    return _j;
  },
  createTransformStmt(_p?: CreateTransformStmt["CreateTransformStmt"]): CreateTransformStmt {
    const _j = ({
      CreateTransformStmt: {}
    } as CreateTransformStmt);
    _o.set(_j, "CreateTransformStmt.replace", _p?.replace);
    _o.set(_j, "CreateTransformStmt.type_name", _p?.type_name);
    _o.set(_j, "CreateTransformStmt.lang", _p?.lang);
    _o.set(_j, "CreateTransformStmt.fromsql", _p?.fromsql);
    _o.set(_j, "CreateTransformStmt.tosql", _p?.tosql);
    return _j;
  },
  prepareStmt(_p?: PrepareStmt["PrepareStmt"]): PrepareStmt {
    const _j = ({
      PrepareStmt: {}
    } as PrepareStmt);
    _o.set(_j, "PrepareStmt.name", _p?.name);
    _o.set(_j, "PrepareStmt.argtypes", _p?.argtypes);
    _o.set(_j, "PrepareStmt.query", _p?.query);
    return _j;
  },
  executeStmt(_p?: ExecuteStmt["ExecuteStmt"]): ExecuteStmt {
    const _j = ({
      ExecuteStmt: {}
    } as ExecuteStmt);
    _o.set(_j, "ExecuteStmt.name", _p?.name);
    _o.set(_j, "ExecuteStmt.params", _p?.params);
    return _j;
  },
  deallocateStmt(_p?: DeallocateStmt["DeallocateStmt"]): DeallocateStmt {
    const _j = ({
      DeallocateStmt: {}
    } as DeallocateStmt);
    _o.set(_j, "DeallocateStmt.name", _p?.name);
    return _j;
  },
  dropOwnedStmt(_p?: DropOwnedStmt["DropOwnedStmt"]): DropOwnedStmt {
    const _j = ({
      DropOwnedStmt: {}
    } as DropOwnedStmt);
    _o.set(_j, "DropOwnedStmt.roles", _p?.roles);
    _o.set(_j, "DropOwnedStmt.behavior", _p?.behavior);
    return _j;
  },
  reassignOwnedStmt(_p?: ReassignOwnedStmt["ReassignOwnedStmt"]): ReassignOwnedStmt {
    const _j = ({
      ReassignOwnedStmt: {}
    } as ReassignOwnedStmt);
    _o.set(_j, "ReassignOwnedStmt.roles", _p?.roles);
    _o.set(_j, "ReassignOwnedStmt.newrole", _p?.newrole);
    return _j;
  },
  altertsDictionaryStmt(_p?: AlterTSDictionaryStmt["AlterTSDictionaryStmt"]): AlterTSDictionaryStmt {
    const _j = ({
      AlterTSDictionaryStmt: {}
    } as AlterTSDictionaryStmt);
    _o.set(_j, "AlterTSDictionaryStmt.dictname", _p?.dictname);
    _o.set(_j, "AlterTSDictionaryStmt.options", _p?.options);
    return _j;
  },
  altertsConfigurationStmt(_p?: AlterTSConfigurationStmt["AlterTSConfigurationStmt"]): AlterTSConfigurationStmt {
    const _j = ({
      AlterTSConfigurationStmt: {}
    } as AlterTSConfigurationStmt);
    _o.set(_j, "AlterTSConfigurationStmt.kind", _p?.kind);
    _o.set(_j, "AlterTSConfigurationStmt.cfgname", _p?.cfgname);
    _o.set(_j, "AlterTSConfigurationStmt.tokentype", _p?.tokentype);
    _o.set(_j, "AlterTSConfigurationStmt.dicts", _p?.dicts);
    _o.set(_j, "AlterTSConfigurationStmt.override", _p?.override);
    _o.set(_j, "AlterTSConfigurationStmt.replace", _p?.replace);
    _o.set(_j, "AlterTSConfigurationStmt.missing_ok", _p?.missing_ok);
    return _j;
  },
  publicationTable(_p?: PublicationTable["PublicationTable"]): PublicationTable {
    const _j = ({
      PublicationTable: {}
    } as PublicationTable);
    _o.set(_j, "PublicationTable.relation", _p?.relation);
    _o.set(_j, "PublicationTable.whereClause", _p?.whereClause);
    _o.set(_j, "PublicationTable.columns", _p?.columns);
    return _j;
  },
  publicationObjSpec(_p?: PublicationObjSpec["PublicationObjSpec"]): PublicationObjSpec {
    const _j = ({
      PublicationObjSpec: {}
    } as PublicationObjSpec);
    _o.set(_j, "PublicationObjSpec.pubobjtype", _p?.pubobjtype);
    _o.set(_j, "PublicationObjSpec.name", _p?.name);
    _o.set(_j, "PublicationObjSpec.pubtable", _p?.pubtable);
    _o.set(_j, "PublicationObjSpec.location", _p?.location);
    return _j;
  },
  createPublicationStmt(_p?: CreatePublicationStmt["CreatePublicationStmt"]): CreatePublicationStmt {
    const _j = ({
      CreatePublicationStmt: {}
    } as CreatePublicationStmt);
    _o.set(_j, "CreatePublicationStmt.pubname", _p?.pubname);
    _o.set(_j, "CreatePublicationStmt.options", _p?.options);
    _o.set(_j, "CreatePublicationStmt.pubobjects", _p?.pubobjects);
    _o.set(_j, "CreatePublicationStmt.for_all_tables", _p?.for_all_tables);
    return _j;
  },
  alterPublicationStmt(_p?: AlterPublicationStmt["AlterPublicationStmt"]): AlterPublicationStmt {
    const _j = ({
      AlterPublicationStmt: {}
    } as AlterPublicationStmt);
    _o.set(_j, "AlterPublicationStmt.pubname", _p?.pubname);
    _o.set(_j, "AlterPublicationStmt.options", _p?.options);
    _o.set(_j, "AlterPublicationStmt.pubobjects", _p?.pubobjects);
    _o.set(_j, "AlterPublicationStmt.for_all_tables", _p?.for_all_tables);
    _o.set(_j, "AlterPublicationStmt.action", _p?.action);
    return _j;
  },
  createSubscriptionStmt(_p?: CreateSubscriptionStmt["CreateSubscriptionStmt"]): CreateSubscriptionStmt {
    const _j = ({
      CreateSubscriptionStmt: {}
    } as CreateSubscriptionStmt);
    _o.set(_j, "CreateSubscriptionStmt.subname", _p?.subname);
    _o.set(_j, "CreateSubscriptionStmt.conninfo", _p?.conninfo);
    _o.set(_j, "CreateSubscriptionStmt.publication", _p?.publication);
    _o.set(_j, "CreateSubscriptionStmt.options", _p?.options);
    return _j;
  },
  alterSubscriptionStmt(_p?: AlterSubscriptionStmt["AlterSubscriptionStmt"]): AlterSubscriptionStmt {
    const _j = ({
      AlterSubscriptionStmt: {}
    } as AlterSubscriptionStmt);
    _o.set(_j, "AlterSubscriptionStmt.kind", _p?.kind);
    _o.set(_j, "AlterSubscriptionStmt.subname", _p?.subname);
    _o.set(_j, "AlterSubscriptionStmt.conninfo", _p?.conninfo);
    _o.set(_j, "AlterSubscriptionStmt.publication", _p?.publication);
    _o.set(_j, "AlterSubscriptionStmt.options", _p?.options);
    return _j;
  },
  dropSubscriptionStmt(_p?: DropSubscriptionStmt["DropSubscriptionStmt"]): DropSubscriptionStmt {
    const _j = ({
      DropSubscriptionStmt: {}
    } as DropSubscriptionStmt);
    _o.set(_j, "DropSubscriptionStmt.subname", _p?.subname);
    _o.set(_j, "DropSubscriptionStmt.missing_ok", _p?.missing_ok);
    _o.set(_j, "DropSubscriptionStmt.behavior", _p?.behavior);
    return _j;
  },
  scanToken(_p?: ScanToken["ScanToken"]): ScanToken {
    const _j = ({
      ScanToken: {}
    } as ScanToken);
    _o.set(_j, "ScanToken.start", _p?.start);
    _o.set(_j, "ScanToken.end", _p?.end);
    _o.set(_j, "ScanToken.token", _p?.token);
    _o.set(_j, "ScanToken.keywordKind", _p?.keywordKind);
    return _j;
  }
};",
    "file": "asts.ts",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/

export default {
    get<T>(obj: Record<string, any>, path: string): T | undefined {
      const keys = path.replace(/[(w+)]/g, '.$1').split('.');
      let result: any = obj;
      for (const key of keys) {
        if (result == null) {
          return undefined;
        }
        result = result[key];
      }
      return result as T;
    },
  
    set(obj: Record<string, any>, path: string, value: any): void {
      if (value === undefined) {
        return;
      }
  
      const keys = path.replace(/[(w+)]/g, '.$1').split('.');
      let current = obj;
      for (let i = 0; i < keys.length - 1; i++) {
        const key = keys[i];
        if (typeof current[key] !== 'object') {
          current[key] = {};
        }
        current = current[key];
      }
      current[keys[keys.length - 1]] = value;
    },
  
    has(obj: Record<string, any>, path: string): boolean {
      const keys = path.replace(/[(w+)]/g, '.$1').split('.');
      let current = obj;
      for (const key of keys) {
        if (current == null || !(key in current)) {
          return false;
        }
        current = current[key];
      }
      return true;
    }
  };
  
",
    "file": "path-obj.ts",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
export type EnumType = "OverridingKind" | "QuerySource" | "SortByDir" | "SortByNulls" | "SetQuantifier" | "A_Expr_Kind" | "RoleSpecType" | "TableLikeOption" | "DefElemAction" | "PartitionStrategy" | "PartitionRangeDatumKind" | "RTEKind" | "WCOKind" | "GroupingSetKind" | "CTEMaterialize" | "SetOperation" | "ObjectType" | "DropBehavior" | "AlterTableType" | "GrantTargetType" | "VariableSetKind" | "ConstrType" | "ImportForeignSchemaType" | "RoleStmtType" | "FetchDirection" | "FunctionParameterMode" | "TransactionStmtKind" | "ViewCheckOption" | "DiscardMode" | "ReindexObjectType" | "AlterTSConfigType" | "PublicationObjSpecType" | "AlterPublicationAction" | "AlterSubscriptionType" | "OnCommitAction" | "ParamKind" | "CoercionContext" | "CoercionForm" | "BoolExprType" | "SubLinkType" | "RowCompareType" | "MinMaxOp" | "SQLValueFunctionOp" | "XmlExprOp" | "XmlOptionType" | "JsonEncoding" | "JsonFormatType" | "JsonConstructorType" | "JsonValueType" | "NullTestType" | "BoolTestType" | "CmdType" | "JoinType" | "AggStrategy" | "AggSplit" | "SetOpCmd" | "SetOpStrategy" | "OnConflictAction" | "LimitOption" | "LockClauseStrength" | "LockWaitPolicy" | "LockTupleMode" | "KeywordKind" | "Token";
export const getEnumValue = (enumType: EnumType, key: string | number) => {
  switch (enumType) {
    case "OverridingKind":
      {
        switch (key) {
          case "OVERRIDING_NOT_SET":
            return 0;
          case "OVERRIDING_USER_VALUE":
            return 1;
          case "OVERRIDING_SYSTEM_VALUE":
            return 2;
          case 0:
            return "OVERRIDING_NOT_SET";
          case 1:
            return "OVERRIDING_USER_VALUE";
          case 2:
            return "OVERRIDING_SYSTEM_VALUE";
          default:
            throw new Error("Key not recognized in enum OverridingKind");
        }
      }
    case "QuerySource":
      {
        switch (key) {
          case "QSRC_ORIGINAL":
            return 0;
          case "QSRC_PARSER":
            return 1;
          case "QSRC_INSTEAD_RULE":
            return 2;
          case "QSRC_QUAL_INSTEAD_RULE":
            return 3;
          case "QSRC_NON_INSTEAD_RULE":
            return 4;
          case 0:
            return "QSRC_ORIGINAL";
          case 1:
            return "QSRC_PARSER";
          case 2:
            return "QSRC_INSTEAD_RULE";
          case 3:
            return "QSRC_QUAL_INSTEAD_RULE";
          case 4:
            return "QSRC_NON_INSTEAD_RULE";
          default:
            throw new Error("Key not recognized in enum QuerySource");
        }
      }
    case "SortByDir":
      {
        switch (key) {
          case "SORTBY_DEFAULT":
            return 0;
          case "SORTBY_ASC":
            return 1;
          case "SORTBY_DESC":
            return 2;
          case "SORTBY_USING":
            return 3;
          case 0:
            return "SORTBY_DEFAULT";
          case 1:
            return "SORTBY_ASC";
          case 2:
            return "SORTBY_DESC";
          case 3:
            return "SORTBY_USING";
          default:
            throw new Error("Key not recognized in enum SortByDir");
        }
      }
    case "SortByNulls":
      {
        switch (key) {
          case "SORTBY_NULLS_DEFAULT":
            return 0;
          case "SORTBY_NULLS_FIRST":
            return 1;
          case "SORTBY_NULLS_LAST":
            return 2;
          case 0:
            return "SORTBY_NULLS_DEFAULT";
          case 1:
            return "SORTBY_NULLS_FIRST";
          case 2:
            return "SORTBY_NULLS_LAST";
          default:
            throw new Error("Key not recognized in enum SortByNulls");
        }
      }
    case "SetQuantifier":
      {
        switch (key) {
          case "SET_QUANTIFIER_DEFAULT":
            return 0;
          case "SET_QUANTIFIER_ALL":
            return 1;
          case "SET_QUANTIFIER_DISTINCT":
            return 2;
          case 0:
            return "SET_QUANTIFIER_DEFAULT";
          case 1:
            return "SET_QUANTIFIER_ALL";
          case 2:
            return "SET_QUANTIFIER_DISTINCT";
          default:
            throw new Error("Key not recognized in enum SetQuantifier");
        }
      }
    case "A_Expr_Kind":
      {
        switch (key) {
          case "AEXPR_OP":
            return 0;
          case "AEXPR_OP_ANY":
            return 1;
          case "AEXPR_OP_ALL":
            return 2;
          case "AEXPR_DISTINCT":
            return 3;
          case "AEXPR_NOT_DISTINCT":
            return 4;
          case "AEXPR_NULLIF":
            return 5;
          case "AEXPR_IN":
            return 6;
          case "AEXPR_LIKE":
            return 7;
          case "AEXPR_ILIKE":
            return 8;
          case "AEXPR_SIMILAR":
            return 9;
          case "AEXPR_BETWEEN":
            return 10;
          case "AEXPR_NOT_BETWEEN":
            return 11;
          case "AEXPR_BETWEEN_SYM":
            return 12;
          case "AEXPR_NOT_BETWEEN_SYM":
            return 13;
          case 0:
            return "AEXPR_OP";
          case 1:
            return "AEXPR_OP_ANY";
          case 2:
            return "AEXPR_OP_ALL";
          case 3:
            return "AEXPR_DISTINCT";
          case 4:
            return "AEXPR_NOT_DISTINCT";
          case 5:
            return "AEXPR_NULLIF";
          case 6:
            return "AEXPR_IN";
          case 7:
            return "AEXPR_LIKE";
          case 8:
            return "AEXPR_ILIKE";
          case 9:
            return "AEXPR_SIMILAR";
          case 10:
            return "AEXPR_BETWEEN";
          case 11:
            return "AEXPR_NOT_BETWEEN";
          case 12:
            return "AEXPR_BETWEEN_SYM";
          case 13:
            return "AEXPR_NOT_BETWEEN_SYM";
          default:
            throw new Error("Key not recognized in enum A_Expr_Kind");
        }
      }
    case "RoleSpecType":
      {
        switch (key) {
          case "ROLESPEC_CSTRING":
            return 0;
          case "ROLESPEC_CURRENT_ROLE":
            return 1;
          case "ROLESPEC_CURRENT_USER":
            return 2;
          case "ROLESPEC_SESSION_USER":
            return 3;
          case "ROLESPEC_PUBLIC":
            return 4;
          case 0:
            return "ROLESPEC_CSTRING";
          case 1:
            return "ROLESPEC_CURRENT_ROLE";
          case 2:
            return "ROLESPEC_CURRENT_USER";
          case 3:
            return "ROLESPEC_SESSION_USER";
          case 4:
            return "ROLESPEC_PUBLIC";
          default:
            throw new Error("Key not recognized in enum RoleSpecType");
        }
      }
    case "TableLikeOption":
      {
        switch (key) {
          case "CREATE_TABLE_LIKE_COMMENTS":
            return 0;
          case "CREATE_TABLE_LIKE_COMPRESSION":
            return 1;
          case "CREATE_TABLE_LIKE_CONSTRAINTS":
            return 2;
          case "CREATE_TABLE_LIKE_DEFAULTS":
            return 3;
          case "CREATE_TABLE_LIKE_GENERATED":
            return 4;
          case "CREATE_TABLE_LIKE_IDENTITY":
            return 5;
          case "CREATE_TABLE_LIKE_INDEXES":
            return 6;
          case "CREATE_TABLE_LIKE_STATISTICS":
            return 7;
          case "CREATE_TABLE_LIKE_STORAGE":
            return 8;
          case "CREATE_TABLE_LIKE_ALL":
            return 9;
          case 0:
            return "CREATE_TABLE_LIKE_COMMENTS";
          case 1:
            return "CREATE_TABLE_LIKE_COMPRESSION";
          case 2:
            return "CREATE_TABLE_LIKE_CONSTRAINTS";
          case 3:
            return "CREATE_TABLE_LIKE_DEFAULTS";
          case 4:
            return "CREATE_TABLE_LIKE_GENERATED";
          case 5:
            return "CREATE_TABLE_LIKE_IDENTITY";
          case 6:
            return "CREATE_TABLE_LIKE_INDEXES";
          case 7:
            return "CREATE_TABLE_LIKE_STATISTICS";
          case 8:
            return "CREATE_TABLE_LIKE_STORAGE";
          case 9:
            return "CREATE_TABLE_LIKE_ALL";
          default:
            throw new Error("Key not recognized in enum TableLikeOption");
        }
      }
    case "DefElemAction":
      {
        switch (key) {
          case "DEFELEM_UNSPEC":
            return 0;
          case "DEFELEM_SET":
            return 1;
          case "DEFELEM_ADD":
            return 2;
          case "DEFELEM_DROP":
            return 3;
          case 0:
            return "DEFELEM_UNSPEC";
          case 1:
            return "DEFELEM_SET";
          case 2:
            return "DEFELEM_ADD";
          case 3:
            return "DEFELEM_DROP";
          default:
            throw new Error("Key not recognized in enum DefElemAction");
        }
      }
    case "PartitionStrategy":
      {
        switch (key) {
          case "PARTITION_STRATEGY_LIST":
            return 0;
          case "PARTITION_STRATEGY_RANGE":
            return 1;
          case "PARTITION_STRATEGY_HASH":
            return 2;
          case 0:
            return "PARTITION_STRATEGY_LIST";
          case 1:
            return "PARTITION_STRATEGY_RANGE";
          case 2:
            return "PARTITION_STRATEGY_HASH";
          default:
            throw new Error("Key not recognized in enum PartitionStrategy");
        }
      }
    case "PartitionRangeDatumKind":
      {
        switch (key) {
          case "PARTITION_RANGE_DATUM_MINVALUE":
            return 0;
          case "PARTITION_RANGE_DATUM_VALUE":
            return 1;
          case "PARTITION_RANGE_DATUM_MAXVALUE":
            return 2;
          case 0:
            return "PARTITION_RANGE_DATUM_MINVALUE";
          case 1:
            return "PARTITION_RANGE_DATUM_VALUE";
          case 2:
            return "PARTITION_RANGE_DATUM_MAXVALUE";
          default:
            throw new Error("Key not recognized in enum PartitionRangeDatumKind");
        }
      }
    case "RTEKind":
      {
        switch (key) {
          case "RTE_RELATION":
            return 0;
          case "RTE_SUBQUERY":
            return 1;
          case "RTE_JOIN":
            return 2;
          case "RTE_FUNCTION":
            return 3;
          case "RTE_TABLEFUNC":
            return 4;
          case "RTE_VALUES":
            return 5;
          case "RTE_CTE":
            return 6;
          case "RTE_NAMEDTUPLESTORE":
            return 7;
          case "RTE_RESULT":
            return 8;
          case 0:
            return "RTE_RELATION";
          case 1:
            return "RTE_SUBQUERY";
          case 2:
            return "RTE_JOIN";
          case 3:
            return "RTE_FUNCTION";
          case 4:
            return "RTE_TABLEFUNC";
          case 5:
            return "RTE_VALUES";
          case 6:
            return "RTE_CTE";
          case 7:
            return "RTE_NAMEDTUPLESTORE";
          case 8:
            return "RTE_RESULT";
          default:
            throw new Error("Key not recognized in enum RTEKind");
        }
      }
    case "WCOKind":
      {
        switch (key) {
          case "WCO_VIEW_CHECK":
            return 0;
          case "WCO_RLS_INSERT_CHECK":
            return 1;
          case "WCO_RLS_UPDATE_CHECK":
            return 2;
          case "WCO_RLS_CONFLICT_CHECK":
            return 3;
          case "WCO_RLS_MERGE_UPDATE_CHECK":
            return 4;
          case "WCO_RLS_MERGE_DELETE_CHECK":
            return 5;
          case 0:
            return "WCO_VIEW_CHECK";
          case 1:
            return "WCO_RLS_INSERT_CHECK";
          case 2:
            return "WCO_RLS_UPDATE_CHECK";
          case 3:
            return "WCO_RLS_CONFLICT_CHECK";
          case 4:
            return "WCO_RLS_MERGE_UPDATE_CHECK";
          case 5:
            return "WCO_RLS_MERGE_DELETE_CHECK";
          default:
            throw new Error("Key not recognized in enum WCOKind");
        }
      }
    case "GroupingSetKind":
      {
        switch (key) {
          case "GROUPING_SET_EMPTY":
            return 0;
          case "GROUPING_SET_SIMPLE":
            return 1;
          case "GROUPING_SET_ROLLUP":
            return 2;
          case "GROUPING_SET_CUBE":
            return 3;
          case "GROUPING_SET_SETS":
            return 4;
          case 0:
            return "GROUPING_SET_EMPTY";
          case 1:
            return "GROUPING_SET_SIMPLE";
          case 2:
            return "GROUPING_SET_ROLLUP";
          case 3:
            return "GROUPING_SET_CUBE";
          case 4:
            return "GROUPING_SET_SETS";
          default:
            throw new Error("Key not recognized in enum GroupingSetKind");
        }
      }
    case "CTEMaterialize":
      {
        switch (key) {
          case "CTEMaterializeDefault":
            return 0;
          case "CTEMaterializeAlways":
            return 1;
          case "CTEMaterializeNever":
            return 2;
          case 0:
            return "CTEMaterializeDefault";
          case 1:
            return "CTEMaterializeAlways";
          case 2:
            return "CTEMaterializeNever";
          default:
            throw new Error("Key not recognized in enum CTEMaterialize");
        }
      }
    case "SetOperation":
      {
        switch (key) {
          case "SETOP_NONE":
            return 0;
          case "SETOP_UNION":
            return 1;
          case "SETOP_INTERSECT":
            return 2;
          case "SETOP_EXCEPT":
            return 3;
          case 0:
            return "SETOP_NONE";
          case 1:
            return "SETOP_UNION";
          case 2:
            return "SETOP_INTERSECT";
          case 3:
            return "SETOP_EXCEPT";
          default:
            throw new Error("Key not recognized in enum SetOperation");
        }
      }
    case "ObjectType":
      {
        switch (key) {
          case "OBJECT_ACCESS_METHOD":
            return 0;
          case "OBJECT_AGGREGATE":
            return 1;
          case "OBJECT_AMOP":
            return 2;
          case "OBJECT_AMPROC":
            return 3;
          case "OBJECT_ATTRIBUTE":
            return 4;
          case "OBJECT_CAST":
            return 5;
          case "OBJECT_COLUMN":
            return 6;
          case "OBJECT_COLLATION":
            return 7;
          case "OBJECT_CONVERSION":
            return 8;
          case "OBJECT_DATABASE":
            return 9;
          case "OBJECT_DEFAULT":
            return 10;
          case "OBJECT_DEFACL":
            return 11;
          case "OBJECT_DOMAIN":
            return 12;
          case "OBJECT_DOMCONSTRAINT":
            return 13;
          case "OBJECT_EVENT_TRIGGER":
            return 14;
          case "OBJECT_EXTENSION":
            return 15;
          case "OBJECT_FDW":
            return 16;
          case "OBJECT_FOREIGN_SERVER":
            return 17;
          case "OBJECT_FOREIGN_TABLE":
            return 18;
          case "OBJECT_FUNCTION":
            return 19;
          case "OBJECT_INDEX":
            return 20;
          case "OBJECT_LANGUAGE":
            return 21;
          case "OBJECT_LARGEOBJECT":
            return 22;
          case "OBJECT_MATVIEW":
            return 23;
          case "OBJECT_OPCLASS":
            return 24;
          case "OBJECT_OPERATOR":
            return 25;
          case "OBJECT_OPFAMILY":
            return 26;
          case "OBJECT_PARAMETER_ACL":
            return 27;
          case "OBJECT_POLICY":
            return 28;
          case "OBJECT_PROCEDURE":
            return 29;
          case "OBJECT_PUBLICATION":
            return 30;
          case "OBJECT_PUBLICATION_NAMESPACE":
            return 31;
          case "OBJECT_PUBLICATION_REL":
            return 32;
          case "OBJECT_ROLE":
            return 33;
          case "OBJECT_ROUTINE":
            return 34;
          case "OBJECT_RULE":
            return 35;
          case "OBJECT_SCHEMA":
            return 36;
          case "OBJECT_SEQUENCE":
            return 37;
          case "OBJECT_SUBSCRIPTION":
            return 38;
          case "OBJECT_STATISTIC_EXT":
            return 39;
          case "OBJECT_TABCONSTRAINT":
            return 40;
          case "OBJECT_TABLE":
            return 41;
          case "OBJECT_TABLESPACE":
            return 42;
          case "OBJECT_TRANSFORM":
            return 43;
          case "OBJECT_TRIGGER":
            return 44;
          case "OBJECT_TSCONFIGURATION":
            return 45;
          case "OBJECT_TSDICTIONARY":
            return 46;
          case "OBJECT_TSPARSER":
            return 47;
          case "OBJECT_TSTEMPLATE":
            return 48;
          case "OBJECT_TYPE":
            return 49;
          case "OBJECT_USER_MAPPING":
            return 50;
          case "OBJECT_VIEW":
            return 51;
          case 0:
            return "OBJECT_ACCESS_METHOD";
          case 1:
            return "OBJECT_AGGREGATE";
          case 2:
            return "OBJECT_AMOP";
          case 3:
            return "OBJECT_AMPROC";
          case 4:
            return "OBJECT_ATTRIBUTE";
          case 5:
            return "OBJECT_CAST";
          case 6:
            return "OBJECT_COLUMN";
          case 7:
            return "OBJECT_COLLATION";
          case 8:
            return "OBJECT_CONVERSION";
          case 9:
            return "OBJECT_DATABASE";
          case 10:
            return "OBJECT_DEFAULT";
          case 11:
            return "OBJECT_DEFACL";
          case 12:
            return "OBJECT_DOMAIN";
          case 13:
            return "OBJECT_DOMCONSTRAINT";
          case 14:
            return "OBJECT_EVENT_TRIGGER";
          case 15:
            return "OBJECT_EXTENSION";
          case 16:
            return "OBJECT_FDW";
          case 17:
            return "OBJECT_FOREIGN_SERVER";
          case 18:
            return "OBJECT_FOREIGN_TABLE";
          case 19:
            return "OBJECT_FUNCTION";
          case 20:
            return "OBJECT_INDEX";
          case 21:
            return "OBJECT_LANGUAGE";
          case 22:
            return "OBJECT_LARGEOBJECT";
          case 23:
            return "OBJECT_MATVIEW";
          case 24:
            return "OBJECT_OPCLASS";
          case 25:
            return "OBJECT_OPERATOR";
          case 26:
            return "OBJECT_OPFAMILY";
          case 27:
            return "OBJECT_PARAMETER_ACL";
          case 28:
            return "OBJECT_POLICY";
          case 29:
            return "OBJECT_PROCEDURE";
          case 30:
            return "OBJECT_PUBLICATION";
          case 31:
            return "OBJECT_PUBLICATION_NAMESPACE";
          case 32:
            return "OBJECT_PUBLICATION_REL";
          case 33:
            return "OBJECT_ROLE";
          case 34:
            return "OBJECT_ROUTINE";
          case 35:
            return "OBJECT_RULE";
          case 36:
            return "OBJECT_SCHEMA";
          case 37:
            return "OBJECT_SEQUENCE";
          case 38:
            return "OBJECT_SUBSCRIPTION";
          case 39:
            return "OBJECT_STATISTIC_EXT";
          case 40:
            return "OBJECT_TABCONSTRAINT";
          case 41:
            return "OBJECT_TABLE";
          case 42:
            return "OBJECT_TABLESPACE";
          case 43:
            return "OBJECT_TRANSFORM";
          case 44:
            return "OBJECT_TRIGGER";
          case 45:
            return "OBJECT_TSCONFIGURATION";
          case 46:
            return "OBJECT_TSDICTIONARY";
          case 47:
            return "OBJECT_TSPARSER";
          case 48:
            return "OBJECT_TSTEMPLATE";
          case 49:
            return "OBJECT_TYPE";
          case 50:
            return "OBJECT_USER_MAPPING";
          case 51:
            return "OBJECT_VIEW";
          default:
            throw new Error("Key not recognized in enum ObjectType");
        }
      }
    case "DropBehavior":
      {
        switch (key) {
          case "DROP_RESTRICT":
            return 0;
          case "DROP_CASCADE":
            return 1;
          case 0:
            return "DROP_RESTRICT";
          case 1:
            return "DROP_CASCADE";
          default:
            throw new Error("Key not recognized in enum DropBehavior");
        }
      }
    case "AlterTableType":
      {
        switch (key) {
          case "AT_AddColumn":
            return 0;
          case "AT_AddColumnToView":
            return 1;
          case "AT_ColumnDefault":
            return 2;
          case "AT_CookedColumnDefault":
            return 3;
          case "AT_DropNotNull":
            return 4;
          case "AT_SetNotNull":
            return 5;
          case "AT_DropExpression":
            return 6;
          case "AT_CheckNotNull":
            return 7;
          case "AT_SetStatistics":
            return 8;
          case "AT_SetOptions":
            return 9;
          case "AT_ResetOptions":
            return 10;
          case "AT_SetStorage":
            return 11;
          case "AT_SetCompression":
            return 12;
          case "AT_DropColumn":
            return 13;
          case "AT_AddIndex":
            return 14;
          case "AT_ReAddIndex":
            return 15;
          case "AT_AddConstraint":
            return 16;
          case "AT_ReAddConstraint":
            return 17;
          case "AT_ReAddDomainConstraint":
            return 18;
          case "AT_AlterConstraint":
            return 19;
          case "AT_ValidateConstraint":
            return 20;
          case "AT_AddIndexConstraint":
            return 21;
          case "AT_DropConstraint":
            return 22;
          case "AT_ReAddComment":
            return 23;
          case "AT_AlterColumnType":
            return 24;
          case "AT_AlterColumnGenericOptions":
            return 25;
          case "AT_ChangeOwner":
            return 26;
          case "AT_ClusterOn":
            return 27;
          case "AT_DropCluster":
            return 28;
          case "AT_SetLogged":
            return 29;
          case "AT_SetUnLogged":
            return 30;
          case "AT_DropOids":
            return 31;
          case "AT_SetAccessMethod":
            return 32;
          case "AT_SetTableSpace":
            return 33;
          case "AT_SetRelOptions":
            return 34;
          case "AT_ResetRelOptions":
            return 35;
          case "AT_ReplaceRelOptions":
            return 36;
          case "AT_EnableTrig":
            return 37;
          case "AT_EnableAlwaysTrig":
            return 38;
          case "AT_EnableReplicaTrig":
            return 39;
          case "AT_DisableTrig":
            return 40;
          case "AT_EnableTrigAll":
            return 41;
          case "AT_DisableTrigAll":
            return 42;
          case "AT_EnableTrigUser":
            return 43;
          case "AT_DisableTrigUser":
            return 44;
          case "AT_EnableRule":
            return 45;
          case "AT_EnableAlwaysRule":
            return 46;
          case "AT_EnableReplicaRule":
            return 47;
          case "AT_DisableRule":
            return 48;
          case "AT_AddInherit":
            return 49;
          case "AT_DropInherit":
            return 50;
          case "AT_AddOf":
            return 51;
          case "AT_DropOf":
            return 52;
          case "AT_ReplicaIdentity":
            return 53;
          case "AT_EnableRowSecurity":
            return 54;
          case "AT_DisableRowSecurity":
            return 55;
          case "AT_ForceRowSecurity":
            return 56;
          case "AT_NoForceRowSecurity":
            return 57;
          case "AT_GenericOptions":
            return 58;
          case "AT_AttachPartition":
            return 59;
          case "AT_DetachPartition":
            return 60;
          case "AT_DetachPartitionFinalize":
            return 61;
          case "AT_AddIdentity":
            return 62;
          case "AT_SetIdentity":
            return 63;
          case "AT_DropIdentity":
            return 64;
          case "AT_ReAddStatistics":
            return 65;
          case 0:
            return "AT_AddColumn";
          case 1:
            return "AT_AddColumnToView";
          case 2:
            return "AT_ColumnDefault";
          case 3:
            return "AT_CookedColumnDefault";
          case 4:
            return "AT_DropNotNull";
          case 5:
            return "AT_SetNotNull";
          case 6:
            return "AT_DropExpression";
          case 7:
            return "AT_CheckNotNull";
          case 8:
            return "AT_SetStatistics";
          case 9:
            return "AT_SetOptions";
          case 10:
            return "AT_ResetOptions";
          case 11:
            return "AT_SetStorage";
          case 12:
            return "AT_SetCompression";
          case 13:
            return "AT_DropColumn";
          case 14:
            return "AT_AddIndex";
          case 15:
            return "AT_ReAddIndex";
          case 16:
            return "AT_AddConstraint";
          case 17:
            return "AT_ReAddConstraint";
          case 18:
            return "AT_ReAddDomainConstraint";
          case 19:
            return "AT_AlterConstraint";
          case 20:
            return "AT_ValidateConstraint";
          case 21:
            return "AT_AddIndexConstraint";
          case 22:
            return "AT_DropConstraint";
          case 23:
            return "AT_ReAddComment";
          case 24:
            return "AT_AlterColumnType";
          case 25:
            return "AT_AlterColumnGenericOptions";
          case 26:
            return "AT_ChangeOwner";
          case 27:
            return "AT_ClusterOn";
          case 28:
            return "AT_DropCluster";
          case 29:
            return "AT_SetLogged";
          case 30:
            return "AT_SetUnLogged";
          case 31:
            return "AT_DropOids";
          case 32:
            return "AT_SetAccessMethod";
          case 33:
            return "AT_SetTableSpace";
          case 34:
            return "AT_SetRelOptions";
          case 35:
            return "AT_ResetRelOptions";
          case 36:
            return "AT_ReplaceRelOptions";
          case 37:
            return "AT_EnableTrig";
          case 38:
            return "AT_EnableAlwaysTrig";
          case 39:
            return "AT_EnableReplicaTrig";
          case 40:
            return "AT_DisableTrig";
          case 41:
            return "AT_EnableTrigAll";
          case 42:
            return "AT_DisableTrigAll";
          case 43:
            return "AT_EnableTrigUser";
          case 44:
            return "AT_DisableTrigUser";
          case 45:
            return "AT_EnableRule";
          case 46:
            return "AT_EnableAlwaysRule";
          case 47:
            return "AT_EnableReplicaRule";
          case 48:
            return "AT_DisableRule";
          case 49:
            return "AT_AddInherit";
          case 50:
            return "AT_DropInherit";
          case 51:
            return "AT_AddOf";
          case 52:
            return "AT_DropOf";
          case 53:
            return "AT_ReplicaIdentity";
          case 54:
            return "AT_EnableRowSecurity";
          case 55:
            return "AT_DisableRowSecurity";
          case 56:
            return "AT_ForceRowSecurity";
          case 57:
            return "AT_NoForceRowSecurity";
          case 58:
            return "AT_GenericOptions";
          case 59:
            return "AT_AttachPartition";
          case 60:
            return "AT_DetachPartition";
          case 61:
            return "AT_DetachPartitionFinalize";
          case 62:
            return "AT_AddIdentity";
          case 63:
            return "AT_SetIdentity";
          case 64:
            return "AT_DropIdentity";
          case 65:
            return "AT_ReAddStatistics";
          default:
            throw new Error("Key not recognized in enum AlterTableType");
        }
      }
    case "GrantTargetType":
      {
        switch (key) {
          case "ACL_TARGET_OBJECT":
            return 0;
          case "ACL_TARGET_ALL_IN_SCHEMA":
            return 1;
          case "ACL_TARGET_DEFAULTS":
            return 2;
          case 0:
            return "ACL_TARGET_OBJECT";
          case 1:
            return "ACL_TARGET_ALL_IN_SCHEMA";
          case 2:
            return "ACL_TARGET_DEFAULTS";
          default:
            throw new Error("Key not recognized in enum GrantTargetType");
        }
      }
    case "VariableSetKind":
      {
        switch (key) {
          case "VAR_SET_VALUE":
            return 0;
          case "VAR_SET_DEFAULT":
            return 1;
          case "VAR_SET_CURRENT":
            return 2;
          case "VAR_SET_MULTI":
            return 3;
          case "VAR_RESET":
            return 4;
          case "VAR_RESET_ALL":
            return 5;
          case 0:
            return "VAR_SET_VALUE";
          case 1:
            return "VAR_SET_DEFAULT";
          case 2:
            return "VAR_SET_CURRENT";
          case 3:
            return "VAR_SET_MULTI";
          case 4:
            return "VAR_RESET";
          case 5:
            return "VAR_RESET_ALL";
          default:
            throw new Error("Key not recognized in enum VariableSetKind");
        }
      }
    case "ConstrType":
      {
        switch (key) {
          case "CONSTR_NULL":
            return 0;
          case "CONSTR_NOTNULL":
            return 1;
          case "CONSTR_DEFAULT":
            return 2;
          case "CONSTR_IDENTITY":
            return 3;
          case "CONSTR_GENERATED":
            return 4;
          case "CONSTR_CHECK":
            return 5;
          case "CONSTR_PRIMARY":
            return 6;
          case "CONSTR_UNIQUE":
            return 7;
          case "CONSTR_EXCLUSION":
            return 8;
          case "CONSTR_FOREIGN":
            return 9;
          case "CONSTR_ATTR_DEFERRABLE":
            return 10;
          case "CONSTR_ATTR_NOT_DEFERRABLE":
            return 11;
          case "CONSTR_ATTR_DEFERRED":
            return 12;
          case "CONSTR_ATTR_IMMEDIATE":
            return 13;
          case 0:
            return "CONSTR_NULL";
          case 1:
            return "CONSTR_NOTNULL";
          case 2:
            return "CONSTR_DEFAULT";
          case 3:
            return "CONSTR_IDENTITY";
          case 4:
            return "CONSTR_GENERATED";
          case 5:
            return "CONSTR_CHECK";
          case 6:
            return "CONSTR_PRIMARY";
          case 7:
            return "CONSTR_UNIQUE";
          case 8:
            return "CONSTR_EXCLUSION";
          case 9:
            return "CONSTR_FOREIGN";
          case 10:
            return "CONSTR_ATTR_DEFERRABLE";
          case 11:
            return "CONSTR_ATTR_NOT_DEFERRABLE";
          case 12:
            return "CONSTR_ATTR_DEFERRED";
          case 13:
            return "CONSTR_ATTR_IMMEDIATE";
          default:
            throw new Error("Key not recognized in enum ConstrType");
        }
      }
    case "ImportForeignSchemaType":
      {
        switch (key) {
          case "FDW_IMPORT_SCHEMA_ALL":
            return 0;
          case "FDW_IMPORT_SCHEMA_LIMIT_TO":
            return 1;
          case "FDW_IMPORT_SCHEMA_EXCEPT":
            return 2;
          case 0:
            return "FDW_IMPORT_SCHEMA_ALL";
          case 1:
            return "FDW_IMPORT_SCHEMA_LIMIT_TO";
          case 2:
            return "FDW_IMPORT_SCHEMA_EXCEPT";
          default:
            throw new Error("Key not recognized in enum ImportForeignSchemaType");
        }
      }
    case "RoleStmtType":
      {
        switch (key) {
          case "ROLESTMT_ROLE":
            return 0;
          case "ROLESTMT_USER":
            return 1;
          case "ROLESTMT_GROUP":
            return 2;
          case 0:
            return "ROLESTMT_ROLE";
          case 1:
            return "ROLESTMT_USER";
          case 2:
            return "ROLESTMT_GROUP";
          default:
            throw new Error("Key not recognized in enum RoleStmtType");
        }
      }
    case "FetchDirection":
      {
        switch (key) {
          case "FETCH_FORWARD":
            return 0;
          case "FETCH_BACKWARD":
            return 1;
          case "FETCH_ABSOLUTE":
            return 2;
          case "FETCH_RELATIVE":
            return 3;
          case 0:
            return "FETCH_FORWARD";
          case 1:
            return "FETCH_BACKWARD";
          case 2:
            return "FETCH_ABSOLUTE";
          case 3:
            return "FETCH_RELATIVE";
          default:
            throw new Error("Key not recognized in enum FetchDirection");
        }
      }
    case "FunctionParameterMode":
      {
        switch (key) {
          case "FUNC_PARAM_IN":
            return 0;
          case "FUNC_PARAM_OUT":
            return 1;
          case "FUNC_PARAM_INOUT":
            return 2;
          case "FUNC_PARAM_VARIADIC":
            return 3;
          case "FUNC_PARAM_TABLE":
            return 4;
          case "FUNC_PARAM_DEFAULT":
            return 5;
          case 0:
            return "FUNC_PARAM_IN";
          case 1:
            return "FUNC_PARAM_OUT";
          case 2:
            return "FUNC_PARAM_INOUT";
          case 3:
            return "FUNC_PARAM_VARIADIC";
          case 4:
            return "FUNC_PARAM_TABLE";
          case 5:
            return "FUNC_PARAM_DEFAULT";
          default:
            throw new Error("Key not recognized in enum FunctionParameterMode");
        }
      }
    case "TransactionStmtKind":
      {
        switch (key) {
          case "TRANS_STMT_BEGIN":
            return 0;
          case "TRANS_STMT_START":
            return 1;
          case "TRANS_STMT_COMMIT":
            return 2;
          case "TRANS_STMT_ROLLBACK":
            return 3;
          case "TRANS_STMT_SAVEPOINT":
            return 4;
          case "TRANS_STMT_RELEASE":
            return 5;
          case "TRANS_STMT_ROLLBACK_TO":
            return 6;
          case "TRANS_STMT_PREPARE":
            return 7;
          case "TRANS_STMT_COMMIT_PREPARED":
            return 8;
          case "TRANS_STMT_ROLLBACK_PREPARED":
            return 9;
          case 0:
            return "TRANS_STMT_BEGIN";
          case 1:
            return "TRANS_STMT_START";
          case 2:
            return "TRANS_STMT_COMMIT";
          case 3:
            return "TRANS_STMT_ROLLBACK";
          case 4:
            return "TRANS_STMT_SAVEPOINT";
          case 5:
            return "TRANS_STMT_RELEASE";
          case 6:
            return "TRANS_STMT_ROLLBACK_TO";
          case 7:
            return "TRANS_STMT_PREPARE";
          case 8:
            return "TRANS_STMT_COMMIT_PREPARED";
          case 9:
            return "TRANS_STMT_ROLLBACK_PREPARED";
          default:
            throw new Error("Key not recognized in enum TransactionStmtKind");
        }
      }
    case "ViewCheckOption":
      {
        switch (key) {
          case "NO_CHECK_OPTION":
            return 0;
          case "LOCAL_CHECK_OPTION":
            return 1;
          case "CASCADED_CHECK_OPTION":
            return 2;
          case 0:
            return "NO_CHECK_OPTION";
          case 1:
            return "LOCAL_CHECK_OPTION";
          case 2:
            return "CASCADED_CHECK_OPTION";
          default:
            throw new Error("Key not recognized in enum ViewCheckOption");
        }
      }
    case "DiscardMode":
      {
        switch (key) {
          case "DISCARD_ALL":
            return 0;
          case "DISCARD_PLANS":
            return 1;
          case "DISCARD_SEQUENCES":
            return 2;
          case "DISCARD_TEMP":
            return 3;
          case 0:
            return "DISCARD_ALL";
          case 1:
            return "DISCARD_PLANS";
          case 2:
            return "DISCARD_SEQUENCES";
          case 3:
            return "DISCARD_TEMP";
          default:
            throw new Error("Key not recognized in enum DiscardMode");
        }
      }
    case "ReindexObjectType":
      {
        switch (key) {
          case "REINDEX_OBJECT_INDEX":
            return 0;
          case "REINDEX_OBJECT_TABLE":
            return 1;
          case "REINDEX_OBJECT_SCHEMA":
            return 2;
          case "REINDEX_OBJECT_SYSTEM":
            return 3;
          case "REINDEX_OBJECT_DATABASE":
            return 4;
          case 0:
            return "REINDEX_OBJECT_INDEX";
          case 1:
            return "REINDEX_OBJECT_TABLE";
          case 2:
            return "REINDEX_OBJECT_SCHEMA";
          case 3:
            return "REINDEX_OBJECT_SYSTEM";
          case 4:
            return "REINDEX_OBJECT_DATABASE";
          default:
            throw new Error("Key not recognized in enum ReindexObjectType");
        }
      }
    case "AlterTSConfigType":
      {
        switch (key) {
          case "ALTER_TSCONFIG_ADD_MAPPING":
            return 0;
          case "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN":
            return 1;
          case "ALTER_TSCONFIG_REPLACE_DICT":
            return 2;
          case "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN":
            return 3;
          case "ALTER_TSCONFIG_DROP_MAPPING":
            return 4;
          case 0:
            return "ALTER_TSCONFIG_ADD_MAPPING";
          case 1:
            return "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN";
          case 2:
            return "ALTER_TSCONFIG_REPLACE_DICT";
          case 3:
            return "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN";
          case 4:
            return "ALTER_TSCONFIG_DROP_MAPPING";
          default:
            throw new Error("Key not recognized in enum AlterTSConfigType");
        }
      }
    case "PublicationObjSpecType":
      {
        switch (key) {
          case "PUBLICATIONOBJ_TABLE":
            return 0;
          case "PUBLICATIONOBJ_TABLES_IN_SCHEMA":
            return 1;
          case "PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA":
            return 2;
          case "PUBLICATIONOBJ_CONTINUATION":
            return 3;
          case 0:
            return "PUBLICATIONOBJ_TABLE";
          case 1:
            return "PUBLICATIONOBJ_TABLES_IN_SCHEMA";
          case 2:
            return "PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA";
          case 3:
            return "PUBLICATIONOBJ_CONTINUATION";
          default:
            throw new Error("Key not recognized in enum PublicationObjSpecType");
        }
      }
    case "AlterPublicationAction":
      {
        switch (key) {
          case "AP_AddObjects":
            return 0;
          case "AP_DropObjects":
            return 1;
          case "AP_SetObjects":
            return 2;
          case 0:
            return "AP_AddObjects";
          case 1:
            return "AP_DropObjects";
          case 2:
            return "AP_SetObjects";
          default:
            throw new Error("Key not recognized in enum AlterPublicationAction");
        }
      }
    case "AlterSubscriptionType":
      {
        switch (key) {
          case "ALTER_SUBSCRIPTION_OPTIONS":
            return 0;
          case "ALTER_SUBSCRIPTION_CONNECTION":
            return 1;
          case "ALTER_SUBSCRIPTION_SET_PUBLICATION":
            return 2;
          case "ALTER_SUBSCRIPTION_ADD_PUBLICATION":
            return 3;
          case "ALTER_SUBSCRIPTION_DROP_PUBLICATION":
            return 4;
          case "ALTER_SUBSCRIPTION_REFRESH":
            return 5;
          case "ALTER_SUBSCRIPTION_ENABLED":
            return 6;
          case "ALTER_SUBSCRIPTION_SKIP":
            return 7;
          case 0:
            return "ALTER_SUBSCRIPTION_OPTIONS";
          case 1:
            return "ALTER_SUBSCRIPTION_CONNECTION";
          case 2:
            return "ALTER_SUBSCRIPTION_SET_PUBLICATION";
          case 3:
            return "ALTER_SUBSCRIPTION_ADD_PUBLICATION";
          case 4:
            return "ALTER_SUBSCRIPTION_DROP_PUBLICATION";
          case 5:
            return "ALTER_SUBSCRIPTION_REFRESH";
          case 6:
            return "ALTER_SUBSCRIPTION_ENABLED";
          case 7:
            return "ALTER_SUBSCRIPTION_SKIP";
          default:
            throw new Error("Key not recognized in enum AlterSubscriptionType");
        }
      }
    case "OnCommitAction":
      {
        switch (key) {
          case "ONCOMMIT_NOOP":
            return 0;
          case "ONCOMMIT_PRESERVE_ROWS":
            return 1;
          case "ONCOMMIT_DELETE_ROWS":
            return 2;
          case "ONCOMMIT_DROP":
            return 3;
          case 0:
            return "ONCOMMIT_NOOP";
          case 1:
            return "ONCOMMIT_PRESERVE_ROWS";
          case 2:
            return "ONCOMMIT_DELETE_ROWS";
          case 3:
            return "ONCOMMIT_DROP";
          default:
            throw new Error("Key not recognized in enum OnCommitAction");
        }
      }
    case "ParamKind":
      {
        switch (key) {
          case "PARAM_EXTERN":
            return 0;
          case "PARAM_EXEC":
            return 1;
          case "PARAM_SUBLINK":
            return 2;
          case "PARAM_MULTIEXPR":
            return 3;
          case 0:
            return "PARAM_EXTERN";
          case 1:
            return "PARAM_EXEC";
          case 2:
            return "PARAM_SUBLINK";
          case 3:
            return "PARAM_MULTIEXPR";
          default:
            throw new Error("Key not recognized in enum ParamKind");
        }
      }
    case "CoercionContext":
      {
        switch (key) {
          case "COERCION_IMPLICIT":
            return 0;
          case "COERCION_ASSIGNMENT":
            return 1;
          case "COERCION_PLPGSQL":
            return 2;
          case "COERCION_EXPLICIT":
            return 3;
          case 0:
            return "COERCION_IMPLICIT";
          case 1:
            return "COERCION_ASSIGNMENT";
          case 2:
            return "COERCION_PLPGSQL";
          case 3:
            return "COERCION_EXPLICIT";
          default:
            throw new Error("Key not recognized in enum CoercionContext");
        }
      }
    case "CoercionForm":
      {
        switch (key) {
          case "COERCE_EXPLICIT_CALL":
            return 0;
          case "COERCE_EXPLICIT_CAST":
            return 1;
          case "COERCE_IMPLICIT_CAST":
            return 2;
          case "COERCE_SQL_SYNTAX":
            return 3;
          case 0:
            return "COERCE_EXPLICIT_CALL";
          case 1:
            return "COERCE_EXPLICIT_CAST";
          case 2:
            return "COERCE_IMPLICIT_CAST";
          case 3:
            return "COERCE_SQL_SYNTAX";
          default:
            throw new Error("Key not recognized in enum CoercionForm");
        }
      }
    case "BoolExprType":
      {
        switch (key) {
          case "AND_EXPR":
            return 0;
          case "OR_EXPR":
            return 1;
          case "NOT_EXPR":
            return 2;
          case 0:
            return "AND_EXPR";
          case 1:
            return "OR_EXPR";
          case 2:
            return "NOT_EXPR";
          default:
            throw new Error("Key not recognized in enum BoolExprType");
        }
      }
    case "SubLinkType":
      {
        switch (key) {
          case "EXISTS_SUBLINK":
            return 0;
          case "ALL_SUBLINK":
            return 1;
          case "ANY_SUBLINK":
            return 2;
          case "ROWCOMPARE_SUBLINK":
            return 3;
          case "EXPR_SUBLINK":
            return 4;
          case "MULTIEXPR_SUBLINK":
            return 5;
          case "ARRAY_SUBLINK":
            return 6;
          case "CTE_SUBLINK":
            return 7;
          case 0:
            return "EXISTS_SUBLINK";
          case 1:
            return "ALL_SUBLINK";
          case 2:
            return "ANY_SUBLINK";
          case 3:
            return "ROWCOMPARE_SUBLINK";
          case 4:
            return "EXPR_SUBLINK";
          case 5:
            return "MULTIEXPR_SUBLINK";
          case 6:
            return "ARRAY_SUBLINK";
          case 7:
            return "CTE_SUBLINK";
          default:
            throw new Error("Key not recognized in enum SubLinkType");
        }
      }
    case "RowCompareType":
      {
        switch (key) {
          case "ROWCOMPARE_LT":
            return 0;
          case "ROWCOMPARE_LE":
            return 1;
          case "ROWCOMPARE_EQ":
            return 2;
          case "ROWCOMPARE_GE":
            return 3;
          case "ROWCOMPARE_GT":
            return 4;
          case "ROWCOMPARE_NE":
            return 5;
          case 0:
            return "ROWCOMPARE_LT";
          case 1:
            return "ROWCOMPARE_LE";
          case 2:
            return "ROWCOMPARE_EQ";
          case 3:
            return "ROWCOMPARE_GE";
          case 4:
            return "ROWCOMPARE_GT";
          case 5:
            return "ROWCOMPARE_NE";
          default:
            throw new Error("Key not recognized in enum RowCompareType");
        }
      }
    case "MinMaxOp":
      {
        switch (key) {
          case "IS_GREATEST":
            return 0;
          case "IS_LEAST":
            return 1;
          case 0:
            return "IS_GREATEST";
          case 1:
            return "IS_LEAST";
          default:
            throw new Error("Key not recognized in enum MinMaxOp");
        }
      }
    case "SQLValueFunctionOp":
      {
        switch (key) {
          case "SVFOP_CURRENT_DATE":
            return 0;
          case "SVFOP_CURRENT_TIME":
            return 1;
          case "SVFOP_CURRENT_TIME_N":
            return 2;
          case "SVFOP_CURRENT_TIMESTAMP":
            return 3;
          case "SVFOP_CURRENT_TIMESTAMP_N":
            return 4;
          case "SVFOP_LOCALTIME":
            return 5;
          case "SVFOP_LOCALTIME_N":
            return 6;
          case "SVFOP_LOCALTIMESTAMP":
            return 7;
          case "SVFOP_LOCALTIMESTAMP_N":
            return 8;
          case "SVFOP_CURRENT_ROLE":
            return 9;
          case "SVFOP_CURRENT_USER":
            return 10;
          case "SVFOP_USER":
            return 11;
          case "SVFOP_SESSION_USER":
            return 12;
          case "SVFOP_CURRENT_CATALOG":
            return 13;
          case "SVFOP_CURRENT_SCHEMA":
            return 14;
          case 0:
            return "SVFOP_CURRENT_DATE";
          case 1:
            return "SVFOP_CURRENT_TIME";
          case 2:
            return "SVFOP_CURRENT_TIME_N";
          case 3:
            return "SVFOP_CURRENT_TIMESTAMP";
          case 4:
            return "SVFOP_CURRENT_TIMESTAMP_N";
          case 5:
            return "SVFOP_LOCALTIME";
          case 6:
            return "SVFOP_LOCALTIME_N";
          case 7:
            return "SVFOP_LOCALTIMESTAMP";
          case 8:
            return "SVFOP_LOCALTIMESTAMP_N";
          case 9:
            return "SVFOP_CURRENT_ROLE";
          case 10:
            return "SVFOP_CURRENT_USER";
          case 11:
            return "SVFOP_USER";
          case 12:
            return "SVFOP_SESSION_USER";
          case 13:
            return "SVFOP_CURRENT_CATALOG";
          case 14:
            return "SVFOP_CURRENT_SCHEMA";
          default:
            throw new Error("Key not recognized in enum SQLValueFunctionOp");
        }
      }
    case "XmlExprOp":
      {
        switch (key) {
          case "IS_XMLCONCAT":
            return 0;
          case "IS_XMLELEMENT":
            return 1;
          case "IS_XMLFOREST":
            return 2;
          case "IS_XMLPARSE":
            return 3;
          case "IS_XMLPI":
            return 4;
          case "IS_XMLROOT":
            return 5;
          case "IS_XMLSERIALIZE":
            return 6;
          case "IS_DOCUMENT":
            return 7;
          case 0:
            return "IS_XMLCONCAT";
          case 1:
            return "IS_XMLELEMENT";
          case 2:
            return "IS_XMLFOREST";
          case 3:
            return "IS_XMLPARSE";
          case 4:
            return "IS_XMLPI";
          case 5:
            return "IS_XMLROOT";
          case 6:
            return "IS_XMLSERIALIZE";
          case 7:
            return "IS_DOCUMENT";
          default:
            throw new Error("Key not recognized in enum XmlExprOp");
        }
      }
    case "XmlOptionType":
      {
        switch (key) {
          case "XMLOPTION_DOCUMENT":
            return 0;
          case "XMLOPTION_CONTENT":
            return 1;
          case 0:
            return "XMLOPTION_DOCUMENT";
          case 1:
            return "XMLOPTION_CONTENT";
          default:
            throw new Error("Key not recognized in enum XmlOptionType");
        }
      }
    case "JsonEncoding":
      {
        switch (key) {
          case "JS_ENC_DEFAULT":
            return 0;
          case "JS_ENC_UTF8":
            return 1;
          case "JS_ENC_UTF16":
            return 2;
          case "JS_ENC_UTF32":
            return 3;
          case 0:
            return "JS_ENC_DEFAULT";
          case 1:
            return "JS_ENC_UTF8";
          case 2:
            return "JS_ENC_UTF16";
          case 3:
            return "JS_ENC_UTF32";
          default:
            throw new Error("Key not recognized in enum JsonEncoding");
        }
      }
    case "JsonFormatType":
      {
        switch (key) {
          case "JS_FORMAT_DEFAULT":
            return 0;
          case "JS_FORMAT_JSON":
            return 1;
          case "JS_FORMAT_JSONB":
            return 2;
          case 0:
            return "JS_FORMAT_DEFAULT";
          case 1:
            return "JS_FORMAT_JSON";
          case 2:
            return "JS_FORMAT_JSONB";
          default:
            throw new Error("Key not recognized in enum JsonFormatType");
        }
      }
    case "JsonConstructorType":
      {
        switch (key) {
          case "JSCTOR_JSON_OBJECT":
            return 0;
          case "JSCTOR_JSON_ARRAY":
            return 1;
          case "JSCTOR_JSON_OBJECTAGG":
            return 2;
          case "JSCTOR_JSON_ARRAYAGG":
            return 3;
          case 0:
            return "JSCTOR_JSON_OBJECT";
          case 1:
            return "JSCTOR_JSON_ARRAY";
          case 2:
            return "JSCTOR_JSON_OBJECTAGG";
          case 3:
            return "JSCTOR_JSON_ARRAYAGG";
          default:
            throw new Error("Key not recognized in enum JsonConstructorType");
        }
      }
    case "JsonValueType":
      {
        switch (key) {
          case "JS_TYPE_ANY":
            return 0;
          case "JS_TYPE_OBJECT":
            return 1;
          case "JS_TYPE_ARRAY":
            return 2;
          case "JS_TYPE_SCALAR":
            return 3;
          case 0:
            return "JS_TYPE_ANY";
          case 1:
            return "JS_TYPE_OBJECT";
          case 2:
            return "JS_TYPE_ARRAY";
          case 3:
            return "JS_TYPE_SCALAR";
          default:
            throw new Error("Key not recognized in enum JsonValueType");
        }
      }
    case "NullTestType":
      {
        switch (key) {
          case "IS_NULL":
            return 0;
          case "IS_NOT_NULL":
            return 1;
          case 0:
            return "IS_NULL";
          case 1:
            return "IS_NOT_NULL";
          default:
            throw new Error("Key not recognized in enum NullTestType");
        }
      }
    case "BoolTestType":
      {
        switch (key) {
          case "IS_TRUE":
            return 0;
          case "IS_NOT_TRUE":
            return 1;
          case "IS_FALSE":
            return 2;
          case "IS_NOT_FALSE":
            return 3;
          case "IS_UNKNOWN":
            return 4;
          case "IS_NOT_UNKNOWN":
            return 5;
          case 0:
            return "IS_TRUE";
          case 1:
            return "IS_NOT_TRUE";
          case 2:
            return "IS_FALSE";
          case 3:
            return "IS_NOT_FALSE";
          case 4:
            return "IS_UNKNOWN";
          case 5:
            return "IS_NOT_UNKNOWN";
          default:
            throw new Error("Key not recognized in enum BoolTestType");
        }
      }
    case "CmdType":
      {
        switch (key) {
          case "CMD_UNKNOWN":
            return 0;
          case "CMD_SELECT":
            return 1;
          case "CMD_UPDATE":
            return 2;
          case "CMD_INSERT":
            return 3;
          case "CMD_DELETE":
            return 4;
          case "CMD_MERGE":
            return 5;
          case "CMD_UTILITY":
            return 6;
          case "CMD_NOTHING":
            return 7;
          case 0:
            return "CMD_UNKNOWN";
          case 1:
            return "CMD_SELECT";
          case 2:
            return "CMD_UPDATE";
          case 3:
            return "CMD_INSERT";
          case 4:
            return "CMD_DELETE";
          case 5:
            return "CMD_MERGE";
          case 6:
            return "CMD_UTILITY";
          case 7:
            return "CMD_NOTHING";
          default:
            throw new Error("Key not recognized in enum CmdType");
        }
      }
    case "JoinType":
      {
        switch (key) {
          case "JOIN_INNER":
            return 0;
          case "JOIN_LEFT":
            return 1;
          case "JOIN_FULL":
            return 2;
          case "JOIN_RIGHT":
            return 3;
          case "JOIN_SEMI":
            return 4;
          case "JOIN_ANTI":
            return 5;
          case "JOIN_RIGHT_ANTI":
            return 6;
          case "JOIN_UNIQUE_OUTER":
            return 7;
          case "JOIN_UNIQUE_INNER":
            return 8;
          case 0:
            return "JOIN_INNER";
          case 1:
            return "JOIN_LEFT";
          case 2:
            return "JOIN_FULL";
          case 3:
            return "JOIN_RIGHT";
          case 4:
            return "JOIN_SEMI";
          case 5:
            return "JOIN_ANTI";
          case 6:
            return "JOIN_RIGHT_ANTI";
          case 7:
            return "JOIN_UNIQUE_OUTER";
          case 8:
            return "JOIN_UNIQUE_INNER";
          default:
            throw new Error("Key not recognized in enum JoinType");
        }
      }
    case "AggStrategy":
      {
        switch (key) {
          case "AGG_PLAIN":
            return 0;
          case "AGG_SORTED":
            return 1;
          case "AGG_HASHED":
            return 2;
          case "AGG_MIXED":
            return 3;
          case 0:
            return "AGG_PLAIN";
          case 1:
            return "AGG_SORTED";
          case 2:
            return "AGG_HASHED";
          case 3:
            return "AGG_MIXED";
          default:
            throw new Error("Key not recognized in enum AggStrategy");
        }
      }
    case "AggSplit":
      {
        switch (key) {
          case "AGGSPLIT_SIMPLE":
            return 0;
          case "AGGSPLIT_INITIAL_SERIAL":
            return 1;
          case "AGGSPLIT_FINAL_DESERIAL":
            return 2;
          case 0:
            return "AGGSPLIT_SIMPLE";
          case 1:
            return "AGGSPLIT_INITIAL_SERIAL";
          case 2:
            return "AGGSPLIT_FINAL_DESERIAL";
          default:
            throw new Error("Key not recognized in enum AggSplit");
        }
      }
    case "SetOpCmd":
      {
        switch (key) {
          case "SETOPCMD_INTERSECT":
            return 0;
          case "SETOPCMD_INTERSECT_ALL":
            return 1;
          case "SETOPCMD_EXCEPT":
            return 2;
          case "SETOPCMD_EXCEPT_ALL":
            return 3;
          case 0:
            return "SETOPCMD_INTERSECT";
          case 1:
            return "SETOPCMD_INTERSECT_ALL";
          case 2:
            return "SETOPCMD_EXCEPT";
          case 3:
            return "SETOPCMD_EXCEPT_ALL";
          default:
            throw new Error("Key not recognized in enum SetOpCmd");
        }
      }
    case "SetOpStrategy":
      {
        switch (key) {
          case "SETOP_SORTED":
            return 0;
          case "SETOP_HASHED":
            return 1;
          case 0:
            return "SETOP_SORTED";
          case 1:
            return "SETOP_HASHED";
          default:
            throw new Error("Key not recognized in enum SetOpStrategy");
        }
      }
    case "OnConflictAction":
      {
        switch (key) {
          case "ONCONFLICT_NONE":
            return 0;
          case "ONCONFLICT_NOTHING":
            return 1;
          case "ONCONFLICT_UPDATE":
            return 2;
          case 0:
            return "ONCONFLICT_NONE";
          case 1:
            return "ONCONFLICT_NOTHING";
          case 2:
            return "ONCONFLICT_UPDATE";
          default:
            throw new Error("Key not recognized in enum OnConflictAction");
        }
      }
    case "LimitOption":
      {
        switch (key) {
          case "LIMIT_OPTION_DEFAULT":
            return 0;
          case "LIMIT_OPTION_COUNT":
            return 1;
          case "LIMIT_OPTION_WITH_TIES":
            return 2;
          case 0:
            return "LIMIT_OPTION_DEFAULT";
          case 1:
            return "LIMIT_OPTION_COUNT";
          case 2:
            return "LIMIT_OPTION_WITH_TIES";
          default:
            throw new Error("Key not recognized in enum LimitOption");
        }
      }
    case "LockClauseStrength":
      {
        switch (key) {
          case "LCS_NONE":
            return 0;
          case "LCS_FORKEYSHARE":
            return 1;
          case "LCS_FORSHARE":
            return 2;
          case "LCS_FORNOKEYUPDATE":
            return 3;
          case "LCS_FORUPDATE":
            return 4;
          case 0:
            return "LCS_NONE";
          case 1:
            return "LCS_FORKEYSHARE";
          case 2:
            return "LCS_FORSHARE";
          case 3:
            return "LCS_FORNOKEYUPDATE";
          case 4:
            return "LCS_FORUPDATE";
          default:
            throw new Error("Key not recognized in enum LockClauseStrength");
        }
      }
    case "LockWaitPolicy":
      {
        switch (key) {
          case "LockWaitBlock":
            return 0;
          case "LockWaitSkip":
            return 1;
          case "LockWaitError":
            return 2;
          case 0:
            return "LockWaitBlock";
          case 1:
            return "LockWaitSkip";
          case 2:
            return "LockWaitError";
          default:
            throw new Error("Key not recognized in enum LockWaitPolicy");
        }
      }
    case "LockTupleMode":
      {
        switch (key) {
          case "LockTupleKeyShare":
            return 0;
          case "LockTupleShare":
            return 1;
          case "LockTupleNoKeyExclusive":
            return 2;
          case "LockTupleExclusive":
            return 3;
          case 0:
            return "LockTupleKeyShare";
          case 1:
            return "LockTupleShare";
          case 2:
            return "LockTupleNoKeyExclusive";
          case 3:
            return "LockTupleExclusive";
          default:
            throw new Error("Key not recognized in enum LockTupleMode");
        }
      }
    case "KeywordKind":
      {
        switch (key) {
          case "NO_KEYWORD":
            return 0;
          case "UNRESERVED_KEYWORD":
            return 1;
          case "COL_NAME_KEYWORD":
            return 2;
          case "TYPE_FUNC_NAME_KEYWORD":
            return 3;
          case "RESERVED_KEYWORD":
            return 4;
          case 0:
            return "NO_KEYWORD";
          case 1:
            return "UNRESERVED_KEYWORD";
          case 2:
            return "COL_NAME_KEYWORD";
          case 3:
            return "TYPE_FUNC_NAME_KEYWORD";
          case 4:
            return "RESERVED_KEYWORD";
          default:
            throw new Error("Key not recognized in enum KeywordKind");
        }
      }
    case "Token":
      {
        switch (key) {
          case "NUL":
            return 0;
          case "ASCII_36":
            return 36;
          case "ASCII_37":
            return 37;
          case "ASCII_40":
            return 40;
          case "ASCII_41":
            return 41;
          case "ASCII_42":
            return 42;
          case "ASCII_43":
            return 43;
          case "ASCII_44":
            return 44;
          case "ASCII_45":
            return 45;
          case "ASCII_46":
            return 46;
          case "ASCII_47":
            return 47;
          case "ASCII_58":
            return 58;
          case "ASCII_59":
            return 59;
          case "ASCII_60":
            return 60;
          case "ASCII_61":
            return 61;
          case "ASCII_62":
            return 62;
          case "ASCII_63":
            return 63;
          case "ASCII_91":
            return 91;
          case "ASCII_92":
            return 92;
          case "ASCII_93":
            return 93;
          case "ASCII_94":
            return 94;
          case "IDENT":
            return 258;
          case "UIDENT":
            return 259;
          case "FCONST":
            return 260;
          case "SCONST":
            return 261;
          case "USCONST":
            return 262;
          case "BCONST":
            return 263;
          case "XCONST":
            return 264;
          case "Op":
            return 265;
          case "ICONST":
            return 266;
          case "PARAM":
            return 267;
          case "TYPECAST":
            return 268;
          case "DOT_DOT":
            return 269;
          case "COLON_EQUALS":
            return 270;
          case "EQUALS_GREATER":
            return 271;
          case "LESS_EQUALS":
            return 272;
          case "GREATER_EQUALS":
            return 273;
          case "NOT_EQUALS":
            return 274;
          case "SQL_COMMENT":
            return 275;
          case "C_COMMENT":
            return 276;
          case "ABORT_P":
            return 277;
          case "ABSENT":
            return 278;
          case "ABSOLUTE_P":
            return 279;
          case "ACCESS":
            return 280;
          case "ACTION":
            return 281;
          case "ADD_P":
            return 282;
          case "ADMIN":
            return 283;
          case "AFTER":
            return 284;
          case "AGGREGATE":
            return 285;
          case "ALL":
            return 286;
          case "ALSO":
            return 287;
          case "ALTER":
            return 288;
          case "ALWAYS":
            return 289;
          case "ANALYSE":
            return 290;
          case "ANALYZE":
            return 291;
          case "AND":
            return 292;
          case "ANY":
            return 293;
          case "ARRAY":
            return 294;
          case "AS":
            return 295;
          case "ASC":
            return 296;
          case "ASENSITIVE":
            return 297;
          case "ASSERTION":
            return 298;
          case "ASSIGNMENT":
            return 299;
          case "ASYMMETRIC":
            return 300;
          case "ATOMIC":
            return 301;
          case "AT":
            return 302;
          case "ATTACH":
            return 303;
          case "ATTRIBUTE":
            return 304;
          case "AUTHORIZATION":
            return 305;
          case "BACKWARD":
            return 306;
          case "BEFORE":
            return 307;
          case "BEGIN_P":
            return 308;
          case "BETWEEN":
            return 309;
          case "BIGINT":
            return 310;
          case "BINARY":
            return 311;
          case "BIT":
            return 312;
          case "BOOLEAN_P":
            return 313;
          case "BOTH":
            return 314;
          case "BREADTH":
            return 315;
          case "BY":
            return 316;
          case "CACHE":
            return 317;
          case "CALL":
            return 318;
          case "CALLED":
            return 319;
          case "CASCADE":
            return 320;
          case "CASCADED":
            return 321;
          case "CASE":
            return 322;
          case "CAST":
            return 323;
          case "CATALOG_P":
            return 324;
          case "CHAIN":
            return 325;
          case "CHAR_P":
            return 326;
          case "CHARACTER":
            return 327;
          case "CHARACTERISTICS":
            return 328;
          case "CHECK":
            return 329;
          case "CHECKPOINT":
            return 330;
          case "CLASS":
            return 331;
          case "CLOSE":
            return 332;
          case "CLUSTER":
            return 333;
          case "COALESCE":
            return 334;
          case "COLLATE":
            return 335;
          case "COLLATION":
            return 336;
          case "COLUMN":
            return 337;
          case "COLUMNS":
            return 338;
          case "COMMENT":
            return 339;
          case "COMMENTS":
            return 340;
          case "COMMIT":
            return 341;
          case "COMMITTED":
            return 342;
          case "COMPRESSION":
            return 343;
          case "CONCURRENTLY":
            return 344;
          case "CONFIGURATION":
            return 345;
          case "CONFLICT":
            return 346;
          case "CONNECTION":
            return 347;
          case "CONSTRAINT":
            return 348;
          case "CONSTRAINTS":
            return 349;
          case "CONTENT_P":
            return 350;
          case "CONTINUE_P":
            return 351;
          case "CONVERSION_P":
            return 352;
          case "COPY":
            return 353;
          case "COST":
            return 354;
          case "CREATE":
            return 355;
          case "CROSS":
            return 356;
          case "CSV":
            return 357;
          case "CUBE":
            return 358;
          case "CURRENT_P":
            return 359;
          case "CURRENT_CATALOG":
            return 360;
          case "CURRENT_DATE":
            return 361;
          case "CURRENT_ROLE":
            return 362;
          case "CURRENT_SCHEMA":
            return 363;
          case "CURRENT_TIME":
            return 364;
          case "CURRENT_TIMESTAMP":
            return 365;
          case "CURRENT_USER":
            return 366;
          case "CURSOR":
            return 367;
          case "CYCLE":
            return 368;
          case "DATA_P":
            return 369;
          case "DATABASE":
            return 370;
          case "DAY_P":
            return 371;
          case "DEALLOCATE":
            return 372;
          case "DEC":
            return 373;
          case "DECIMAL_P":
            return 374;
          case "DECLARE":
            return 375;
          case "DEFAULT":
            return 376;
          case "DEFAULTS":
            return 377;
          case "DEFERRABLE":
            return 378;
          case "DEFERRED":
            return 379;
          case "DEFINER":
            return 380;
          case "DELETE_P":
            return 381;
          case "DELIMITER":
            return 382;
          case "DELIMITERS":
            return 383;
          case "DEPENDS":
            return 384;
          case "DEPTH":
            return 385;
          case "DESC":
            return 386;
          case "DETACH":
            return 387;
          case "DICTIONARY":
            return 388;
          case "DISABLE_P":
            return 389;
          case "DISCARD":
            return 390;
          case "DISTINCT":
            return 391;
          case "DO":
            return 392;
          case "DOCUMENT_P":
            return 393;
          case "DOMAIN_P":
            return 394;
          case "DOUBLE_P":
            return 395;
          case "DROP":
            return 396;
          case "EACH":
            return 397;
          case "ELSE":
            return 398;
          case "ENABLE_P":
            return 399;
          case "ENCODING":
            return 400;
          case "ENCRYPTED":
            return 401;
          case "END_P":
            return 402;
          case "ENUM_P":
            return 403;
          case "ESCAPE":
            return 404;
          case "EVENT":
            return 405;
          case "EXCEPT":
            return 406;
          case "EXCLUDE":
            return 407;
          case "EXCLUDING":
            return 408;
          case "EXCLUSIVE":
            return 409;
          case "EXECUTE":
            return 410;
          case "EXISTS":
            return 411;
          case "EXPLAIN":
            return 412;
          case "EXPRESSION":
            return 413;
          case "EXTENSION":
            return 414;
          case "EXTERNAL":
            return 415;
          case "EXTRACT":
            return 416;
          case "FALSE_P":
            return 417;
          case "FAMILY":
            return 418;
          case "FETCH":
            return 419;
          case "FILTER":
            return 420;
          case "FINALIZE":
            return 421;
          case "FIRST_P":
            return 422;
          case "FLOAT_P":
            return 423;
          case "FOLLOWING":
            return 424;
          case "FOR":
            return 425;
          case "FORCE":
            return 426;
          case "FOREIGN":
            return 427;
          case "FORMAT":
            return 428;
          case "FORWARD":
            return 429;
          case "FREEZE":
            return 430;
          case "FROM":
            return 431;
          case "FULL":
            return 432;
          case "FUNCTION":
            return 433;
          case "FUNCTIONS":
            return 434;
          case "GENERATED":
            return 435;
          case "GLOBAL":
            return 436;
          case "GRANT":
            return 437;
          case "GRANTED":
            return 438;
          case "GREATEST":
            return 439;
          case "GROUP_P":
            return 440;
          case "GROUPING":
            return 441;
          case "GROUPS":
            return 442;
          case "HANDLER":
            return 443;
          case "HAVING":
            return 444;
          case "HEADER_P":
            return 445;
          case "HOLD":
            return 446;
          case "HOUR_P":
            return 447;
          case "IDENTITY_P":
            return 448;
          case "IF_P":
            return 449;
          case "ILIKE":
            return 450;
          case "IMMEDIATE":
            return 451;
          case "IMMUTABLE":
            return 452;
          case "IMPLICIT_P":
            return 453;
          case "IMPORT_P":
            return 454;
          case "IN_P":
            return 455;
          case "INCLUDE":
            return 456;
          case "INCLUDING":
            return 457;
          case "INCREMENT":
            return 458;
          case "INDENT":
            return 459;
          case "INDEX":
            return 460;
          case "INDEXES":
            return 461;
          case "INHERIT":
            return 462;
          case "INHERITS":
            return 463;
          case "INITIALLY":
            return 464;
          case "INLINE_P":
            return 465;
          case "INNER_P":
            return 466;
          case "INOUT":
            return 467;
          case "INPUT_P":
            return 468;
          case "INSENSITIVE":
            return 469;
          case "INSERT":
            return 470;
          case "INSTEAD":
            return 471;
          case "INT_P":
            return 472;
          case "INTEGER":
            return 473;
          case "INTERSECT":
            return 474;
          case "INTERVAL":
            return 475;
          case "INTO":
            return 476;
          case "INVOKER":
            return 477;
          case "IS":
            return 478;
          case "ISNULL":
            return 479;
          case "ISOLATION":
            return 480;
          case "JOIN":
            return 481;
          case "JSON":
            return 482;
          case "JSON_ARRAY":
            return 483;
          case "JSON_ARRAYAGG":
            return 484;
          case "JSON_OBJECT":
            return 485;
          case "JSON_OBJECTAGG":
            return 486;
          case "KEY":
            return 487;
          case "KEYS":
            return 488;
          case "LABEL":
            return 489;
          case "LANGUAGE":
            return 490;
          case "LARGE_P":
            return 491;
          case "LAST_P":
            return 492;
          case "LATERAL_P":
            return 493;
          case "LEADING":
            return 494;
          case "LEAKPROOF":
            return 495;
          case "LEAST":
            return 496;
          case "LEFT":
            return 497;
          case "LEVEL":
            return 498;
          case "LIKE":
            return 499;
          case "LIMIT":
            return 500;
          case "LISTEN":
            return 501;
          case "LOAD":
            return 502;
          case "LOCAL":
            return 503;
          case "LOCALTIME":
            return 504;
          case "LOCALTIMESTAMP":
            return 505;
          case "LOCATION":
            return 506;
          case "LOCK_P":
            return 507;
          case "LOCKED":
            return 508;
          case "LOGGED":
            return 509;
          case "MAPPING":
            return 510;
          case "MATCH":
            return 511;
          case "MATCHED":
            return 512;
          case "MATERIALIZED":
            return 513;
          case "MAXVALUE":
            return 514;
          case "MERGE":
            return 515;
          case "METHOD":
            return 516;
          case "MINUTE_P":
            return 517;
          case "MINVALUE":
            return 518;
          case "MODE":
            return 519;
          case "MONTH_P":
            return 520;
          case "MOVE":
            return 521;
          case "NAME_P":
            return 522;
          case "NAMES":
            return 523;
          case "NATIONAL":
            return 524;
          case "NATURAL":
            return 525;
          case "NCHAR":
            return 526;
          case "NEW":
            return 527;
          case "NEXT":
            return 528;
          case "NFC":
            return 529;
          case "NFD":
            return 530;
          case "NFKC":
            return 531;
          case "NFKD":
            return 532;
          case "NO":
            return 533;
          case "NONE":
            return 534;
          case "NORMALIZE":
            return 535;
          case "NORMALIZED":
            return 536;
          case "NOT":
            return 537;
          case "NOTHING":
            return 538;
          case "NOTIFY":
            return 539;
          case "NOTNULL":
            return 540;
          case "NOWAIT":
            return 541;
          case "NULL_P":
            return 542;
          case "NULLIF":
            return 543;
          case "NULLS_P":
            return 544;
          case "NUMERIC":
            return 545;
          case "OBJECT_P":
            return 546;
          case "OF":
            return 547;
          case "OFF":
            return 548;
          case "OFFSET":
            return 549;
          case "OIDS":
            return 550;
          case "OLD":
            return 551;
          case "ON":
            return 552;
          case "ONLY":
            return 553;
          case "OPERATOR":
            return 554;
          case "OPTION":
            return 555;
          case "OPTIONS":
            return 556;
          case "OR":
            return 557;
          case "ORDER":
            return 558;
          case "ORDINALITY":
            return 559;
          case "OTHERS":
            return 560;
          case "OUT_P":
            return 561;
          case "OUTER_P":
            return 562;
          case "OVER":
            return 563;
          case "OVERLAPS":
            return 564;
          case "OVERLAY":
            return 565;
          case "OVERRIDING":
            return 566;
          case "OWNED":
            return 567;
          case "OWNER":
            return 568;
          case "PARALLEL":
            return 569;
          case "PARAMETER":
            return 570;
          case "PARSER":
            return 571;
          case "PARTIAL":
            return 572;
          case "PARTITION":
            return 573;
          case "PASSING":
            return 574;
          case "PASSWORD":
            return 575;
          case "PLACING":
            return 576;
          case "PLANS":
            return 577;
          case "POLICY":
            return 578;
          case "POSITION":
            return 579;
          case "PRECEDING":
            return 580;
          case "PRECISION":
            return 581;
          case "PRESERVE":
            return 582;
          case "PREPARE":
            return 583;
          case "PREPARED":
            return 584;
          case "PRIMARY":
            return 585;
          case "PRIOR":
            return 586;
          case "PRIVILEGES":
            return 587;
          case "PROCEDURAL":
            return 588;
          case "PROCEDURE":
            return 589;
          case "PROCEDURES":
            return 590;
          case "PROGRAM":
            return 591;
          case "PUBLICATION":
            return 592;
          case "QUOTE":
            return 593;
          case "RANGE":
            return 594;
          case "READ":
            return 595;
          case "REAL":
            return 596;
          case "REASSIGN":
            return 597;
          case "RECHECK":
            return 598;
          case "RECURSIVE":
            return 599;
          case "REF_P":
            return 600;
          case "REFERENCES":
            return 601;
          case "REFERENCING":
            return 602;
          case "REFRESH":
            return 603;
          case "REINDEX":
            return 604;
          case "RELATIVE_P":
            return 605;
          case "RELEASE":
            return 606;
          case "RENAME":
            return 607;
          case "REPEATABLE":
            return 608;
          case "REPLACE":
            return 609;
          case "REPLICA":
            return 610;
          case "RESET":
            return 611;
          case "RESTART":
            return 612;
          case "RESTRICT":
            return 613;
          case "RETURN":
            return 614;
          case "RETURNING":
            return 615;
          case "RETURNS":
            return 616;
          case "REVOKE":
            return 617;
          case "RIGHT":
            return 618;
          case "ROLE":
            return 619;
          case "ROLLBACK":
            return 620;
          case "ROLLUP":
            return 621;
          case "ROUTINE":
            return 622;
          case "ROUTINES":
            return 623;
          case "ROW":
            return 624;
          case "ROWS":
            return 625;
          case "RULE":
            return 626;
          case "SAVEPOINT":
            return 627;
          case "SCALAR":
            return 628;
          case "SCHEMA":
            return 629;
          case "SCHEMAS":
            return 630;
          case "SCROLL":
            return 631;
          case "SEARCH":
            return 632;
          case "SECOND_P":
            return 633;
          case "SECURITY":
            return 634;
          case "SELECT":
            return 635;
          case "SEQUENCE":
            return 636;
          case "SEQUENCES":
            return 637;
          case "SERIALIZABLE":
            return 638;
          case "SERVER":
            return 639;
          case "SESSION":
            return 640;
          case "SESSION_USER":
            return 641;
          case "SET":
            return 642;
          case "SETS":
            return 643;
          case "SETOF":
            return 644;
          case "SHARE":
            return 645;
          case "SHOW":
            return 646;
          case "SIMILAR":
            return 647;
          case "SIMPLE":
            return 648;
          case "SKIP":
            return 649;
          case "SMALLINT":
            return 650;
          case "SNAPSHOT":
            return 651;
          case "SOME":
            return 652;
          case "SQL_P":
            return 653;
          case "STABLE":
            return 654;
          case "STANDALONE_P":
            return 655;
          case "START":
            return 656;
          case "STATEMENT":
            return 657;
          case "STATISTICS":
            return 658;
          case "STDIN":
            return 659;
          case "STDOUT":
            return 660;
          case "STORAGE":
            return 661;
          case "STORED":
            return 662;
          case "STRICT_P":
            return 663;
          case "STRIP_P":
            return 664;
          case "SUBSCRIPTION":
            return 665;
          case "SUBSTRING":
            return 666;
          case "SUPPORT":
            return 667;
          case "SYMMETRIC":
            return 668;
          case "SYSID":
            return 669;
          case "SYSTEM_P":
            return 670;
          case "SYSTEM_USER":
            return 671;
          case "TABLE":
            return 672;
          case "TABLES":
            return 673;
          case "TABLESAMPLE":
            return 674;
          case "TABLESPACE":
            return 675;
          case "TEMP":
            return 676;
          case "TEMPLATE":
            return 677;
          case "TEMPORARY":
            return 678;
          case "TEXT_P":
            return 679;
          case "THEN":
            return 680;
          case "TIES":
            return 681;
          case "TIME":
            return 682;
          case "TIMESTAMP":
            return 683;
          case "TO":
            return 684;
          case "TRAILING":
            return 685;
          case "TRANSACTION":
            return 686;
          case "TRANSFORM":
            return 687;
          case "TREAT":
            return 688;
          case "TRIGGER":
            return 689;
          case "TRIM":
            return 690;
          case "TRUE_P":
            return 691;
          case "TRUNCATE":
            return 692;
          case "TRUSTED":
            return 693;
          case "TYPE_P":
            return 694;
          case "TYPES_P":
            return 695;
          case "UESCAPE":
            return 696;
          case "UNBOUNDED":
            return 697;
          case "UNCOMMITTED":
            return 698;
          case "UNENCRYPTED":
            return 699;
          case "UNION":
            return 700;
          case "UNIQUE":
            return 701;
          case "UNKNOWN":
            return 702;
          case "UNLISTEN":
            return 703;
          case "UNLOGGED":
            return 704;
          case "UNTIL":
            return 705;
          case "UPDATE":
            return 706;
          case "USER":
            return 707;
          case "USING":
            return 708;
          case "VACUUM":
            return 709;
          case "VALID":
            return 710;
          case "VALIDATE":
            return 711;
          case "VALIDATOR":
            return 712;
          case "VALUE_P":
            return 713;
          case "VALUES":
            return 714;
          case "VARCHAR":
            return 715;
          case "VARIADIC":
            return 716;
          case "VARYING":
            return 717;
          case "VERBOSE":
            return 718;
          case "VERSION_P":
            return 719;
          case "VIEW":
            return 720;
          case "VIEWS":
            return 721;
          case "VOLATILE":
            return 722;
          case "WHEN":
            return 723;
          case "WHERE":
            return 724;
          case "WHITESPACE_P":
            return 725;
          case "WINDOW":
            return 726;
          case "WITH":
            return 727;
          case "WITHIN":
            return 728;
          case "WITHOUT":
            return 729;
          case "WORK":
            return 730;
          case "WRAPPER":
            return 731;
          case "WRITE":
            return 732;
          case "XML_P":
            return 733;
          case "XMLATTRIBUTES":
            return 734;
          case "XMLCONCAT":
            return 735;
          case "XMLELEMENT":
            return 736;
          case "XMLEXISTS":
            return 737;
          case "XMLFOREST":
            return 738;
          case "XMLNAMESPACES":
            return 739;
          case "XMLPARSE":
            return 740;
          case "XMLPI":
            return 741;
          case "XMLROOT":
            return 742;
          case "XMLSERIALIZE":
            return 743;
          case "XMLTABLE":
            return 744;
          case "YEAR_P":
            return 745;
          case "YES_P":
            return 746;
          case "ZONE":
            return 747;
          case "FORMAT_LA":
            return 748;
          case "NOT_LA":
            return 749;
          case "NULLS_LA":
            return 750;
          case "WITH_LA":
            return 751;
          case "WITHOUT_LA":
            return 752;
          case "MODE_TYPE_NAME":
            return 753;
          case "MODE_PLPGSQL_EXPR":
            return 754;
          case "MODE_PLPGSQL_ASSIGN1":
            return 755;
          case "MODE_PLPGSQL_ASSIGN2":
            return 756;
          case "MODE_PLPGSQL_ASSIGN3":
            return 757;
          case "UMINUS":
            return 758;
          case 0:
            return "NUL";
          case 36:
            return "ASCII_36";
          case 37:
            return "ASCII_37";
          case 40:
            return "ASCII_40";
          case 41:
            return "ASCII_41";
          case 42:
            return "ASCII_42";
          case 43:
            return "ASCII_43";
          case 44:
            return "ASCII_44";
          case 45:
            return "ASCII_45";
          case 46:
            return "ASCII_46";
          case 47:
            return "ASCII_47";
          case 58:
            return "ASCII_58";
          case 59:
            return "ASCII_59";
          case 60:
            return "ASCII_60";
          case 61:
            return "ASCII_61";
          case 62:
            return "ASCII_62";
          case 63:
            return "ASCII_63";
          case 91:
            return "ASCII_91";
          case 92:
            return "ASCII_92";
          case 93:
            return "ASCII_93";
          case 94:
            return "ASCII_94";
          case 258:
            return "IDENT";
          case 259:
            return "UIDENT";
          case 260:
            return "FCONST";
          case 261:
            return "SCONST";
          case 262:
            return "USCONST";
          case 263:
            return "BCONST";
          case 264:
            return "XCONST";
          case 265:
            return "Op";
          case 266:
            return "ICONST";
          case 267:
            return "PARAM";
          case 268:
            return "TYPECAST";
          case 269:
            return "DOT_DOT";
          case 270:
            return "COLON_EQUALS";
          case 271:
            return "EQUALS_GREATER";
          case 272:
            return "LESS_EQUALS";
          case 273:
            return "GREATER_EQUALS";
          case 274:
            return "NOT_EQUALS";
          case 275:
            return "SQL_COMMENT";
          case 276:
            return "C_COMMENT";
          case 277:
            return "ABORT_P";
          case 278:
            return "ABSENT";
          case 279:
            return "ABSOLUTE_P";
          case 280:
            return "ACCESS";
          case 281:
            return "ACTION";
          case 282:
            return "ADD_P";
          case 283:
            return "ADMIN";
          case 284:
            return "AFTER";
          case 285:
            return "AGGREGATE";
          case 286:
            return "ALL";
          case 287:
            return "ALSO";
          case 288:
            return "ALTER";
          case 289:
            return "ALWAYS";
          case 290:
            return "ANALYSE";
          case 291:
            return "ANALYZE";
          case 292:
            return "AND";
          case 293:
            return "ANY";
          case 294:
            return "ARRAY";
          case 295:
            return "AS";
          case 296:
            return "ASC";
          case 297:
            return "ASENSITIVE";
          case 298:
            return "ASSERTION";
          case 299:
            return "ASSIGNMENT";
          case 300:
            return "ASYMMETRIC";
          case 301:
            return "ATOMIC";
          case 302:
            return "AT";
          case 303:
            return "ATTACH";
          case 304:
            return "ATTRIBUTE";
          case 305:
            return "AUTHORIZATION";
          case 306:
            return "BACKWARD";
          case 307:
            return "BEFORE";
          case 308:
            return "BEGIN_P";
          case 309:
            return "BETWEEN";
          case 310:
            return "BIGINT";
          case 311:
            return "BINARY";
          case 312:
            return "BIT";
          case 313:
            return "BOOLEAN_P";
          case 314:
            return "BOTH";
          case 315:
            return "BREADTH";
          case 316:
            return "BY";
          case 317:
            return "CACHE";
          case 318:
            return "CALL";
          case 319:
            return "CALLED";
          case 320:
            return "CASCADE";
          case 321:
            return "CASCADED";
          case 322:
            return "CASE";
          case 323:
            return "CAST";
          case 324:
            return "CATALOG_P";
          case 325:
            return "CHAIN";
          case 326:
            return "CHAR_P";
          case 327:
            return "CHARACTER";
          case 328:
            return "CHARACTERISTICS";
          case 329:
            return "CHECK";
          case 330:
            return "CHECKPOINT";
          case 331:
            return "CLASS";
          case 332:
            return "CLOSE";
          case 333:
            return "CLUSTER";
          case 334:
            return "COALESCE";
          case 335:
            return "COLLATE";
          case 336:
            return "COLLATION";
          case 337:
            return "COLUMN";
          case 338:
            return "COLUMNS";
          case 339:
            return "COMMENT";
          case 340:
            return "COMMENTS";
          case 341:
            return "COMMIT";
          case 342:
            return "COMMITTED";
          case 343:
            return "COMPRESSION";
          case 344:
            return "CONCURRENTLY";
          case 345:
            return "CONFIGURATION";
          case 346:
            return "CONFLICT";
          case 347:
            return "CONNECTION";
          case 348:
            return "CONSTRAINT";
          case 349:
            return "CONSTRAINTS";
          case 350:
            return "CONTENT_P";
          case 351:
            return "CONTINUE_P";
          case 352:
            return "CONVERSION_P";
          case 353:
            return "COPY";
          case 354:
            return "COST";
          case 355:
            return "CREATE";
          case 356:
            return "CROSS";
          case 357:
            return "CSV";
          case 358:
            return "CUBE";
          case 359:
            return "CURRENT_P";
          case 360:
            return "CURRENT_CATALOG";
          case 361:
            return "CURRENT_DATE";
          case 362:
            return "CURRENT_ROLE";
          case 363:
            return "CURRENT_SCHEMA";
          case 364:
            return "CURRENT_TIME";
          case 365:
            return "CURRENT_TIMESTAMP";
          case 366:
            return "CURRENT_USER";
          case 367:
            return "CURSOR";
          case 368:
            return "CYCLE";
          case 369:
            return "DATA_P";
          case 370:
            return "DATABASE";
          case 371:
            return "DAY_P";
          case 372:
            return "DEALLOCATE";
          case 373:
            return "DEC";
          case 374:
            return "DECIMAL_P";
          case 375:
            return "DECLARE";
          case 376:
            return "DEFAULT";
          case 377:
            return "DEFAULTS";
          case 378:
            return "DEFERRABLE";
          case 379:
            return "DEFERRED";
          case 380:
            return "DEFINER";
          case 381:
            return "DELETE_P";
          case 382:
            return "DELIMITER";
          case 383:
            return "DELIMITERS";
          case 384:
            return "DEPENDS";
          case 385:
            return "DEPTH";
          case 386:
            return "DESC";
          case 387:
            return "DETACH";
          case 388:
            return "DICTIONARY";
          case 389:
            return "DISABLE_P";
          case 390:
            return "DISCARD";
          case 391:
            return "DISTINCT";
          case 392:
            return "DO";
          case 393:
            return "DOCUMENT_P";
          case 394:
            return "DOMAIN_P";
          case 395:
            return "DOUBLE_P";
          case 396:
            return "DROP";
          case 397:
            return "EACH";
          case 398:
            return "ELSE";
          case 399:
            return "ENABLE_P";
          case 400:
            return "ENCODING";
          case 401:
            return "ENCRYPTED";
          case 402:
            return "END_P";
          case 403:
            return "ENUM_P";
          case 404:
            return "ESCAPE";
          case 405:
            return "EVENT";
          case 406:
            return "EXCEPT";
          case 407:
            return "EXCLUDE";
          case 408:
            return "EXCLUDING";
          case 409:
            return "EXCLUSIVE";
          case 410:
            return "EXECUTE";
          case 411:
            return "EXISTS";
          case 412:
            return "EXPLAIN";
          case 413:
            return "EXPRESSION";
          case 414:
            return "EXTENSION";
          case 415:
            return "EXTERNAL";
          case 416:
            return "EXTRACT";
          case 417:
            return "FALSE_P";
          case 418:
            return "FAMILY";
          case 419:
            return "FETCH";
          case 420:
            return "FILTER";
          case 421:
            return "FINALIZE";
          case 422:
            return "FIRST_P";
          case 423:
            return "FLOAT_P";
          case 424:
            return "FOLLOWING";
          case 425:
            return "FOR";
          case 426:
            return "FORCE";
          case 427:
            return "FOREIGN";
          case 428:
            return "FORMAT";
          case 429:
            return "FORWARD";
          case 430:
            return "FREEZE";
          case 431:
            return "FROM";
          case 432:
            return "FULL";
          case 433:
            return "FUNCTION";
          case 434:
            return "FUNCTIONS";
          case 435:
            return "GENERATED";
          case 436:
            return "GLOBAL";
          case 437:
            return "GRANT";
          case 438:
            return "GRANTED";
          case 439:
            return "GREATEST";
          case 440:
            return "GROUP_P";
          case 441:
            return "GROUPING";
          case 442:
            return "GROUPS";
          case 443:
            return "HANDLER";
          case 444:
            return "HAVING";
          case 445:
            return "HEADER_P";
          case 446:
            return "HOLD";
          case 447:
            return "HOUR_P";
          case 448:
            return "IDENTITY_P";
          case 449:
            return "IF_P";
          case 450:
            return "ILIKE";
          case 451:
            return "IMMEDIATE";
          case 452:
            return "IMMUTABLE";
          case 453:
            return "IMPLICIT_P";
          case 454:
            return "IMPORT_P";
          case 455:
            return "IN_P";
          case 456:
            return "INCLUDE";
          case 457:
            return "INCLUDING";
          case 458:
            return "INCREMENT";
          case 459:
            return "INDENT";
          case 460:
            return "INDEX";
          case 461:
            return "INDEXES";
          case 462:
            return "INHERIT";
          case 463:
            return "INHERITS";
          case 464:
            return "INITIALLY";
          case 465:
            return "INLINE_P";
          case 466:
            return "INNER_P";
          case 467:
            return "INOUT";
          case 468:
            return "INPUT_P";
          case 469:
            return "INSENSITIVE";
          case 470:
            return "INSERT";
          case 471:
            return "INSTEAD";
          case 472:
            return "INT_P";
          case 473:
            return "INTEGER";
          case 474:
            return "INTERSECT";
          case 475:
            return "INTERVAL";
          case 476:
            return "INTO";
          case 477:
            return "INVOKER";
          case 478:
            return "IS";
          case 479:
            return "ISNULL";
          case 480:
            return "ISOLATION";
          case 481:
            return "JOIN";
          case 482:
            return "JSON";
          case 483:
            return "JSON_ARRAY";
          case 484:
            return "JSON_ARRAYAGG";
          case 485:
            return "JSON_OBJECT";
          case 486:
            return "JSON_OBJECTAGG";
          case 487:
            return "KEY";
          case 488:
            return "KEYS";
          case 489:
            return "LABEL";
          case 490:
            return "LANGUAGE";
          case 491:
            return "LARGE_P";
          case 492:
            return "LAST_P";
          case 493:
            return "LATERAL_P";
          case 494:
            return "LEADING";
          case 495:
            return "LEAKPROOF";
          case 496:
            return "LEAST";
          case 497:
            return "LEFT";
          case 498:
            return "LEVEL";
          case 499:
            return "LIKE";
          case 500:
            return "LIMIT";
          case 501:
            return "LISTEN";
          case 502:
            return "LOAD";
          case 503:
            return "LOCAL";
          case 504:
            return "LOCALTIME";
          case 505:
            return "LOCALTIMESTAMP";
          case 506:
            return "LOCATION";
          case 507:
            return "LOCK_P";
          case 508:
            return "LOCKED";
          case 509:
            return "LOGGED";
          case 510:
            return "MAPPING";
          case 511:
            return "MATCH";
          case 512:
            return "MATCHED";
          case 513:
            return "MATERIALIZED";
          case 514:
            return "MAXVALUE";
          case 515:
            return "MERGE";
          case 516:
            return "METHOD";
          case 517:
            return "MINUTE_P";
          case 518:
            return "MINVALUE";
          case 519:
            return "MODE";
          case 520:
            return "MONTH_P";
          case 521:
            return "MOVE";
          case 522:
            return "NAME_P";
          case 523:
            return "NAMES";
          case 524:
            return "NATIONAL";
          case 525:
            return "NATURAL";
          case 526:
            return "NCHAR";
          case 527:
            return "NEW";
          case 528:
            return "NEXT";
          case 529:
            return "NFC";
          case 530:
            return "NFD";
          case 531:
            return "NFKC";
          case 532:
            return "NFKD";
          case 533:
            return "NO";
          case 534:
            return "NONE";
          case 535:
            return "NORMALIZE";
          case 536:
            return "NORMALIZED";
          case 537:
            return "NOT";
          case 538:
            return "NOTHING";
          case 539:
            return "NOTIFY";
          case 540:
            return "NOTNULL";
          case 541:
            return "NOWAIT";
          case 542:
            return "NULL_P";
          case 543:
            return "NULLIF";
          case 544:
            return "NULLS_P";
          case 545:
            return "NUMERIC";
          case 546:
            return "OBJECT_P";
          case 547:
            return "OF";
          case 548:
            return "OFF";
          case 549:
            return "OFFSET";
          case 550:
            return "OIDS";
          case 551:
            return "OLD";
          case 552:
            return "ON";
          case 553:
            return "ONLY";
          case 554:
            return "OPERATOR";
          case 555:
            return "OPTION";
          case 556:
            return "OPTIONS";
          case 557:
            return "OR";
          case 558:
            return "ORDER";
          case 559:
            return "ORDINALITY";
          case 560:
            return "OTHERS";
          case 561:
            return "OUT_P";
          case 562:
            return "OUTER_P";
          case 563:
            return "OVER";
          case 564:
            return "OVERLAPS";
          case 565:
            return "OVERLAY";
          case 566:
            return "OVERRIDING";
          case 567:
            return "OWNED";
          case 568:
            return "OWNER";
          case 569:
            return "PARALLEL";
          case 570:
            return "PARAMETER";
          case 571:
            return "PARSER";
          case 572:
            return "PARTIAL";
          case 573:
            return "PARTITION";
          case 574:
            return "PASSING";
          case 575:
            return "PASSWORD";
          case 576:
            return "PLACING";
          case 577:
            return "PLANS";
          case 578:
            return "POLICY";
          case 579:
            return "POSITION";
          case 580:
            return "PRECEDING";
          case 581:
            return "PRECISION";
          case 582:
            return "PRESERVE";
          case 583:
            return "PREPARE";
          case 584:
            return "PREPARED";
          case 585:
            return "PRIMARY";
          case 586:
            return "PRIOR";
          case 587:
            return "PRIVILEGES";
          case 588:
            return "PROCEDURAL";
          case 589:
            return "PROCEDURE";
          case 590:
            return "PROCEDURES";
          case 591:
            return "PROGRAM";
          case 592:
            return "PUBLICATION";
          case 593:
            return "QUOTE";
          case 594:
            return "RANGE";
          case 595:
            return "READ";
          case 596:
            return "REAL";
          case 597:
            return "REASSIGN";
          case 598:
            return "RECHECK";
          case 599:
            return "RECURSIVE";
          case 600:
            return "REF_P";
          case 601:
            return "REFERENCES";
          case 602:
            return "REFERENCING";
          case 603:
            return "REFRESH";
          case 604:
            return "REINDEX";
          case 605:
            return "RELATIVE_P";
          case 606:
            return "RELEASE";
          case 607:
            return "RENAME";
          case 608:
            return "REPEATABLE";
          case 609:
            return "REPLACE";
          case 610:
            return "REPLICA";
          case 611:
            return "RESET";
          case 612:
            return "RESTART";
          case 613:
            return "RESTRICT";
          case 614:
            return "RETURN";
          case 615:
            return "RETURNING";
          case 616:
            return "RETURNS";
          case 617:
            return "REVOKE";
          case 618:
            return "RIGHT";
          case 619:
            return "ROLE";
          case 620:
            return "ROLLBACK";
          case 621:
            return "ROLLUP";
          case 622:
            return "ROUTINE";
          case 623:
            return "ROUTINES";
          case 624:
            return "ROW";
          case 625:
            return "ROWS";
          case 626:
            return "RULE";
          case 627:
            return "SAVEPOINT";
          case 628:
            return "SCALAR";
          case 629:
            return "SCHEMA";
          case 630:
            return "SCHEMAS";
          case 631:
            return "SCROLL";
          case 632:
            return "SEARCH";
          case 633:
            return "SECOND_P";
          case 634:
            return "SECURITY";
          case 635:
            return "SELECT";
          case 636:
            return "SEQUENCE";
          case 637:
            return "SEQUENCES";
          case 638:
            return "SERIALIZABLE";
          case 639:
            return "SERVER";
          case 640:
            return "SESSION";
          case 641:
            return "SESSION_USER";
          case 642:
            return "SET";
          case 643:
            return "SETS";
          case 644:
            return "SETOF";
          case 645:
            return "SHARE";
          case 646:
            return "SHOW";
          case 647:
            return "SIMILAR";
          case 648:
            return "SIMPLE";
          case 649:
            return "SKIP";
          case 650:
            return "SMALLINT";
          case 651:
            return "SNAPSHOT";
          case 652:
            return "SOME";
          case 653:
            return "SQL_P";
          case 654:
            return "STABLE";
          case 655:
            return "STANDALONE_P";
          case 656:
            return "START";
          case 657:
            return "STATEMENT";
          case 658:
            return "STATISTICS";
          case 659:
            return "STDIN";
          case 660:
            return "STDOUT";
          case 661:
            return "STORAGE";
          case 662:
            return "STORED";
          case 663:
            return "STRICT_P";
          case 664:
            return "STRIP_P";
          case 665:
            return "SUBSCRIPTION";
          case 666:
            return "SUBSTRING";
          case 667:
            return "SUPPORT";
          case 668:
            return "SYMMETRIC";
          case 669:
            return "SYSID";
          case 670:
            return "SYSTEM_P";
          case 671:
            return "SYSTEM_USER";
          case 672:
            return "TABLE";
          case 673:
            return "TABLES";
          case 674:
            return "TABLESAMPLE";
          case 675:
            return "TABLESPACE";
          case 676:
            return "TEMP";
          case 677:
            return "TEMPLATE";
          case 678:
            return "TEMPORARY";
          case 679:
            return "TEXT_P";
          case 680:
            return "THEN";
          case 681:
            return "TIES";
          case 682:
            return "TIME";
          case 683:
            return "TIMESTAMP";
          case 684:
            return "TO";
          case 685:
            return "TRAILING";
          case 686:
            return "TRANSACTION";
          case 687:
            return "TRANSFORM";
          case 688:
            return "TREAT";
          case 689:
            return "TRIGGER";
          case 690:
            return "TRIM";
          case 691:
            return "TRUE_P";
          case 692:
            return "TRUNCATE";
          case 693:
            return "TRUSTED";
          case 694:
            return "TYPE_P";
          case 695:
            return "TYPES_P";
          case 696:
            return "UESCAPE";
          case 697:
            return "UNBOUNDED";
          case 698:
            return "UNCOMMITTED";
          case 699:
            return "UNENCRYPTED";
          case 700:
            return "UNION";
          case 701:
            return "UNIQUE";
          case 702:
            return "UNKNOWN";
          case 703:
            return "UNLISTEN";
          case 704:
            return "UNLOGGED";
          case 705:
            return "UNTIL";
          case 706:
            return "UPDATE";
          case 707:
            return "USER";
          case 708:
            return "USING";
          case 709:
            return "VACUUM";
          case 710:
            return "VALID";
          case 711:
            return "VALIDATE";
          case 712:
            return "VALIDATOR";
          case 713:
            return "VALUE_P";
          case 714:
            return "VALUES";
          case 715:
            return "VARCHAR";
          case 716:
            return "VARIADIC";
          case 717:
            return "VARYING";
          case 718:
            return "VERBOSE";
          case 719:
            return "VERSION_P";
          case 720:
            return "VIEW";
          case 721:
            return "VIEWS";
          case 722:
            return "VOLATILE";
          case 723:
            return "WHEN";
          case 724:
            return "WHERE";
          case 725:
            return "WHITESPACE_P";
          case 726:
            return "WINDOW";
          case 727:
            return "WITH";
          case 728:
            return "WITHIN";
          case 729:
            return "WITHOUT";
          case 730:
            return "WORK";
          case 731:
            return "WRAPPER";
          case 732:
            return "WRITE";
          case 733:
            return "XML_P";
          case 734:
            return "XMLATTRIBUTES";
          case 735:
            return "XMLCONCAT";
          case 736:
            return "XMLELEMENT";
          case 737:
            return "XMLEXISTS";
          case 738:
            return "XMLFOREST";
          case 739:
            return "XMLNAMESPACES";
          case 740:
            return "XMLPARSE";
          case 741:
            return "XMLPI";
          case 742:
            return "XMLROOT";
          case 743:
            return "XMLSERIALIZE";
          case 744:
            return "XMLTABLE";
          case 745:
            return "YEAR_P";
          case 746:
            return "YES_P";
          case 747:
            return "ZONE";
          case 748:
            return "FORMAT_LA";
          case 749:
            return "NOT_LA";
          case 750:
            return "NULLS_LA";
          case 751:
            return "WITH_LA";
          case 752:
            return "WITHOUT_LA";
          case 753:
            return "MODE_TYPE_NAME";
          case 754:
            return "MODE_PLPGSQL_EXPR";
          case 755:
            return "MODE_PLPGSQL_ASSIGN1";
          case 756:
            return "MODE_PLPGSQL_ASSIGN2";
          case 757:
            return "MODE_PLPGSQL_ASSIGN3";
          case 758:
            return "UMINUS";
          default:
            throw new Error("Key not recognized in enum Token");
        }
      }
    default:
      throw new Error("Enum type not recognized");
  }
};",
    "file": "utils.ts",
  },
]
`;
